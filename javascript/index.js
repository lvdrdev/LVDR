"use strict";
//mini-challenge stuff
let miniChallenges = [];
class MiniChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["a quick look inspired from "] = 0] = "a quick look inspired from ";
            desc1[desc1["a quiz about "] = 1] = "a quiz about ";
            desc1[desc1["a parody game show with about "] = 2] = "a parody game show about ";
            desc1[desc1["a racing competition about "] = 3] = "a racing competition about ";
            desc1[desc1["a short song about "] = 4] = "a short song about ";
            desc1[desc1["make-up tutorials with "] = 5] = "make-up tutorials with ";
            desc1[desc1["a mugshot photo with "] = 6] = "a mugshot photo with ";
            desc1[desc1["a parody advisory announcement about "] = 7] = "a parody advisory announcement about ";
            desc1[desc1["a dance battle with "] = 8] = "a dance battle with ";
        })(desc1 || (desc1 = {}));
        let desc2;
        (function (desc2) {
            desc2[desc2["the pitcrew."] = 0] = "the pitcrew.";
            desc2[desc2["a partner."] = 1] = "a partner.";
            desc2[desc2["past Drag Race contestants."] = 2] = "past Drag Race contestants.";
            desc2[desc2["the sponsored product of the episode."] = 3] = "the sponsored product of the episode.";
            desc2[desc2["a popular queer icon."] = 4] = "a popular queer icon.";
            desc2[desc2["iconic Drag Race moments."] = 5] = "iconic Drag Race moments.";
            desc2[desc2["an iconic pop culture moment."] = 6] = "an iconic pop culture moment.";
        })(desc2 || (desc2 = {}));
        let desc3;
        (function (desc3) {
            desc3[desc3["a dancefloor with several members of the Pit Crew."] = 0] = "a dancefloor with several members of the Pit Crew.";
            desc3[desc3["a giant tank filled with water."] = 1] = "a giant tank filled with water.";
            desc3[desc3["set filled with past Drag Race Winners."] = 2] = "set filled with past Drag Race Winners.";
            desc3[desc3["vintage set with a huge fan blowing them up."] = 3] = "vintage set with a huge fan blowing them up.";
            desc3[desc3["plain white set as the Pit Crew pours different colored goos on them."] = 4] = "plain white set as the Pit Crew pours different colored goos on them.";
            desc3[desc3["giant spinning wheel where they were strapped on."] = 5] = "giant spinning wheel where they were strapped on.";
            desc3[desc3["giant bowl of mint candies."] = 6] = "giant bowl of mint candies.";
            desc3[desc3["platform that is 10-feet elevated from the ground."] = 7] = "platform that is 10-feet elevated from the ground.";
            desc3[desc3["pool of mud with the Pit Crew."] = 8] = "pool of mud with the Pit Crew.";
            desc3[desc3["fiery-themed set with several firedancers."] = 9] = "fiery-themed set with several firedancers.";
            desc3[desc3["consistently rotating platform."] = 10] = "consistently rotating platform.";
            desc3[desc3["bondage-inspired set with the Pit Crew."] = 11] = "bondage-inspired set with the Pit Crew.";
            desc3[desc3["red carpet parody set."] = 12] = "red carpet parody set.";
        })(desc3 || (desc3 = {}));
        let desc4;
        (function (desc4) {
            desc4[desc4["Spring and Fall Collection"] = 0] = "Spring and Fall Collection";
            desc4[desc4["Radiant Morning and Freaky Evening"] = 1] = "Radiant Morning and Freaky Evening";
            desc4[desc4["Classy Lady and Foxy Vamp"] = 2] = "Classy Lady and Foxy Vamp";
            desc4[desc4["Heavenly and Hellbound Couture"] = 3] = "Heavenly and Hellbound Couture";
            desc4[desc4["Geometric and Deconstructed Fashion"] = 4] = "Geometric and Deconstructed Fashion";
            desc4[desc4["Vintage and Futuristic"] = 5] = "Vintage and Futuristic";
            desc4[desc4["Chic Romantic and Creep Horrific"] = 6] = "Chic Romantic and Creep Horrific";
        })(desc4 || (desc4 = {}));
        let desc5;
        (function (desc5) {
            desc5[desc5["bubblewraps"] = 0] = "bubblewraps";
            desc5[desc5["a patterned wallpaper"] = 1] = "a patterned wallpaper";
            desc5[desc5["towels and blankets"] = 2] = "towels and blankets";
            desc5[desc5["paper bags"] = 3] = "paper bags";
            desc5[desc5["PVC fabric"] = 4] = "PVC fabric";
            desc5[desc5["curtains"] = 5] = "curtains";
            desc5[desc5["cardboard boxes"] = 6] = "cardboard boxes";
            desc5[desc5["denim fabrics"] = 7] = "denim fabrics";
            desc5[desc5["flyers and posters"] = 8] = "flyers and posters";
        })(desc5 || (desc5 = {}));
        //reading and puppet challenges:
        if (totalCastSize >= 10 && currentCast.length < 9 && splitpremiere == false && !all_stars && !lipsync_assassin && !vstheworld && !throwqueen && !superstars && readingCounter == false || currentCast.length == totalCastSize && (all_stars || lipsync_assassin || vstheworld || throwqueen || team) && readingCounter == false || superstars && superstarsEpisode == 1 && readingCounter == false) {
            description.innerHTML = "The library is open! In today's mini-challenge, the queens will read each other to filth!";
            readingCounter = true;
            twoPossible = false;
            miniChallenges.push("Reading Challenge");
        }
        else if (currentCast.length == totalCastSize && !s12Premiere && !porkchopPremiere && !porkelimPremiere && !triplePremiere && !s9Premiere && !pageantPremiere && !extraPremiere && photoshootCounter == false && superstars == false || splitpremiere == true && (s14Premiere || s6Premiere) && superstars == false || superstars == true && totalCastSize % 2 == 0 && superstarsEpisode == totalCastSize + 3 && photoshootCounter == false || superstars == true && totalCastSize % 2 == 1 && superstarsEpisode == totalCastSize + 4 && photoshootCounter == false) {
            description.innerHTML = "In today's mini-challenge, the queens will do a freaky photoshoot in a " + desc3[randomNumber(0, 12)];
            photoshootCounter = true;
            miniChallenges.push("Photoshoot");
        }
        else if (totalCastSize != 5 && currentCast.length == 5 && top3 && puppetCounter == false && splitpremiere == false || currentCast.length < 8 && (savequeen || top4) && puppetCounter == false && splitpremiere == false || superstars && superstarsEpisode > totalCastSize / 2 && puppetCounter == false) {
            description.innerHTML = "Bring in the puppets! The queens will parody each other using puppets!";
            puppetCounter = true;
            miniChallenges.push("Shady Puppets");
        }
        else if (triplePremiere && splitpremiere == true || (s9Premiere || pageantPremiere || extraPremiere) && currentCast.length == totalCastSize && vogueShow == false) {
            description.innerHTML = "In today's mini-challenge, the queens will have to show-off their voguing skills <br> as they serve face, fantasy, and extravaganza in front of different Drag Race Alumni.";
            vogueShow = true;
            miniChallenges.push("Vogue Show");
        }
        else if ((s12Premiere || porkchopPremiere || porkelimPremiere) && splitpremiere == true || currentCast.length > 12 && randomNumber(0, 100) > 70 && fashionWeek == false) {
            description.innerHTML = "In today's mini-challenge, the queens will strut their stuff in Drag Race Fashion Week <br> with a look for both " + desc4[randomNumber(0, 6)] + "-themed runway categories.";
            fashionWeek = true;
            miniChallenges.push("Drag Race Fashion Week");
        }
        else if (currentCast.length == 10 && randomNumber(0, 100) > 50 && dollDrags == false && splitpremiere == false || superstars && superstarsEpisode > 3 && dollDrags == false) {
            description.innerHTML = "In today's mini-challenge, the queens will create a sickening Drag Daughter using dolls and give them a hilarious story.";;
            dollDrags = true;
            miniChallenges.push("Doll Drag Daughters");
            twoPossible = true;
        }
        else if (currentCast.length == 8 && randomNumber(0, 100) > 50 && redCarpetCouture == false && splitpremiere == false || superstars && superstarsEpisode > totalCastSize / 2 && redCarpetCouture == false) {
            description.innerHTML = "In today's mini-challenge, the queens are tasked to create a red carpet showstopper using only " + desc5[randomNumber(0, 8)] + " for only 20 minutes!";;
            redCarpetCouture = true;
            miniChallenges.push("Red Carpet Showstoppers");
            twoPossible = true;
        }
        else if (currentCast.length > 8 && randomNumber(0, 100) > 60 && blindMakeupCounter == false && splitpremiere == false || superstars && superstarsEpisode < totalCastSize / 2 && blindMakeupCounter == false) {
            description.innerHTML = "The queens are tasked to do their own makeup in complete darkness!";
            blindMakeupCounter = true;
            miniChallenges.push("Makeup In The Dark");
            twoPossible = true;
        }
        else if (currentCast.length > 8 && randomNumber(0, 100) > 60 && fashionReview == false && splitpremiere == false || superstars && randomNumber(0, 10) == 1 && fashionReview == false) {
            description.innerHTML = "The queens are tasked to give fashion roasts against their sisters' previous looks!";
            fashionReview = true;
            miniChallenges.push("Fashion Photo Roast");
            twoPossible = true;
        }
        else if (currentCast.length < 8 && randomNumber(0, 100) > 50 && artworkSaboteur == false && splitpremiere == false || superstars && randomNumber(0, 10) == 2 && artworkSaboteur == false) {
            description.innerHTML = "The queens are tasked to paint and create an image of their inner saboteur and give a dragtastic explanation!";
            artworkSaboteur = true;
            miniChallenges.push("Artwork Creation");
        }
        else if (currentCast.length > 8 && randomNumber(0, 100) > 50 && photobombCounter == false && splitpremiere == false || superstars && randomNumber(0, 10) == 3 && photobombCounter == false) {
            description.innerHTML = "The queens are tasked to photobomb iconic celebrity images!";
            photobombCounter = true;
            miniChallenges.push("Funny Photobombers");
        }
        else if (currentCast.length > 10 && randomNumber(0, 100) > 50 && splitpremiere == false && guessingCounter == false || superstars && randomNumber(0, 10) == 4 && guessingCounter == false) {
            description.innerHTML = "The queens plays a guessing game about their remaining competitors!";
            guessingCounter = true;
            miniChallenges.push("Guess That Queen");
        }
        else if (currentCast.length > 10 && randomNumber(0, 100) > 50 && splitpremiere == false && craftqueenCounter == false || superstars && randomNumber(0, 10) == 5 && craftqueenCounter == false) {
            description.innerHTML = "The queens tests their inner craftsmanship by enhancing an assigned old and busted Drag Costume!";
            craftqueenCounter = true;
            miniChallenges.push("Clothing Overhaul");
            twoPossible = true;
        }
        else if (currentCast.length < 10 && randomNumber(0, 100) > 50 && splitpremiere == false && superlativesCounter == false || superstars && randomNumber(0, 10) == 6 && superlativesCounter == false) {
            description.innerHTML = "The queens plays a game of Drag Superlatives!";
            superlativesCounter = true;
            miniChallenges.push("Drag Superlatives");
            twoPossible = true;
        }
        else {
            description.innerHTML = "In today's mini-challenge, the queens will do " + desc1[randomNumber(0, 8)] + desc2[randomNumber(0, 6)];
            randomMini++;
            miniChallenges.push("Random Challenge #" + randomMini);
            twoPossible = true;
        }
    }
    rankPerformances() {
        let screen = new Scene();
        let queensList = currentCast;
        let winner = currentCast[randomNumber(0, currentCast.length - 1)];
        if (twoPossible == true && randomNumber(0, 100) > 65 && !team) {
            queensList.splice(queensList.indexOf(winner), 1);
            let winner2 = queensList[randomNumber(0, queensList.length - 1)];
            screen.createImage(winner.image, "royalblue");
            screen.createImage(winner2.image, "royalblue");
            screen.createBold(winner.getName() + ", " + winner2.getName() + ", you are the winners of this week's mini-challenge!");
            miniChallenges.push(winner.getName() + " & " + winner2.getName());
            winner.coinz += 2.5;
            winner2.coinz += 2.5;
            if (superstars) {
                winner.coinz += 2.5;
                winner2.coinz += 2.5;
            }
            queensList.push(winner);
            twoPossible = false;
        }
        else {
            screen.createImage(winner.image, "royalblue");
            screen.createBold(`${winner.getName()} won the mini-challenge!`);
            miniChallenges.push(winner.getName());
            twoPossible = false;
            winner.coinz += 2.5;
            if (superstars)
                winner.coinz += 2.5;
            if (team) {
                winner.QueenA.coinz += 2.5;
                winner.QueenB.coinz += 2.5;
            }
        }
    }
}
function returnImg() {
    let images = document.getElementById("images");
    //let img = document.getElementById("image" + i.toString());
    let select = document.getElementById("queenList");
    images.src = select.options[select.selectedIndex].value;
}
//challenge modifiers:
let actingChallengeCounter = 0;
let comedyChallengeCounter = 0;
let liveChallengeCounter = 0;
let danceChallengeCounter = 0;
let groupsChallengeCounter = 0;
let designChallengeCounter = 0;
let improvChallengeCounter = 0;
let rolloverTip = 0;
let randomMini = 0;
var isDesignChallenge = false;
let photoshootCounter = false;
let blindMakeupCounter = false;
let photobombCounter = false;
let readingCounter = false;
let puppetCounter = false;
let fashionWeek = false;
let fashionReview = false;
let dollDrags = false;
let artworkSaboteur = false;
let guessingCounter = false;
let craftqueenCounter = false;
let superlativesCounter = false;
let redCarpetCouture = false;
let vogueShow = false;
let rucreateCounter = false;
let rusicalCounter = false;
let talentshowCounter = false;
let decorCounter = false;
let pageantCounter = false;
let ballCounter = false;
let makeoverCounter = false;
let snatchCounter = false;
let ticketSave = false;
let top5Choc = false;
let selectOutcome = false;
let ruvenge = false;
let ruvengeEpisode = false;
let ruvengeUntucked = false;
let splitpremiere = false;
let top2Episode = false;
let halfWayEpisode = false;
let survivalEpisode = false;
let chocEntrance = false;
let smackCharts = false;
let twoPossible = false;
let elimLipsync = false;
let basicLipsync = false;
let shantayLipsync = false;
let sashayLipsync = false;
let disqLipsync = false;
let surviveHalf = false;
let surviveOne = false;
let showgirlShowdown = false;
let final5Episode = false;
let showdownFinale = false;
let dragParty = false;
let selectChallenge = false;
let withdrawOut = false;
let injury = false;
let queenquits = false;
let disqualify = false;
let runwayPortion = false;
let qnaPortion = false;
let splitAssign = false;
let coupleArc = false;
let doneUntucked = false;
let actingChosen = false;
let comedyChosen = false;
let liveChosen = false;
let danceChosen = false;
let groupsChosen = false;
let designChosen = false;
let improvChosen = false;
let rucreateChosen = false;
let decorChosen = false;
let makeoverChosen = false;
let lastChallenge = '';
let untuckedQueens = [];
let dragPresidentOne = [];
let dragPresidentTwo = [];
let PartyOneMembers = [];
let PartyTwoMembers = [];
let villainQueen = [];
let heroQueen = [];
let delusionalQueen = [];
let annoyingQueen = [];
let shadyQueen = [];
let clique = [];
let underdog = [];
let saboteurQueen = [];
let narrator = [];
let fanfaveQueen = [];
let bustedQueen = [];
let coupleQueens = [];
function miniChallenge() {
  if (goldticket && currentCast.length == totalCastSize && ruvenge == false && ticketSave == false && !doubleShantay && chocEntrance == false && !s9Premiere && !pageantPremiere && !extraPremiere && !splitCastPremiere || goldticket && s6Premiere && episodeCount == 3 && ticketSave == false && !doubleShantay && chocEntrance == false || goldticket && s9Premiere && episodeCount == 2 && chocEntrance == false || goldticket && extraPremiere && episodeCount == 2 && chocEntrance == false || goldticket && pageantPremiere && episodeCount == 2 && chocEntrance == false || goldticket && splitCastPremiere && splitCastDuration == false && currentCast.length == totalCastSize && chocEntrance == false) {
    let miniChallengeScreen = new Scene();
    miniChallengeScreen.clean();
    miniChallengeScreen.createHeader("Mini-challenge!");
    miniChallengeScreen.createParagraph("A bunch of chocolate bars enters the werkroom but only one bar is golden that can save their padded ass!")
    let screen = new Scene();
    let challenge = new MiniChallenge();
    chocEntrance = true;
    if (randomChoc == false) {
    screen.createBold("Select which queen will receive the Golden Chocolate Bar.");
    let main = document.querySelector("div#MainBlock");
    let castSelection = document.createElement("p");
    castSelection.setAttribute("id", "castSelection");
    castSelection.innerHTML = '';
    let select = document.createElement("select");
    select.setAttribute("id", "queenList");
    select.setAttribute("onchange", "returnImg()");
    let img = document.createElement("img");
    img.setAttribute("id", "images");
    img.setAttribute("style", "width: 105px; height: 105px;");
    let p = document.createElement("p");
    p.appendChild(img);
    for (let k = 0; k < currentCast.length; k++) {
        let option = document.createElement("option");
        option.innerHTML = currentCast[k].getName();
        option.value = currentCast[k].image;
        select.add(option);
    }
    select.selectedIndex = randomNumber(0, currentCast.length - 1);
    let br = document.createElement("br");
    castSelection.appendChild(p);
    castSelection.appendChild(select);
    castSelection.appendChild(br);
    main.appendChild(castSelection);
    returnImg();
    screen.createButton("Choose Queen", "goldenQueen()", "ticketQueen");
    }
    else if (randomChoc == true) {
    let chocTicket = currentCast[randomNumber(0, currentCast.length - 1)];
    for (let i = 0; i < currentCast.length; i++) {
      screen.createImage(currentCast[i].image, "gold");
    }
    goldenTicket.push(chocTicket);
    screen.createBold("Who among these queens has the golden ticket?");
    if (selectChallenge == true && !s9Premiere && !pageantPremiere && !extraPremiere || (s9Premiere || pageantPremiere || extraPremiere) && selectChallenge == true && episodeCount > 1) {
    challengesList();
    }
    else {
    //deal with maxi chalenges:
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    //remove from possible challenges list:
    if (actingChallengeCounter == 4)
        challenges.splice(challenges.indexOf("actingChallenge()"), 1);
    if (comedyChallengeCounter == 4)
        challenges.splice(challenges.indexOf("comedyChallenge()"), 1);
    if (liveChallengeCounter == 2)
        challenges.splice(challenges.indexOf("liveChallenge()"), 1);
    if (danceChallengeCounter == 2)
        challenges.splice(challenges.indexOf("danceChallenge()"), 1);
    if (groupsChallengeCounter == 1)
        challenges.splice(challenges.indexOf("groupsChallenge()"), 1);
    if (designChallengeCounter == 2)
        challenges.splice(challenges.indexOf("designChallenge()"), 1);
    if (improvChallengeCounter == 4)
        challenges.splice(challenges.indexOf("improvChallenge()"), 1);
    createChallenge(challenges, miniChallengeScreen);
    }
    }
  }
  else if ((twinstwist || comedyRuvenge || groupsRuvenge) && currentCast.length == totalCastSize && totalCastSize % 2 == 0 && ruvenge == true || (twinstwist || comedyRuvenge || groupsRuvenge) && currentCast.length == totalCastSize - 1 && totalCastSize % 2 == 1 && ruvenge == true) {
    let miniChallengeScreen = new Scene();
    miniChallengeScreen.clean();
    miniChallengeScreen.createHeader("Time for a Ruvenge!");
    miniChallengeScreen.createParagraph("The eliminated queens are back to take over a remaining queen's spot!");
    let screen = new Scene();
    let challenge = new MiniChallenge();
    for (let i = 0; i < ruvengeQueens.length; i++) {
      screen.createImage(ruvengeQueens[i].image, "crimson");
    }
    ruvengeEpisode = true;
    screen.createBold("Let the ruvenge commence!");
    //deal with maxi chalenges:
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    //remove from possible challenges list:
    if (actingChallengeCounter == 4)
        challenges.splice(challenges.indexOf("actingChallenge()"), 1);
    if (comedyChallengeCounter == 4)
        challenges.splice(challenges.indexOf("comedyChallenge()"), 1);
    if (liveChallengeCounter == 2)
        challenges.splice(challenges.indexOf("liveChallenge()"), 1);
    if (danceChallengeCounter == 2)
        challenges.splice(challenges.indexOf("danceChallenge()"), 1);
    if (groupsChallengeCounter == 1)
        challenges.splice(challenges.indexOf("groupsChallenge()"), 1);
    if (designChallengeCounter == 2)
        challenges.splice(challenges.indexOf("designChallenge()"), 1);
    if (improvChallengeCounter == 4)
        challenges.splice(challenges.indexOf("improvChallenge()"), 1);
    createChallenge(challenges, miniChallengeScreen);
  }
  else if (dragParty == true && splitpremiere == true && s12Premiere && (top4 || savequeen || top3)) {
    let miniChallengeScreen = new Scene();
    miniChallengeScreen.clean();
    miniChallengeScreen.createHeader("Mini-challenge!");
    miniChallengeScreen.createParagraph("To win the title of Next Drag Superstar, the queens need to hone their Charisma, Uniqueness, Nerve, & Talent. <br> But for now, they need to change Charisma into Compassion as they vote who shall be their Drag Party President for a sickening twist!");
    if (episodeCount == 1) {
        dragPresidentOne.push(currentCast[randomNumber(0, currentCast.length - 1)]);
        miniChallengeScreen.createImage(dragPresidentOne[0].image, "#82cdf5");
        miniChallengeScreen.createBold(dragPresidentOne[0].getName() + ", condragulations! You are the newly appointed Drag President of the Tucking Party!");
        PartyOneMembers = [...queensPartyOne];
        PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
    }
    else if (episodeCount == 2) {
        dragPresidentTwo.push(currentCast[randomNumber(0, currentCast.length - 1)]);
        miniChallengeScreen.createImage(dragPresidentTwo[0].image, "#ff91f4");
        miniChallengeScreen.createBold(dragPresidentTwo[0].getName() + ", condragulations! You are the newly appointed Drag President of the Party Hoes!");
        PartyTwoMembers = [...queensPartyTwo];
        PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
    }
    if (selectChallenge == true && !s9Premiere && !pageantPremiere && !extraPremiere || (s9Premiere || pageantPremiere || extraPremiere) && selectChallenge == true && episodeCount > 1) {
    challengesList();
    }
    else {
    //deal with maxi chalenges:
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    //remove from possible challenges list:
    if (actingChallengeCounter == 4)
        challenges.splice(challenges.indexOf("actingChallenge()"), 1);
    if (comedyChallengeCounter == 4)
        challenges.splice(challenges.indexOf("comedyChallenge()"), 1);
    if (liveChallengeCounter == 2)
        challenges.splice(challenges.indexOf("liveChallenge()"), 1);
    if (danceChallengeCounter == 2)
        challenges.splice(challenges.indexOf("danceChallenge()"), 1);
    if (groupsChallengeCounter == 1)
        challenges.splice(challenges.indexOf("groupsChallenge()"), 1);
    if (designChallengeCounter == 2)
        challenges.splice(challenges.indexOf("designChallenge()"), 1);
    if (improvChallengeCounter == 4)
        challenges.splice(challenges.indexOf("improvChallenge()"), 1);
    createChallenge(challenges, miniChallengeScreen);
    }
  }
  else {
    let miniChallengeScreen = new Scene();
    miniChallengeScreen.clean();
    miniChallengeScreen.createHeader("Mini-challenge!");
    miniChallengeScreen.createParagraph("", "Description");
    let challenge = new MiniChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    if (selectChallenge == true && !s9Premiere && !pageantPremiere && !extraPremiere || (s9Premiere || pageantPremiere || extraPremiere) && selectChallenge == true && episodeCount > 1) {
    challengesList();
    }
    else {
    //deal with maxi chalenges:
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    //remove from possible challenges list:
    if (actingChallengeCounter == 4)
        challenges.splice(challenges.indexOf("actingChallenge()"), 1);
    if (comedyChallengeCounter == 4)
        challenges.splice(challenges.indexOf("comedyChallenge()"), 1);
    if (liveChallengeCounter == 2)
        challenges.splice(challenges.indexOf("liveChallenge()"), 1);
    if (danceChallengeCounter == 2)
        challenges.splice(challenges.indexOf("danceChallenge()"), 1);
    if (groupsChallengeCounter == 1)
        challenges.splice(challenges.indexOf("groupsChallenge()"), 1);
    if (designChallengeCounter == 2)
        challenges.splice(challenges.indexOf("designChallenge()"), 1);
    if (improvChallengeCounter == 4)
        challenges.splice(challenges.indexOf("improvChallenge()"), 1);
    createChallenge(challenges, miniChallengeScreen);
    }
  }
}
function goldenQueen() {
    let screen = new Scene();
    let select = document.getElementById("queenList");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("ticketQueen");
    let queen;
    for (let k = 0; k < currentCast.length; k++) {
        if (value == currentCast[k].getName()) {
            queen = currentCast[k];
        }
    }
    button.remove();
    select.remove();
    screen.createBold(queen.getName() + " was given the Golden Bar!");
    goldenTicket.push(queen);
    if (selectChallenge == true && !s9Premiere && !pageantPremiere && !extraPremiere || (s9Premiere || pageantPremiere || extraPremiere) && selectChallenge == true && episodeCount > 1) {
    challengesList();
    }
    else {
    //deal with maxi chalenges:
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    //remove from possible challenges list:
    if (actingChallengeCounter == 4)
        challenges.splice(challenges.indexOf("actingChallenge()"), 1);
    if (comedyChallengeCounter == 4)
        challenges.splice(challenges.indexOf("comedyChallenge()"), 1);
    if (liveChallengeCounter == 2)
        challenges.splice(challenges.indexOf("liveChallenge()"), 1);
    if (danceChallengeCounter == 2)
        challenges.splice(challenges.indexOf("danceChallenge()"), 1);
    if (groupsChallengeCounter == 1)
        challenges.splice(challenges.indexOf("groupsChallenge()"), 1);
    if (designChallengeCounter == 2)
        challenges.splice(challenges.indexOf("designChallenge()"), 1);
    if (improvChallengeCounter == 4)
        challenges.splice(challenges.indexOf("improvChallenge()"), 1);
        createChallenge(challenges, screen);
    }
}
function challengesList() {
    let miniChallengeScreen = new Scene();
    miniChallengeScreen.createHorizontalLine();
    miniChallengeScreen.createBigText("Choose Your Challenge");
    if (currentCast.length > 5 && splitpremiere == false && splitCastDuration == false && top3 || currentCast.length > 5 && splitpremiere == false && splitCastDuration == false && top4 || currentCast.length > 5 && splitpremiere == false && splitCastDuration == false && savequeen) {
    miniChallengeScreen.createButton("Acting", "actingChoice()", "button1");
    miniChallengeScreen.createButton("Comedy", "comedyChoice()", "button2");
    miniChallengeScreen.createButton("Live", "liveChoice()", "button3");
    miniChallengeScreen.createButton("Dance", "danceChoice()", "button4");
    miniChallengeScreen.createButton("Girl Groups", "groupsChoice()", "button5");
    miniChallengeScreen.createButton("Design", "designChoice()", "button6");
    miniChallengeScreen.createButton("Improv", "improvChoice()", "button7");
    miniChallengeScreen.createParagraph(" ");
    miniChallengeScreen.createButton("Talent Show", "talentshow()", "button8");
    miniChallengeScreen.createButton("Snatch Game", "snatchGame()", "button9");
    miniChallengeScreen.createButton("Rusical", "rusical()", "button10");
    miniChallengeScreen.createButton("Creation", "rucreateChoice()", "button11");
    miniChallengeScreen.createButton("Decor", "decorChoice()", "button12");
    miniChallengeScreen.createButton("Makeover", "makeoverChoice()", "button13");
    miniChallengeScreen.createButton("Ball", "ball()", "button14");
    miniChallengeScreen.createButton("Rumix", "rumix()", "button15");
    miniChallengeScreen.createButton("Pageant", "pageant()", "button16");
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    miniChallengeScreen.createParagraph(" ");
    miniChallengeScreen.createButton("LipSync Olympics", "lipsyncOlympics()", "button17");
    }
    miniChallengeScreen.createParagraph(" ");
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    randomChallenge(challenges, miniChallengeScreen);
    miniChallengeScreen.createParagraph(" ");
    }
    else {
    miniChallengeScreen.createButton("Acting", "actingChallenge()", "button1");
    miniChallengeScreen.createButton("Comedy", "comedyChallenge()", "button2");
    miniChallengeScreen.createButton("Live", "liveChallenge()", "button3");
    miniChallengeScreen.createButton("Dance", "danceChallenge()", "button4");
    miniChallengeScreen.createButton("Girl Groups", "groupsChallenge()", "button5");
    miniChallengeScreen.createButton("Design", "designChallenge()", "button6");
    miniChallengeScreen.createButton("Improv", "improvChallenge()", "button7");
    miniChallengeScreen.createParagraph(" ");
    miniChallengeScreen.createButton("Talent Show", "talentshow()", "button8");
    miniChallengeScreen.createButton("Snatch Game", "snatchGame()", "button9");
    miniChallengeScreen.createButton("Rusical", "rusical()", "button10");
    miniChallengeScreen.createButton("Creation", "rucreate()", "button11");
    miniChallengeScreen.createButton("Decor", "decor()", "button12");
    miniChallengeScreen.createButton("Makeover", "makeover()", "button13");
    miniChallengeScreen.createButton("Ball", "ball()", "button14");
    miniChallengeScreen.createButton("Rumix", "rumix()", "button15");
    miniChallengeScreen.createButton("Pageant", "pageant()", "button16");
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    miniChallengeScreen.createParagraph(" ");
    miniChallengeScreen.createButton("LipSync Olympics", "lipsyncOlympics()", "button17");
    }
    miniChallengeScreen.createParagraph(" ");
    let challenges = ["actingChallenge()", "comedyChallenge()", "liveChallenge()", "danceChallenge()", "groupsChallenge()", "designChallenge()", "improvChallenge()"];
    randomChallenge(challenges, miniChallengeScreen);
    miniChallengeScreen.createParagraph(" ");
    }
}
function actingChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "actingChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    actingChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    actingChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    actingChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    actingChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    actingChosen = true;
    }
    screen.createParagraph(" ");
}
function comedyChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "comedyChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    comedyChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    comedyChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    comedyChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    comedyChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    comedyChosen = true;
    }
    screen.createParagraph(" ");
}
function liveChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "liveChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    liveChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    liveChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    liveChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    liveChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    liveChosen = true;
    }
    screen.createParagraph(" ");
}
function danceChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "danceChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    danceChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    danceChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    danceChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    danceChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    danceChosen = true;
    }
    screen.createParagraph(" ");
}
function groupsChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "groupsChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    groupsChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    groupsChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    groupsChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    groupsChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    groupsChosen = true;
    }
    screen.createParagraph(" ");
}
function designChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "designChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    designChosen = true;
    }
    screen.createParagraph(" ");
}
function improvChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "improvChallenge()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    improvChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    improvChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    improvChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    improvChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    improvChosen = true;
    }
    screen.createParagraph(" ");
}
function rucreateChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "rucreate()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    rucreateChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    rucreateChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    rucreateChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    rucreateChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    rucreateChosen = true;
    }
    screen.createParagraph(" ");
}
function decorChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "decor()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    decorChosen = true;
    }
    if (currentCast.length > 5) {
    screen.createButton("Groups (2 Teams)", "twoGroups()");
    decorChosen = true;
    }
    if (currentCast.length > 7) {
    screen.createButton("Groups (3 Teams)", "threeGroups()");
    decorChosen = true;
    }
    if (currentCast.length > 9) {
    screen.createButton("Groups (4 Teams)", "fourGroups()");
    decorChosen = true;
    }
    if (currentCast.length > 12) {
    screen.createButton("Groups (5 Teams)", "fiveGroups()");
    decorChosen = true;
    }
    screen.createParagraph(" ");
}
function makeoverChoice() {
    let screen = new Scene();
    let button1 = document.getElementById("button1");
    let button2 = document.getElementById("button2");
    let button3 = document.getElementById("button3");
    let button4 = document.getElementById("button4");
    let button5 = document.getElementById("button5");
    let button6 = document.getElementById("button6");
    let button7 = document.getElementById("button7");
    let button8 = document.getElementById("button8");
    let button9 = document.getElementById("button9");
    let button10 = document.getElementById("button10");
    let button11 = document.getElementById("button11");
    let button12 = document.getElementById("button12");
    let button13 = document.getElementById("button13");
    let button14 = document.getElementById("button14");
    let button15 = document.getElementById("button15");
    let button16 = document.getElementById("button16");
    let button17 = document.getElementById("button17");
    let button18 = document.getElementById("button18");
    button1.remove();
    button2.remove();
    button3.remove();
    button4.remove();
    button5.remove();
    button6.remove();
    button7.remove();
    button8.remove();
    button9.remove();
    button10.remove();
    button11.remove();
    button12.remove();
    button13.remove();
    button14.remove();
    button15.remove();
    button16.remove();
    if (splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && (top3 || top4 || savequeen)) {
    button17.remove();
    }
    button18.remove();
    screen.createBold("Judged Based On:");
    screen.createButton("Individual Performance", "makeover()");
    if (currentCast.length > 5) {
    screen.createButton("By Pairs", "pairing()");
    makeoverChosen = true;
    }
    screen.createParagraph(" ");
}
let noneIndividual = false;
let pairings = false;
let twoTeams = false;
let threeTeams = false;
let fourTeams = false;
let fiveTeams = false;
let threeSome = [];
let castHolder = [];
let TeamOne = [];
let TeamTwo = [];
let TeamThree = [];
let TeamFour = [];
let TeamFive = [];
let weekWinner = [];
function pairing() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Pairings");
    screen.createBold("The Queens Will Be Judged As Pairs For This Challenge.");
    noneIndividual = true;
    pairings = true;
    for (let i = 0; i < currentCast.length; i++) {
        castHolder.push(currentCast[i]);
    }
    shuffle(currentCast);
    let pairList = [];
    let poolA = [];
    let poolB = [];
    poolA = currentCast.splice(0, Math.floor(currentCast.length / 2));
    poolB = [...currentCast];
    let pairAmount = 0;
    pairAmount += poolA.length;
    for (let i = 0; i < pairAmount; i++) {
    if (poolB.length > 0) {
        let QueenA = poolA[0];
        let QueenB = poolB[0];
        poolA.splice(0, 1)
        poolB.splice(0, 1);
        if (poolA.length > 0 || poolA.length == 0 && poolB.length == 0) {
            let pair = new Pair(QueenA, QueenB);
            pairList.push(pair);
        }
        else if (poolA.length == 0 && poolB.length == 1) {
            let QueenC = poolB[0];
            poolB.splice(0, 1);
            let pair = new Threesome(QueenA, QueenB, QueenC);
            pairList.push(pair);
            threeSome.push(pair);
        }
    }
    }
    currentCast = [];
    currentCast = [...pairList];
    for (let i = 0; i < pairList.length; i++) {
        if (pairList[i] !== threeSome[0]) {
        screen.createImage(pairList[i].QueenA.image, "lime");
        screen.createImage(pairList[i].QueenB.image, "lime");
        screen.createBold(pairList[i].QueenA.getName() + " and " + pairList[i].QueenB.getName() + " paired up.");
        }
    }
    if (threeSome.length == 1) {
        screen.createImage(threeSome[0].QueenA.image, "lime");
        screen.createImage(threeSome[0].QueenB.image, "lime");
        screen.createImage(threeSome[0].QueenC.image, "lime");
        screen.createBold(threeSome[0].QueenA.getName() + ", " + threeSome[0].QueenB.getName() + ", and " + threeSome[0].QueenC.getName() + " paired up.");
    }
    if (actingChosen == true) {
    screen.createButton("Proceed", "actingChallenge()");
    actingChosen = false;
    }
    else if (comedyChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    comedyChosen = false;
    }
    else if (liveChosen == true) {
    screen.createButton("Proceed", "liveChallenge()");
    liveChosen = false;
    }
    else if (danceChosen == true) {
    screen.createButton("Proceed", "danceChallenge()");
    danceChosen = false;
    }
    else if (groupsChosen == true) {
    screen.createButton("Proceed", "groupsChallenge()");
    groupsChosen = false;
    }
    else if (designChosen == true) {
    screen.createButton("Proceed", "designChallenge()");
    designChosen = false;
    }
    else if (improvChosen == true) {
    screen.createButton("Proceed", "improvChallenge()");
    improvChosen = false;
    }
    else if (rucreateChosen == true) {
    screen.createButton("Proceed", "rucreate()");
    rucreateChosen = false;
    }
    else if (decorChosen == true) {
    screen.createButton("Proceed", "decor()");
    decorChosen = false;
    }
    else if (makeoverChosen == true) {
    screen.createButton("Proceed", "makeover()");
    makeoverChosen = false;
    }
}
function twoGroups() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Groupings");
    screen.createBold("The Queens Will Be Judged As A Group For This Week's Challenge.");
    noneIndividual = true;
    twoTeams = true;
    for (let i = 0; i < currentCast.length; i++) {
        castHolder.push(currentCast[i]);
    }
    shuffle(currentCast);
    let teamAmount = 0;
    if (currentCast.length % 2 == 0)
    teamAmount += currentCast.length / 2;
    else if (currentCast.length % 2 !== 0)
    teamAmount += (currentCast.length + 1) / 2;
    for (let i = 0; i < teamAmount; i++)
    TeamOne.push(currentCast[i]);
    for (let i = teamAmount; i < currentCast.length; i++)
    TeamTwo.push(currentCast[i]);
    screen.createHorizontalLine();
    screen.createBigText("Team 1");
    for (let i = 0; i < TeamOne.length; i++)
    screen.createImage(TeamOne[i].image, "#9400D3");
    screen.createBold("", "teamonequeens");
    let teamonequeens = document.getElementById("teamonequeens");
    for (let i = 0; i < TeamOne.length; i++)
    teamonequeens.innerHTML += `${TeamOne[i].getName()}, `;
    teamonequeens.innerHTML += "will be the first team.";
    screen.createBigText("Team 2");
    for (let i = 0; i < TeamTwo.length; i++)
    screen.createImage(TeamTwo[i].image, "#c30028");
    screen.createBold("", "teamtwoqueens");
    let teamtwoqueens = document.getElementById("teamtwoqueens");
    for (let i = 0; i < TeamTwo.length; i++)
    teamtwoqueens.innerHTML += `${TeamTwo[i].getName()}, `;
    teamtwoqueens.innerHTML += "will be the second team.";
    if (actingChosen == true) {
    screen.createButton("Proceed", "actingChallenge()");
    actingChosen = false;
    }
    else if (comedyChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    comedyChosen = false;
    }
    else if (liveChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    liveChosen = false;
    }
    else if (danceChosen == true) {
    screen.createButton("Proceed", "danceChallenge()");
    danceChosen = false;
    }
    else if (groupsChosen == true) {
    screen.createButton("Proceed", "groupsChallenge()");
    groupsChosen = false;
    }
    else if (designChosen == true) {
    screen.createButton("Proceed", "designChallenge()");
    designChosen = false;
    }
    else if (improvChosen == true) {
    screen.createButton("Proceed", "improvChallenge()");
    improvChosen = false;
    }
    else if (rucreateChosen == true) {
    screen.createButton("Proceed", "rucreate()");
    rucreateChosen = false;
    }
    else if (decorChosen == true) {
    screen.createButton("Proceed", "decor()");
    decorChosen = false;
    }
    else if (makeoverChosen == true) {
    screen.createButton("Proceed", "makeover()");
    makeoverChosen = false;
    }
}
function threeGroups() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Groupings");
    screen.createBold("The Queens Will Be Judged As A Group For This Week's Challenge.");
    noneIndividual = true;
    threeTeams = true;
    for (let i = 0; i < currentCast.length; i++) {
        castHolder.push(currentCast[i]);
    }
    shuffle(currentCast);
    let teamPool = [];
    for (let i = 0; i < currentCast.length; i++)
    teamPool.push(currentCast[i]);
    shuffle(teamPool);
    TeamThree = teamPool.splice(0, Math.floor(teamPool.length / 3));
    TeamTwo = teamPool.splice(0, Math.floor(teamPool.length / 2));
    TeamOne = [...teamPool];
    screen.createHorizontalLine();
    screen.createBigText("Team 1");
    for (let i = 0; i < TeamOne.length; i++)
    screen.createImage(TeamOne[i].image, "#9400D3");
    screen.createBold("", "teamonequeens");
    let teamonequeens = document.getElementById("teamonequeens");
    for (let i = 0; i < TeamOne.length; i++)
    teamonequeens.innerHTML += `${TeamOne[i].getName()}, `;
    teamonequeens.innerHTML += "will be the first team.";
    screen.createBigText("Team 2");
    for (let i = 0; i < TeamTwo.length; i++)
    screen.createImage(TeamTwo[i].image, "#c30028");
    screen.createBold("", "teamtwoqueens");
    let teamtwoqueens = document.getElementById("teamtwoqueens");
    for (let i = 0; i < TeamTwo.length; i++)
    teamtwoqueens.innerHTML += `${TeamTwo[i].getName()}, `;
    teamtwoqueens.innerHTML += "will be the second team.";
    screen.createBigText("Team 3");
    for (let i = 0; i < TeamThree.length; i++)
    screen.createImage(TeamThree[i].image, "#73502d");
    screen.createBold("", "teamthreequeens");
    let teamthreequeens = document.getElementById("teamthreequeens");
    for (let i = 0; i < TeamThree.length; i++)
    teamthreequeens.innerHTML += `${TeamThree[i].getName()}, `;
    teamthreequeens.innerHTML += "will be the third team.";
    if (actingChosen == true) {
    screen.createButton("Proceed", "actingChallenge()");
    actingChosen = false;
    }
    else if (comedyChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    comedyChosen = false;
    }
    else if (liveChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    liveChosen = false;
    }
    else if (danceChosen == true) {
    screen.createButton("Proceed", "danceChallenge()");
    danceChosen = false;
    }
    else if (groupsChosen == true) {
    screen.createButton("Proceed", "groupsChallenge()");
    groupsChosen = false;
    }
    else if (designChosen == true) {
    screen.createButton("Proceed", "designChallenge()");
    designChosen = false;
    }
    else if (improvChosen == true) {
    screen.createButton("Proceed", "improvChallenge()");
    improvChosen = false;
    }
    else if (rucreateChosen == true) {
    screen.createButton("Proceed", "rucreate()");
    rucreateChosen = false;
    }
    else if (decorChosen == true) {
    screen.createButton("Proceed", "decor()");
    decorChosen = false;
    }
    else if (makeoverChosen == true) {
    screen.createButton("Proceed", "makeover()");
    makeoverChosen = false;
    }
}
function fourGroups() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Groupings");
    screen.createBold("The Queens Will Be Judged As A Group For This Week's Challenge.");
    noneIndividual = true;
    fourTeams = true;
    for (let i = 0; i < currentCast.length; i++) {
        castHolder.push(currentCast[i]);
    }
    shuffle(currentCast);
    let teamPool = [];
    for (let i = 0; i < currentCast.length; i++)
    teamPool.push(currentCast[i]);
    shuffle(teamPool);
    TeamFour = teamPool.splice(0, Math.floor(teamPool.length / 4));
    TeamThree = teamPool.splice(0, Math.floor(teamPool.length / 3));
    TeamTwo = teamPool.splice(0, Math.floor(teamPool.length / 2));
    TeamOne = [...teamPool];
    screen.createHorizontalLine();
    screen.createBigText("Team 1");
    for (let i = 0; i < TeamOne.length; i++)
    screen.createImage(TeamOne[i].image, "#9400D3");
    screen.createBold("", "teamonequeens");
    let teamonequeens = document.getElementById("teamonequeens");
    for (let i = 0; i < TeamOne.length; i++)
    teamonequeens.innerHTML += `${TeamOne[i].getName()}, `;
    teamonequeens.innerHTML += "will be the first team.";
    screen.createBigText("Team 2");
    for (let i = 0; i < TeamTwo.length; i++)
    screen.createImage(TeamTwo[i].image, "#c30028");
    screen.createBold("", "teamtwoqueens");
    let teamtwoqueens = document.getElementById("teamtwoqueens");
    for (let i = 0; i < TeamTwo.length; i++)
    teamtwoqueens.innerHTML += `${TeamTwo[i].getName()}, `;
    teamtwoqueens.innerHTML += "will be the second team.";
    screen.createBigText("Team 3");
    for (let i = 0; i < TeamThree.length; i++)
    screen.createImage(TeamThree[i].image, "#73502d");
    screen.createBold("", "teamthreequeens");
    let teamthreequeens = document.getElementById("teamthreequeens");
    for (let i = 0; i < TeamThree.length; i++)
    teamthreequeens.innerHTML += `${TeamThree[i].getName()}, `;
    teamthreequeens.innerHTML += "will be the third team.";
    screen.createBigText("Team 4");
    for (let i = 0; i < TeamFour.length; i++)
    screen.createImage(TeamFour[i].image, "#d558a0");
    screen.createBold("", "teamfourqueens");
    let teamfourqueens = document.getElementById("teamfourqueens");
    for (let i = 0; i < TeamFour.length; i++)
    teamfourqueens.innerHTML += `${TeamFour[i].getName()}, `;
    teamfourqueens.innerHTML += "will be the fourth team.";
    if (actingChosen == true) {
    screen.createButton("Proceed", "actingChallenge()");
    actingChosen = false;
    }
    else if (comedyChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    comedyChosen = false;
    }
    else if (liveChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    liveChosen = false;
    }
    else if (danceChosen == true) {
    screen.createButton("Proceed", "danceChallenge()");
    danceChosen = false;
    }
    else if (groupsChosen == true) {
    screen.createButton("Proceed", "groupsChallenge()");
    groupsChosen = false;
    }
    else if (designChosen == true) {
    screen.createButton("Proceed", "designChallenge()");
    designChosen = false;
    }
    else if (improvChosen == true) {
    screen.createButton("Proceed", "improvChallenge()");
    improvChosen = false;
    }
    else if (rucreateChosen == true) {
    screen.createButton("Proceed", "rucreate()");
    rucreateChosen = false;
    }
    else if (decorChosen == true) {
    screen.createButton("Proceed", "decor()");
    decorChosen = false;
    }
    else if (makeoverChosen == true) {
    screen.createButton("Proceed", "makeover()");
    makeoverChosen = false;
    }
}
function fiveGroups() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Groupings");
    screen.createBold("The Queens Will Be Judged As A Group For This Week's Challenge.");
    noneIndividual = true;
    fiveTeams = true;
    for (let i = 0; i < currentCast.length; i++) {
        castHolder.push(currentCast[i]);
    }
    shuffle(currentCast);
    let teamPool = [];
    for (let i = 0; i < currentCast.length; i++)
    teamPool.push(currentCast[i]);
    shuffle(teamPool);
    TeamFive = teamPool.splice(0, Math.floor(teamPool.length / 5));
    TeamFour = teamPool.splice(0, Math.floor(teamPool.length / 4));
    TeamThree = teamPool.splice(0, Math.floor(teamPool.length / 3));
    TeamTwo = teamPool.splice(0, Math.floor(teamPool.length / 2));
    TeamOne = [...teamPool];
    screen.createHorizontalLine();
    screen.createBigText("Team 1");
    for (let i = 0; i < TeamOne.length; i++)
    screen.createImage(TeamOne[i].image, "#9400D3");
    screen.createBold("", "teamonequeens");
    let teamonequeens = document.getElementById("teamonequeens");
    for (let i = 0; i < TeamOne.length; i++)
    teamonequeens.innerHTML += `${TeamOne[i].getName()}, `;
    teamonequeens.innerHTML += "will be the first team.";
    screen.createBigText("Team 2");
    for (let i = 0; i < TeamTwo.length; i++)
    screen.createImage(TeamTwo[i].image, "#c30028");
    screen.createBold("", "teamtwoqueens");
    let teamtwoqueens = document.getElementById("teamtwoqueens");
    for (let i = 0; i < TeamTwo.length; i++)
    teamtwoqueens.innerHTML += `${TeamTwo[i].getName()}, `;
    teamtwoqueens.innerHTML += "will be the second team.";
    screen.createBigText("Team 3");
    for (let i = 0; i < TeamThree.length; i++)
    screen.createImage(TeamThree[i].image, "#73502d");
    screen.createBold("", "teamthreequeens");
    let teamthreequeens = document.getElementById("teamthreequeens");
    for (let i = 0; i < TeamThree.length; i++)
    teamthreequeens.innerHTML += `${TeamThree[i].getName()}, `;
    teamthreequeens.innerHTML += "will be the third team.";
    screen.createBigText("Team 4");
    for (let i = 0; i < TeamFour.length; i++)
    screen.createImage(TeamFour[i].image, "#d558a0");
    screen.createBold("", "teamfourqueens");
    let teamfourqueens = document.getElementById("teamfourqueens");
    for (let i = 0; i < TeamFour.length; i++)
    teamfourqueens.innerHTML += `${TeamFour[i].getName()}, `;
    teamfourqueens.innerHTML += "will be the fourth team.";
    screen.createBigText("Team 5");
    for (let i = 0; i < TeamFive.length; i++)
    screen.createImage(TeamFive[i].image, "#FF5733");
    screen.createBold("", "teamfivequeens");
    let teamfivequeens = document.getElementById("teamfivequeens");
    for (let i = 0; i < TeamFive.length; i++)
    teamfivequeens.innerHTML += `${TeamFive[i].getName()}, `;
    teamfivequeens.innerHTML += "will be the fifth team.";
    if (actingChosen == true) {
    screen.createButton("Proceed", "actingChallenge()");
    actingChosen = false;
    }
    else if (comedyChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    comedyChosen = false;
    }
    else if (liveChosen == true) {
    screen.createButton("Proceed", "comedyChallenge()");
    liveChosen = false;
    }
    else if (danceChosen == true) {
    screen.createButton("Proceed", "danceChallenge()");
    danceChosen = false;
    }
    else if (groupsChosen == true) {
    screen.createButton("Proceed", "groupsChallenge()");
    groupsChosen = false;
    }
    else if (designChosen == true) {
    screen.createButton("Proceed", "designChallenge()");
    designChosen = false;
    }
    else if (improvChosen == true) {
    screen.createButton("Proceed", "improvChallenge()");
    improvChosen = false;
    }
    else if (rucreateChosen == true) {
    screen.createButton("Proceed", "rucreate()");
    rucreateChosen = false;
    }
    else if (decorChosen == true) {
    screen.createButton("Proceed", "decor()");
    decorChosen = false;
    }
    else if (makeoverChosen == true) {
    screen.createButton("Proceed", "makeover()");
    makeoverChosen = false;
    }
}
function groupsJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Judging");
    if (pairings == true) {
    if (currentCast.length > 8) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++)
        topQueens.push(currentCast[i]);
        for (let i = 3; i < 6; i++)
        safeQueens.push(currentCast[i]);
        for (let i = 6; i < currentCast.length; i++)
        bottomQueens.push(currentCast[i]);
    }
    else if (currentCast.length > 6) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++)
        topQueens.push(currentCast[i]);
        for (let i = 3; i < 5; i++)
        safeQueens.push(currentCast[i]);
        for (let i = 5; i < currentCast.length; i++)
        bottomQueens.push(currentCast[i]);
    }
    else if (currentCast.length == 6) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++)
        topQueens.push(currentCast[i]);
        for (let i = 3; i < currentCast.length; i++)
        bottomQueens.push(currentCast[i]);
    }
    else if (currentCast.length == 5) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 2; i++)
        topQueens.push(currentCast[i]);
        for (let i = 2; i < 3; i++)
        safeQueens.push(currentCast[i]);
        for (let i = 3; i < currentCast.length; i++)
        bottomQueens.push(currentCast[i]);
    }
    else if (currentCast.length == 4) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 2; i++)
        topQueens.push(currentCast[i]);
        for (let i = 2; i < currentCast.length; i++)
        bottomQueens.push(currentCast[i]);
    }
    else if (currentCast.length == 3) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 1; i++)
        topQueens.push(currentCast[i]);
        for (let i = 1; i < currentCast.length; i++)
        bottomQueens.push(currentCast[i]);
    }
    if (topQueens.length > 1) {
        screen.createBold("", "highQueens");
        let highQueens = document.getElementById("highQueens");
        highQueens.innerHTML += "When I call your name, please step forward. <br> ";
        for (let i = 0; i < topQueens.length; i++)
            highQueens.innerHTML += `${topQueens[i].getName()}, `;
        highQueens.innerHTML += "you all did amazing this week. <br> But a certain performance snatched this week's win.";
        shuffle(topQueens);
        screen.createImage(topQueens[0].QueenA.image, "royalblue");
        topQueens[0].QueenA.addToTrackRecord(" WIN");
        topQueens[0].QueenA.ppe += 5;
        topQueens[0].QueenA.coinz += 2.5;
        topQueens[0].QueenA.favoritism += 3.5;
        screen.createImage(topQueens[0].QueenB.image, "royalblue");
        topQueens[0].QueenB.addToTrackRecord(" WIN");
        topQueens[0].QueenB.ppe += 5;
        topQueens[0].QueenB.coinz += 2.5;
        topQueens[0].QueenB.favoritism += 3.5;
        if (topQueens[0] == threeSome[0]) {
            screen.createImage(topQueens[0].QueenC.image, "royalblue");
            topQueens[0].QueenC.addToTrackRecord(" WIN");
            topQueens[0].QueenC.ppe += 5;
            topQueens[0].QueenC.coinz += 2.5;
            topQueens[0].QueenC.favoritism += 3.5;
        }
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winners of this week's challenge!");
        for (let i = 1; i < topQueens.length; i++) {
            topQueens[i].QueenA.addToTrackRecord("HIGH");
            topQueens[i].QueenA.ppe += 4;
            topQueens[i].QueenA.favoritism += 1.5;
            topQueens[i].QueenB.addToTrackRecord("HIGH");
            topQueens[i].QueenB.ppe += 4;
            topQueens[i].QueenB.favoritism += 1.5;
            if (topQueens[i] == threeSome[0]) {
                topQueens[i].QueenC.addToTrackRecord("HIGH");
                topQueens[i].QueenC.ppe += 4;
                topQueens[i].QueenC.favoritism += 1.5;
            }
        }
        screen.createParagraph("You may now all untuck backstage.");
    }
    else if (topQueens.length == 1) {
        screen.createImage(topQueens[0].QueenA.image, "royalblue");
        topQueens[0].QueenA.addToTrackRecord(" WIN");
        topQueens[0].QueenA.ppe += 5;
        topQueens[0].QueenA.coinz += 2.5;
        topQueens[0].QueenA.favoritism += 3.5;
        screen.createImage(topQueens[0].QueenB.image, "royalblue");
        topQueens[0].QueenB.addToTrackRecord(" WIN");
        topQueens[0].QueenB.ppe += 5;
        topQueens[0].QueenB.coinz += 2.5;
        topQueens[0].QueenB.favoritism += 3.5;
        if (topQueens[0] == threeSome[0]) {
            screen.createImage(topQueens[0].QueenC.image, "royalblue");
            topQueens[0].QueenC.addToTrackRecord(" WIN");
            topQueens[0].QueenC.ppe += 5;
            topQueens[0].QueenC.coinz += 2.5;
            topQueens[0].QueenC.favoritism += 3.5;
        }
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winners of this week's challenge!");
        screen.createParagraph("You may now untuck backstage.");
    }
        screen.createHorizontalLine();
        screen.createParagraph("", "critiques");
        let critiques = document.getElementById("critiques");
        if (safeQueens.length > 0) {
        for (let i = 0; i < safeQueens.length; i++) {
            critiques.innerHTML += `${safeQueens[i].getName()}, `;
            safeQueens[i].QueenA.addToTrackRecord("SAFE");
            safeQueens[i].QueenA.ppe += 3;
            safeQueens[i].QueenB.addToTrackRecord("SAFE");
            safeQueens[i].QueenB.ppe += 3;
            if(safeQueens[i] == threeSome[0]) {
            safeQueens[i].QueenC.addToTrackRecord("SAFE");
            safeQueens[i].QueenC.ppe += 3;
            }
        }
        }
        for (let i = 0; i < bottomQueens.length; i++)
            critiques.innerHTML += `${bottomQueens[i].getName()}, `;
        critiques.innerHTML += "let us now hear the judges' critiques.";
    }
    else if (twoTeams == true) {
    let teamOneScore = 0;
    let teamTwoScore = 0;
    let teamOneFinalScore = 0;
    let teamTwoFinalScore = 0;
    let winningScore = 0;
    let loseTeam = [];
    screen.createBold("Based on your sickening performances this week, I have made some decisions...")
    for (let i = 0; i < TeamOne.length; i++)
    teamOneScore += TeamOne[i].performanceScore;
    for (let i = 0; i < TeamTwo.length; i++)
    teamTwoScore += TeamTwo[i].performanceScore;
    teamOneFinalScore += teamOneScore / TeamOne.length;
    teamTwoFinalScore += teamTwoScore / TeamTwo.length;
    if (teamOneFinalScore > teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        screen.createBold("Team Two, condragulations, you are the winning group this week!");
        winningScore += teamTwoFinalScore;
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
    }
    else if (teamOneFinalScore < teamTwoFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        screen.createBold("Team One, condragulations, you are the winning group this week!");
        winningScore += teamOneFinalScore;
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
    }
    else if (teamOneFinalScore == teamTwoFinalScore) {
        if (randomNumber(0, 99) < 50) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        screen.createBold("Team One, condragulations, you are the winning group this week!");
        winningScore += teamOneFinalScore;
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        else {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        screen.createBold("Team Two, condragulations, you are the winning group this week!");
        winningScore += teamTwoFinalScore;
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
    }
    if (topQueens.length < 5 && winningScore < 12 && randomNumber(0, 100) > 45) {
        screen.createBold("And not just that, you are all winners, baby! You may now untuck backstage.");
        for (let i = 0; i < topQueens.length; i++) {
        weekWinner.push(topQueens[i]);
        topQueens[i].addToTrackRecord(" WIN");
        topQueens[i].ppe += 5;
        topQueens[i].coinz += 2.5;
        topQueens[i].favoritism += 3;
        }
    }
    else {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you are the winner of this week's challenge! <br> You may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 1.5;
        }
    }
    screen.createHorizontalLine();
    if (loseTeam.length > 5) {
        loseTeam.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < loseTeam.length - 5; i++)
        safeQueens.push(loseTeam[i]);
        for (let i = loseTeam.length - 5; i < loseTeam.length; i++)
        bottomQueens.push(loseTeam[i]);
    }
    else if (loseTeam.length > 3) {
        loseTeam.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < loseTeam.length - 4; i++)
        safeQueens.push(loseTeam[i]);
        for (let i = loseTeam.length - 4; i < loseTeam.length; i++)
        bottomQueens.push(loseTeam[i]);
    }
    else if (loseTeam.length == 3) {
        for (let i = 0; i < loseTeam.length; i++)
        bottomQueens.push(loseTeam[i]);
    }
    screen.createParagraph("", "critiques");
    let critiques = document.getElementById("critiques");
    if (safeQueens.length > 0) {
    for (let i = 0; i < safeQueens.length; i++) {
            critiques.innerHTML += `${safeQueens[i].getName()}, `;
            safeQueens[i].addToTrackRecord("SAFE");
            safeQueens[i].ppe += 3;
    }
    }
    for (let i = 0; i < bottomQueens.length; i++)
    critiques.innerHTML += `${bottomQueens[i].getName()}, `;
    critiques.innerHTML += "let us now hear the judges' critiques.";
    }
    else if (threeTeams == true) {
    let teamOneScore = 0;
    let teamTwoScore = 0;
    let teamThreeScore = 0;
    let teamOneFinalScore = 0;
    let teamTwoFinalScore = 0;
    let teamThreeFinalScore = 0;
    let winningScore = 0;
    let safeTeam = [];
    let loseTeam = [];
    screen.createBold("Based on your sickening performances this week, I have made some decisions...")
    for (let i = 0; i < TeamOne.length; i++)
    teamOneScore += TeamOne[i].performanceScore;
    for (let i = 0; i < TeamTwo.length; i++)
    teamTwoScore += TeamTwo[i].performanceScore;
    for (let i = 0; i < TeamThree.length; i++)
    teamThreeScore += TeamThree[i].performanceScore;
    const tiebreaker = [0.01, 0.02, 0.03];
    const ABreaker = [];
    const BBreaker = [];
    const CBreaker = [];
    ABreaker.push(tiebreaker[randomNumber(0, 2)]);
    tiebreaker.splice(tiebreaker.indexOf(ABreaker[0]), 1);
    BBreaker.push(tiebreaker[randomNumber(0, 1)]);
    tiebreaker.splice(tiebreaker.indexOf(BBreaker[0]), 1);
    CBreaker.push(tiebreaker[0]);
    tiebreaker.splice(tiebreaker.indexOf(CBreaker[0]), 1);
    teamOneFinalScore += (teamOneScore / TeamOne.length) - ABreaker[0];
    teamTwoFinalScore += (teamTwoScore / TeamTwo.length) - BBreaker[0];
    teamThreeFinalScore += (teamThreeScore / TeamThree.length) - CBreaker[0];
    const points = [teamOneFinalScore, teamTwoFinalScore, teamThreeFinalScore];
    points.sort(function(a, b){return a - b});
    if (points[0] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        screen.createBold("Team Two, condragulations, you are the winning group this week!");
        winningScore += teamTwoFinalScore;
        if (TeamOne.length > 2 && TeamThree.length > 2) {
        if (points[1] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        }
        else if (TeamOne.length == 2 || TeamThree.length == 2) {
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
    }
    else if (points[0] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        screen.createBold("Team One, condragulations, you are the winning group this week!");
        winningScore += teamOneFinalScore;
        if (TeamTwo.length > 2 && TeamThree.length > 2) {
        if (points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        }
        else if (TeamTwo.length == 2 || TeamThree.length == 2) {
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
    }
    else if (points[0] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
        screen.createImage(TeamThree[i].image, "cyan");
        topQueens.push(TeamThree[i]);
        }
        screen.createBold("Team Three, condragulations, you are the winning group this week!");
        winningScore += teamThreeFinalScore;
        if (TeamTwo.length > 2 && TeamOne.length > 2) {
        if (points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        }
        else if (TeamTwo.length == 2 || TeamThree.length == 2) {
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
    }
    if (topQueens.length < 5 && winningScore < 12 && randomNumber(0, 100) > 45) {
        screen.createBold("And not just that, you are all winners, baby! You may now untuck backstage.");
        for (let i = 0; i < topQueens.length; i++) {
        weekWinner.push(topQueens[i]);
        topQueens[i].addToTrackRecord(" WIN");
        topQueens[i].ppe += 5;
        topQueens[i].coinz += 2.5;
        topQueens[i].favoritism += 3;
        }
    }
    else {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you are the winner of this week's challenge! <br> You may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 1.5;
        }
    }
    screen.createHorizontalLine();
    for (let i = 0; i < loseTeam.length; i++)
    bottomQueens.push(loseTeam[i]);
    screen.createParagraph("", "critiques");
    let critiques = document.getElementById("critiques");
    if (safeQueens.length > 0) {
    for (let i = 0; i < safeQueens.length; i++) {
        critiques.innerHTML += `${safeQueens[i].getName()}, `;
    }
    }
    for (let i = 0; i < bottomQueens.length; i++)
    critiques.innerHTML += `${bottomQueens[i].getName()}, `;
    critiques.innerHTML += "let us now hear the judges' critiques.";
    }
    else if (fourTeams == true) {
    let teamOneScore = 0;
    let teamTwoScore = 0;
    let teamThreeScore = 0;
    let teamFourScore = 0;
    let teamOneFinalScore = 0;
    let teamTwoFinalScore = 0;
    let teamThreeFinalScore = 0;
    let teamFourFinalScore = 0;
    let winningScore = 0;
    let safeTeam = [];
    let loseTeam = [];
    screen.createBold("Based on your sickening performances this week, I have made some decisions...")
    for (let i = 0; i < TeamOne.length; i++)
    teamOneScore += TeamOne[i].performanceScore;
    for (let i = 0; i < TeamTwo.length; i++)
    teamTwoScore += TeamTwo[i].performanceScore;
    for (let i = 0; i < TeamThree.length; i++)
    teamThreeScore += TeamThree[i].performanceScore;
    for (let i = 0; i < TeamFour.length; i++)
    teamFourScore += TeamFour[i].performanceScore;
    const tiebreaker = [0.01, 0.02, 0.03, 0.04];
    const ABreaker = [];
    const BBreaker = [];
    const CBreaker = [];
    const DBreaker = [];
    ABreaker.push(tiebreaker[randomNumber(0, 3)]);
    tiebreaker.splice(tiebreaker.indexOf(ABreaker[0]), 1);
    BBreaker.push(tiebreaker[randomNumber(0, 2)]);
    tiebreaker.splice(tiebreaker.indexOf(BBreaker[0]), 1);
    CBreaker.push(tiebreaker[randomNumber(0, 1)]);
    tiebreaker.splice(tiebreaker.indexOf(CBreaker[0]), 1);
    DBreaker.push(tiebreaker[0]);
    tiebreaker.splice(tiebreaker.indexOf(DBreaker[0]), 1);
    teamOneFinalScore += (teamOneScore / TeamOne.length) - ABreaker[0];
    teamTwoFinalScore += (teamTwoScore / TeamTwo.length) - BBreaker[0];
    teamThreeFinalScore += (teamThreeScore / TeamThree.length) - CBreaker[0];
    teamFourFinalScore += (teamFourScore / TeamFour.length) - DBreaker[0];
    const points = [teamOneFinalScore, teamTwoFinalScore, teamThreeFinalScore, teamFourFinalScore];
    points.sort(function(a, b){return a - b});
    if (points[0] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        screen.createBold("Team Two, condragulations, you are the winning group this week!");
        winningScore += teamTwoFinalScore;
        if (TeamOne.length > 2 && TeamThree.length > 2 && TeamFour.length > 2) {
        if (points[1] == teamOneFinalScore && points[2] == teamFourFinalScore || points[2] == teamOneFinalScore && points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamThreeFinalScore && points[2] == teamFourFinalScore || points[2] == teamThreeFinalScore && points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamThreeFinalScore && points[2] == teamOneFinalScore || points[2] == teamThreeFinalScore && points[1] == teamOneFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        }
        }
        else if (TeamOne.length == 2 || TeamThree.length == 2 || TeamFour.length == 2) {
        if (points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        }
    }
    else if (points[0] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        screen.createBold("Team One, condragulations, you are the winning group this week!");
        winningScore += teamOneFinalScore;
        if (TeamTwo.length > 2 && TeamThree.length > 2 && TeamFour.length > 2) {
        if (points[1] == teamTwoFinalScore && points[2] == teamFourFinalScore || points[2] == teamTwoFinalScore && points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamThreeFinalScore && points[2] == teamFourFinalScore || points[2] == teamThreeFinalScore && points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        else if (points[1] == teamThreeFinalScore && points[2] == teamTwoFinalScore || points[2] == teamThreeFinalScore && points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        }
        }
        else if (TeamTwo.length == 2 || TeamThree.length == 2 || TeamFour.length == 2) {
        if (points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        else if (points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        }
    }
    else if (points[0] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
        screen.createImage(TeamThree[i].image, "cyan");
        topQueens.push(TeamThree[i]);
        }
        screen.createBold("Team Three, condragulations, you are the winning group this week!");
        winningScore += teamThreeFinalScore;
        if (TeamTwo.length > 2 && TeamOne.length > 2 && TeamFour.length > 2) {
        if (points[1] == teamTwoFinalScore && points[2] == teamFourFinalScore || points[2] == teamTwoFinalScore && points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamOneFinalScore && points[2] == teamFourFinalScore || points[2] == teamOneFinalScore && points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        else if (points[1] == teamOneFinalScore && points[2] == teamTwoFinalScore || points[2] == teamOneFinalScore && points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        }
        }
        else if (TeamTwo.length == 2 || TeamOne.length == 2 || TeamFour.length == 2) {
        if (points[1] == teamFourFinalScore) {
        for (let i = 0; i < TeamFour.length; i++) {
            safeQueens.push(TeamFour[i]);
            TeamFour[i].addToTrackRecord("SAFE");
            TeamFour[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamFour.length; i++)
        loseTeam.push(TeamFour[i]);
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        }
    }
    else if (points[0] == teamFourFinalScore) {
        for (let i = 0; i < TeamFour.length; i++) {
        screen.createImage(TeamFour[i].image, "cyan");
        topQueens.push(TeamFour[i]);
        }
        screen.createBold("Team Four, condragulations, you are the winning group this week!");
        winningScore += teamFourFinalScore;
        if (TeamTwo.length > 2 && TeamOne.length > 2 && TeamThree.length > 2) {
        if (points[1] == teamTwoFinalScore && points[2] == teamThreeFinalScore || points[2] == teamTwoFinalScore && points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamOneFinalScore && points[2] == teamThreeFinalScore || points[2] == teamOneFinalScore && points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        else if (points[1] == teamOneFinalScore && points[2] == teamTwoFinalScore || points[2] == teamOneFinalScore && points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        }
        }
        else if (TeamTwo.length == 2 || TeamOne.length == 2 || TeamThree.length == 2) {
        if (points[1] == teamThreeFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
            safeQueens.push(TeamThree[i]);
            TeamThree[i].addToTrackRecord("SAFE");
            TeamThree[i].ppe += 3;
        }
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamTwoFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
            safeQueens.push(TeamTwo[i]);
            TeamTwo[i].addToTrackRecord("SAFE");
            TeamTwo[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        for (let i = 0; i < TeamOne.length; i++)
        loseTeam.push(TeamOne[i]);
        }
        else if (points[1] == teamOneFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
            safeQueens.push(TeamOne[i]);
            TeamOne[i].addToTrackRecord("SAFE");
            TeamOne[i].ppe += 3;
        }
        for (let i = 0; i < TeamThree.length; i++)
        loseTeam.push(TeamThree[i]);
        for (let i = 0; i < TeamTwo.length; i++)
        loseTeam.push(TeamTwo[i]);
        }
        }
    }
    if (topQueens.length < 5 && winningScore < 12 && randomNumber(0, 100) > 45) {
        screen.createBold("And not just that, you are all winners, baby! You may now untuck backstage.");
        for (let i = 0; i < topQueens.length; i++) {
        weekWinner.push(topQueens[i]);
        topQueens[i].addToTrackRecord(" WIN");
        topQueens[i].ppe += 5;
        topQueens[i].coinz += 2.5;
        topQueens[i].favoritism += 3;
        }
    }
    else {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you are the winner of this week's challenge! <br> You may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 1.5;
        }
    }
    screen.createHorizontalLine();
    for (let i = 0; i < loseTeam.length; i++)
    bottomQueens.push(loseTeam[i]);
    screen.createParagraph("", "critiques");
    let critiques = document.getElementById("critiques");
    if (safeQueens.length > 0) {
    for (let i = 0; i < safeQueens.length; i++) {
        critiques.innerHTML += `${safeQueens[i].getName()}, `;
    }
    }
    for (let i = 0; i < bottomQueens.length; i++)
    critiques.innerHTML += `${bottomQueens[i].getName()}, `;
    critiques.innerHTML += "let us now hear the judges' critiques.";
    }
    else if (fiveTeams == true) {
    let teamOneScore = 0;
    let teamTwoScore = 0;
    let teamThreeScore = 0;
    let teamFourScore = 0;
    let teamFiveScore = 0;
    let teamOneFinalScore = 0;
    let teamTwoFinalScore = 0;
    let teamThreeFinalScore = 0;
    let teamFourFinalScore = 0;
    let teamFiveFinalScore = 0;
    let winningScore = 0;
    let safeTeam = [];
    let loseTeam = [];
    screen.createBold("Based on your sickening performances this week, I have made some decisions...")
    for (let i = 0; i < TeamOne.length; i++)
    teamOneScore += TeamOne[i].performanceScore;
    for (let i = 0; i < TeamTwo.length; i++)
    teamTwoScore += TeamTwo[i].performanceScore;
    for (let i = 0; i < TeamThree.length; i++)
    teamThreeScore += TeamThree[i].performanceScore;
    for (let i = 0; i < TeamFour.length; i++)
    teamFourScore += TeamFour[i].performanceScore;
    for (let i = 0; i < TeamFive.length; i++)
    teamFiveScore += TeamFive[i].performanceScore;
    const tiebreaker = [0.01, 0.02, 0.03, 0.04, 0.05];
    const ABreaker = [];
    const BBreaker = [];
    const CBreaker = [];
    const DBreaker = [];
    const EBreaker = [];
    ABreaker.push(tiebreaker[randomNumber(0, 4)]);
    tiebreaker.splice(tiebreaker.indexOf(ABreaker[0]), 1);
    BBreaker.push(tiebreaker[randomNumber(0, 3)]);
    tiebreaker.splice(tiebreaker.indexOf(BBreaker[0]), 1);
    CBreaker.push(tiebreaker[randomNumber(0, 2)]);
    tiebreaker.splice(tiebreaker.indexOf(CBreaker[0]), 1);
    DBreaker.push(tiebreaker[randomNumber(0, 1)]);
    tiebreaker.splice(tiebreaker.indexOf(DBreaker[0]), 1);
    EBreaker.push(tiebreaker[0]);
    tiebreaker.splice(tiebreaker.indexOf(EBreaker[0]), 1);
    teamOneFinalScore += (teamOneScore / TeamOne.length) - ABreaker[0];
    teamTwoFinalScore += (teamTwoScore / TeamTwo.length) - BBreaker[0];
    teamThreeFinalScore += (teamThreeScore / TeamThree.length) - CBreaker[0];
    teamFourFinalScore += (teamFourScore / TeamFour.length) - DBreaker[0];
    teamFiveFinalScore += (teamFiveScore / TeamFive.length) - EBreaker[0];
    const points = [teamOneFinalScore, teamTwoFinalScore, teamThreeFinalScore, teamFourFinalScore, teamFiveFinalScore];
    points.sort(function(a, b){return a - b});
    if (points[0] == teamOneFinalScore && points[1] == teamTwoFinalScore || points[1] == teamOneFinalScore && points[0] == teamTwoFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        screen.createBold("Team One and Team Two, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamOne.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamTwo.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamOne[0].image, "royalblue");
        screen.createImage(TeamTwo[0].image, "royalblue");
        screen.createBold(TeamOne[0].getName() + " and " + TeamTwo[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamOne[0]);
        weekWinner.push(TeamTwo[0]);
        TeamOne[0].addToTrackRecord(" WIN");
        TeamOne[0].ppe += 5;
        TeamOne[0].coinz += 5;
        TeamOne[0].favoritism += 5;
        TeamTwo[0].addToTrackRecord(" WIN");
        TeamTwo[0].ppe += 5;
        TeamTwo[0].coinz += 5;
        TeamTwo[0].favoritism += 5;
        for (let i = 1; i < TeamOne.length; i++) {
        TeamOne[i].addToTrackRecord("HIGH<br>TEAM");
        TeamOne[i].ppe += 4;
        TeamOne[i].favoritism += 2;
        }
        for (let i = 1; i < TeamTwo.length; i++) {
        TeamTwo[i].addToTrackRecord("HIGH<br>TEAM");
        TeamTwo[i].ppe += 4;
        TeamTwo[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamOneFinalScore && points[1] == teamThreeFinalScore || points[1] == teamOneFinalScore && points[0] == teamThreeFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        for (let i = 0; i < TeamThree.length; i++) {
        screen.createImage(TeamThree[i].image, "cyan");
        topQueens.push(TeamThree[i]);
        }
        screen.createBold("Team One and Team Three, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamOne.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamThree.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamOne[0].image, "royalblue");
        screen.createImage(TeamThree[0].image, "royalblue");
        screen.createBold(TeamOne[0].getName() + " and " + TeamThree[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamOne[0]);
        weekWinner.push(TeamThree[0]);
        TeamOne[0].addToTrackRecord(" WIN");
        TeamOne[0].ppe += 5;
        TeamOne[0].coinz += 5;
        TeamOne[0].favoritism += 5;
        TeamThree[0].addToTrackRecord(" WIN");
        TeamThree[0].ppe += 5;
        TeamThree[0].coinz += 5;
        TeamThree[0].favoritism += 5;
        for (let i = 1; i < TeamOne.length; i++) {
        TeamOne[i].addToTrackRecord("HIGH<br>TEAM");
        TeamOne[i].ppe += 4;
        TeamOne[i].favoritism += 2;
        }
        for (let i = 1; i < TeamThree.length; i++) {
        TeamThree[i].addToTrackRecord("HIGH<br>TEAM");
        TeamThree[i].ppe += 4;
        TeamThree[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamOneFinalScore && points[1] == teamFourFinalScore || points[1] == teamOneFinalScore && points[0] == teamFourFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        for (let i = 0; i < TeamFour.length; i++) {
        screen.createImage(TeamFour[i].image, "cyan");
        topQueens.push(TeamFour[i]);
        }
        screen.createBold("Team One and Team Four, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamOne.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFour.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamOne[0].image, "royalblue");
        screen.createImage(TeamFour[0].image, "royalblue");
        screen.createBold(TeamOne[0].getName() + " and " + TeamFour[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamOne[0]);
        weekWinner.push(TeamFour[0]);
        TeamOne[0].addToTrackRecord(" WIN");
        TeamOne[0].ppe += 5;
        TeamOne[0].coinz += 5;
        TeamOne[0].favoritism += 5;
        TeamFour[0].addToTrackRecord(" WIN");
        TeamFour[0].ppe += 5;
        TeamFour[0].coinz += 5;
        TeamFour[0].favoritism += 5;
        for (let i = 1; i < TeamOne.length; i++) {
        TeamOne[i].addToTrackRecord("HIGH<br>TEAM");
        TeamOne[i].ppe += 4;
        TeamOne[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFour.length; i++) {
        TeamFour[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFour[i].ppe += 4;
        TeamFour[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamOneFinalScore && points[1] == teamFiveFinalScore || points[1] == teamOneFinalScore && points[0] == teamFiveFinalScore) {
        for (let i = 0; i < TeamOne.length; i++) {
        screen.createImage(TeamOne[i].image, "cyan");
        topQueens.push(TeamOne[i]);
        }
        for (let i = 0; i < TeamFive.length; i++) {
        screen.createImage(TeamFive[i].image, "cyan");
        topQueens.push(TeamFive[i]);
        }
        screen.createBold("Team One and Team Five, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamOne.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFive.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamOne[0].image, "royalblue");
        screen.createImage(TeamFive[0].image, "royalblue");
        screen.createBold(TeamOne[0].getName() + " and " + TeamFive[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamOne[0]);
        weekWinner.push(TeamFive[0]);
        TeamOne[0].addToTrackRecord(" WIN");
        TeamOne[0].ppe += 5;
        TeamOne[0].coinz += 5;
        TeamOne[0].favoritism += 5;
        TeamFive[0].addToTrackRecord(" WIN");
        TeamFive[0].ppe += 5;
        TeamFive[0].coinz += 5;
        TeamFive[0].favoritism += 5;
        for (let i = 1; i < TeamOne.length; i++) {
        TeamOne[i].addToTrackRecord("HIGH<br>TEAM");
        TeamOne[i].ppe += 4;
        TeamOne[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFive.length; i++) {
        TeamFive[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFive[i].ppe += 4;
        TeamFive[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamTwoFinalScore && points[1] == teamThreeFinalScore || points[1] == teamTwoFinalScore && points[0] == teamThreeFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        for (let i = 0; i < TeamThree.length; i++) {
        screen.createImage(TeamThree[i].image, "cyan");
        topQueens.push(TeamThree[i]);
        }
        screen.createBold("Team Two and Team Three, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamTwo.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamThree.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamTwo[0].image, "royalblue");
        screen.createImage(TeamThree[0].image, "royalblue");
        screen.createBold(TeamTwo[0].getName() + " and " + TeamThree[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamTwo[0]);
        weekWinner.push(TeamThree[0]);
        TeamTwo[0].addToTrackRecord(" WIN");
        TeamTwo[0].ppe += 5;
        TeamTwo[0].coinz += 5;
        TeamTwo[0].favoritism += 5;
        TeamThree[0].addToTrackRecord(" WIN");
        TeamThree[0].ppe += 5;
        TeamThree[0].coinz += 5;
        TeamThree[0].favoritism += 5;
        for (let i = 1; i < TeamTwo.length; i++) {
        TeamTwo[i].addToTrackRecord("HIGH<br>TEAM");
        TeamTwo[i].ppe += 4;
        TeamTwo[i].favoritism += 2;
        }
        for (let i = 1; i < TeamThree.length; i++) {
        TeamThree[i].addToTrackRecord("HIGH<br>TEAM");
        TeamThree[i].ppe += 4;
        TeamThree[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamTwoFinalScore && points[1] == teamFourFinalScore || points[1] == teamTwoFinalScore && points[0] == teamFourFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        for (let i = 0; i < TeamFour.length; i++) {
        screen.createImage(TeamFour[i].image, "cyan");
        topQueens.push(TeamFour[i]);
        }
        screen.createBold("Team Two and Team Four, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamTwo.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFour.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamTwo[0].image, "royalblue");
        screen.createImage(TeamFour[0].image, "royalblue");
        screen.createBold(TeamTwo[0].getName() + " and " + TeamFour[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamTwo[0]);
        weekWinner.push(TeamFour[0]);
        TeamTwo[0].addToTrackRecord(" WIN");
        TeamTwo[0].ppe += 5;
        TeamTwo[0].coinz += 5;
        TeamTwo[0].favoritism += 5;
        TeamFour[0].addToTrackRecord(" WIN");
        TeamFour[0].ppe += 5;
        TeamFour[0].coinz += 5;
        TeamFour[0].favoritism += 5;
        for (let i = 1; i < TeamTwo.length; i++) {
        TeamTwo[i].addToTrackRecord("HIGH<br>TEAM");
        TeamTwo[i].ppe += 4;
        TeamTwo[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFour.length; i++) {
        TeamFour[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFour[i].ppe += 4;
        TeamFour[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamTwoFinalScore && points[1] == teamFiveFinalScore || points[1] == teamTwoFinalScore && points[0] == teamFiveFinalScore) {
        for (let i = 0; i < TeamTwo.length; i++) {
        screen.createImage(TeamTwo[i].image, "cyan");
        topQueens.push(TeamTwo[i]);
        }
        for (let i = 0; i < TeamFive.length; i++) {
        screen.createImage(TeamFive[i].image, "cyan");
        topQueens.push(TeamFive[i]);
        }
        screen.createBold("Team Two and Team Five, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamTwo.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFive.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamTwo[0].image, "royalblue");
        screen.createImage(TeamFive[0].image, "royalblue");
        screen.createBold(TeamTwo[0].getName() + " and " + TeamFive[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamTwo[0]);
        weekWinner.push(TeamFive[0]);
        TeamTwo[0].addToTrackRecord(" WIN");
        TeamTwo[0].ppe += 5;
        TeamTwo[0].coinz += 5;
        TeamTwo[0].favoritism += 5;
        TeamFive[0].addToTrackRecord(" WIN");
        TeamFive[0].ppe += 5;
        TeamFive[0].coinz += 5;
        TeamFive[0].favoritism += 5;
        for (let i = 1; i < TeamTwo.length; i++) {
        TeamTwo[i].addToTrackRecord("HIGH<br>TEAM");
        TeamTwo[i].ppe += 4;
        TeamTwo[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFive.length; i++) {
        TeamFive[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFive[i].ppe += 4;
        TeamFive[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamThreeFinalScore && points[1] == teamFourFinalScore || points[1] == teamThreeFinalScore && points[0] == teamFourFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
        screen.createImage(TeamThree[i].image, "cyan");
        topQueens.push(TeamThree[i]);
        }
        for (let i = 0; i < TeamFour.length; i++) {
        screen.createImage(TeamFour[i].image, "cyan");
        topQueens.push(TeamFour[i]);
        }
        screen.createBold("Team Three and Team Four, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamThree.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFour.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamThree[0].image, "royalblue");
        screen.createImage(TeamFour[0].image, "royalblue");
        screen.createBold(TeamThree[0].getName() + " and " + TeamFour[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamThree[0]);
        weekWinner.push(TeamFour[0]);
        TeamThree[0].addToTrackRecord(" WIN");
        TeamThree[0].ppe += 5;
        TeamThree[0].coinz += 5;
        TeamThree[0].favoritism += 5;
        TeamFour[0].addToTrackRecord(" WIN");
        TeamFour[0].ppe += 5;
        TeamFour[0].coinz += 5;
        TeamFour[0].favoritism += 5;
        for (let i = 1; i < TeamThree.length; i++) {
        TeamThree[i].addToTrackRecord("HIGH<br>TEAM");
        TeamThree[i].ppe += 4;
        TeamThree[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFour.length; i++) {
        TeamFour[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFour[i].ppe += 4;
        TeamFour[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamThreeFinalScore && points[1] == teamFiveFinalScore || points[1] == teamThreeFinalScore && points[0] == teamFiveFinalScore) {
        for (let i = 0; i < TeamThree.length; i++) {
        screen.createImage(TeamThree[i].image, "cyan");
        topQueens.push(TeamThree[i]);
        }
        for (let i = 0; i < TeamFive.length; i++) {
        screen.createImage(TeamFive[i].image, "cyan");
        topQueens.push(TeamFive[i]);
        }
        screen.createBold("Team Three and Team Five, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamThree.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFive.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamThree[0].image, "royalblue");
        screen.createImage(TeamFive[0].image, "royalblue");
        screen.createBold(TeamThree[0].getName() + " and " + TeamFive[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamThree[0]);
        weekWinner.push(TeamFive[0]);
        TeamThree[0].addToTrackRecord(" WIN");
        TeamThree[0].ppe += 5;
        TeamThree[0].coinz += 5;
        TeamThree[0].favoritism += 5;
        TeamFive[0].addToTrackRecord(" WIN");
        TeamFive[0].ppe += 5;
        TeamFive[0].coinz += 5;
        TeamFive[0].favoritism += 5;
        for (let i = 1; i < TeamThree.length; i++) {
        TeamThree[i].addToTrackRecord("HIGH<br>TEAM");
        TeamThree[i].ppe += 4;
        TeamThree[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFive.length; i++) {
        TeamFive[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFive[i].ppe += 4;
        TeamFive[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    else if (points[0] == teamFourFinalScore && points[1] == teamFiveFinalScore || points[1] == teamFourFinalScore && points[0] == teamFiveFinalScore) {
        for (let i = 0; i < TeamFour.length; i++) {
        screen.createImage(TeamFour[i].image, "cyan");
        topQueens.push(TeamFour[i]);
        }
        for (let i = 0; i < TeamFive.length; i++) {
        screen.createImage(TeamFive[i].image, "cyan");
        topQueens.push(TeamFive[i]);
        }
        screen.createBold("Team Four and Team Five, you have captured our attentions with your sickening performance this week! <br> But we have to choose a winner.");
        if (randomNumber(0, 100) > 40) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations! You are the winning queen for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        for (let i = 1; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 20) {
        TeamFour.sort((a, b) => (a.performanceScore - b.performanceScore));
        TeamFive.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(TeamFour[0].image, "royalblue");
        screen.createImage(TeamFive[0].image, "royalblue");
        screen.createBold(TeamFour[0].getName() + " and " + TeamFive[0].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(TeamFour[0]);
        weekWinner.push(TeamFive[0]);
        TeamFour[0].addToTrackRecord(" WIN");
        TeamFour[0].ppe += 5;
        TeamFour[0].coinz += 5;
        TeamFour[0].favoritism += 5;
        TeamFive[0].addToTrackRecord(" WIN");
        TeamFive[0].ppe += 5;
        TeamFive[0].coinz += 5;
        TeamFive[0].favoritism += 5;
        for (let i = 1; i < TeamFour.length; i++) {
        TeamFour[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFour[i].ppe += 4;
        TeamFour[i].favoritism += 2;
        }
        for (let i = 1; i < TeamFive.length; i++) {
        TeamFive[i].addToTrackRecord("HIGH<br>TEAM");
        TeamFive[i].ppe += 4;
        TeamFive[i].favoritism += 2;
        }
        }
        else if (randomNumber(0, 100) > 0) {
        topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createImage(topQueens[1].image, "royalblue");
        screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", condragulations! You are the winning queens for this week. <br> Ladies, you may now all untuck backstage.");
        weekWinner.push(topQueens[0]);
        weekWinner.push(topQueens[1]);
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        topQueens[0].favoritism += 5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 5;
        topQueens[1].favoritism += 5;
        for (let i = 2; i < topQueens.length; i++) {
        topQueens[i].addToTrackRecord("HIGH<br>TEAM");
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 2;
        }
        }
    }
    if (points[2] == teamOneFinalScore) {
    for (let i = 0; i < TeamOne.length; i++) {
        safeQueens.push(TeamOne[i]);
        TeamOne[i].addToTrackRecord("SAFE");
        TeamOne[i].ppe += 3;
    }
    }
    else if (points[2] == teamTwoFinalScore) {
    for (let i = 0; i < TeamTwo.length; i++) {
        safeQueens.push(TeamTwo[i]);
        TeamTwo[i].addToTrackRecord("SAFE");
        TeamTwo[i].ppe += 3;
    }
    }
    else if (points[2] == teamThreeFinalScore) {
    for (let i = 0; i < TeamThree.length; i++) {
        safeQueens.push(TeamThree[i]);
        TeamThree[i].addToTrackRecord("SAFE");
        TeamThree[i].ppe += 3;
    }
    }
    else if (points[2] == teamFourFinalScore) {
    for (let i = 0; i < TeamFour.length; i++) {
        safeQueens.push(TeamFour[i]);
        TeamFour[i].addToTrackRecord("SAFE");
        TeamFour[i].ppe += 3;
    }
    }
    else if (points[2] == teamFiveFinalScore) {
    for (let i = 0; i < TeamFive.length; i++) {
        safeQueens.push(TeamFive[i]);
        TeamFive[i].addToTrackRecord("SAFE");
        TeamFive[i].ppe += 3;
    }
    }
    if (points[3] == teamOneFinalScore && points[4] == teamTwoFinalScore || points[4] == teamOneFinalScore && points[3] == teamTwoFinalScore) {
    for (let i = 0; i < TeamOne.length; i++)
    bottomQueens.push(TeamOne[i]);
    for (let i = 0; i < TeamTwo.length; i++)
    bottomQueens.push(TeamTwo[i]);
    }
    else if (points[3] == teamOneFinalScore && points[4] == teamThreeFinalScore || points[4] == teamOneFinalScore && points[3] == teamThreeFinalScore) {
    for (let i = 0; i < TeamOne.length; i++)
    bottomQueens.push(TeamOne[i]);
    for (let i = 0; i < TeamThree.length; i++)
    bottomQueens.push(TeamThree[i]);
    }
    else if (points[3] == teamOneFinalScore && points[4] == teamFourFinalScore || points[4] == teamOneFinalScore && points[3] == teamFourFinalScore) {
    for (let i = 0; i < TeamOne.length; i++)
    bottomQueens.push(TeamOne[i]);
    for (let i = 0; i < TeamFour.length; i++)
    bottomQueens.push(TeamFour[i]);
    }
    else if (points[3] == teamOneFinalScore && points[4] == teamFiveFinalScore || points[4] == teamOneFinalScore && points[3] == teamFiveFinalScore) {
    for (let i = 0; i < TeamOne.length; i++)
    bottomQueens.push(TeamOne[i]);
    for (let i = 0; i < TeamFive.length; i++)
    bottomQueens.push(TeamFive[i]);
    }
    else if (points[3] == teamTwoFinalScore && points[4] == teamThreeFinalScore || points[4] == teamTwoFinalScore && points[3] == teamThreeFinalScore) {
    for (let i = 0; i < TeamTwo.length; i++)
    bottomQueens.push(TeamTwo[i]);
    for (let i = 0; i < TeamThree.length; i++)
    bottomQueens.push(TeamThree[i]);
    }
    else if (points[3] == teamTwoFinalScore && points[4] == teamFourFinalScore || points[4] == teamTwoFinalScore && points[3] == teamFourFinalScore) {
    for (let i = 0; i < TeamTwo.length; i++)
    bottomQueens.push(TeamTwo[i]);
    for (let i = 0; i < TeamFour.length; i++)
    bottomQueens.push(TeamFour[i]);
    }
    else if (points[3] == teamTwoFinalScore && points[4] == teamFiveFinalScore || points[4] == teamTwoFinalScore && points[3] == teamFiveFinalScore) {
    for (let i = 0; i < TeamTwo.length; i++)
    bottomQueens.push(TeamTwo[i]);
    for (let i = 0; i < TeamFive.length; i++)
    bottomQueens.push(TeamFive[i]);
    }
    else if (points[3] == teamThreeFinalScore && points[4] == teamFourFinalScore || points[4] == teamThreeFinalScore && points[3] == teamFourFinalScore) {
    for (let i = 0; i < TeamThree.length; i++)
    bottomQueens.push(TeamThree[i]);
    for (let i = 0; i < TeamFour.length; i++)
    bottomQueens.push(TeamFour[i]);
    }
    else if (points[3] == teamThreeFinalScore && points[4] == teamFiveFinalScore || points[4] == teamThreeFinalScore && points[3] == teamFiveFinalScore) {
    for (let i = 0; i < TeamThree.length; i++)
    bottomQueens.push(TeamThree[i]);
    for (let i = 0; i < TeamFive.length; i++)
    bottomQueens.push(TeamFive[i]);
    }
    else if (points[3] == teamFourFinalScore && points[4] == teamFiveFinalScore || points[4] == teamFourFinalScore && points[3] == teamFiveFinalScore) {
    for (let i = 0; i < TeamFour.length; i++)
    bottomQueens.push(TeamFour[i]);
    for (let i = 0; i < TeamFive.length; i++)
    bottomQueens.push(TeamFive[i]);
    }
    screen.createHorizontalLine();
    for (let i = 0; i < loseTeam.length; i++)
    bottomQueens.push(loseTeam[i]);
    screen.createParagraph("", "critiques");
    let critiques = document.getElementById("critiques");
    if (safeQueens.length > 0) {
    for (let i = 0; i < safeQueens.length; i++) {
        critiques.innerHTML += `${safeQueens[i].getName()}, `;
    }
    }
    for (let i = 0; i < bottomQueens.length; i++)
    critiques.innerHTML += `${bottomQueens[i].getName()}, `;
    critiques.innerHTML += "let us now hear the judges' critiques.";
    }
    if (top3 || top4)
    screen.createButton("Proceed", "getBottomTwo()");
    else if (savequeen)
    screen.createButton("Proceed", "saveandBottomTwo()");
}
function saveandBottomTwo() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring Back My Girls");
    screen.createBold("Ladies, I have made some decisions!");
    if (pairings == true) {
    if (bottomQueens.length > 2) {
        shuffle(bottomQueens);
        if (bottomQueens[bottomQueens.length - 1] == threeSome[0] || bottomQueens[bottomQueens.length - 2] == threeSome[0]) {
        bottomQueens.splice(bottomQueens.indexOf(threeSome[0]), 1);
        for (let i = 0; i < bottomQueens.length; i++) {
            screen.createImage(bottomQueens[i].QueenA.image, "pink");
            bottomQueens[i].QueenA.addToTrackRecord("LOW");
            bottomQueens[i].QueenA.ppe += 2;
            bottomQueens[i].QueenA.unfavoritism += 1.5;
            screen.createImage(bottomQueens[i].QueenB.image, "pink");
            bottomQueens[i].QueenB.addToTrackRecord("LOW");
            bottomQueens[i].QueenB.ppe += 2;
            bottomQueens[i].QueenB.unfavoritism += 1.5;
        }
        screen.createBold("", "lows");
        let lows = document.getElementById("lows");
        for (let i = 0; i < bottomQueens.length; i++)
        lows.innerHTML += `${bottomQueens[i].getName()}, `;
        lows.innerHTML += " you are safe."
        for (let i = 0; i < bottomQueens.length; i++)
        lowQueens.push(bottomQueens[i]);
        for (let i = 0; i < lowQueens.length; i++)
        bottomQueens.splice(bottomQueens.indexOf(lowQueens[i]), 1);
        bottomQueens.push(threeSome[0].QueenA);
        bottomQueens.push(threeSome[0].QueenB);
        bottomQueens.push(threeSome[0].QueenC);
        screen.createImage(bottomQueens[0].image, "tomato");
        screen.createImage(bottomQueens[1].image, "tomato");
        screen.createImage(bottomQueens[2].image, "tomato");
        screen.createBold("", "bots");
        let bots = document.getElementById("bots");
        bots.innerHTML += "That means, ";
        for (let i = 0; i < bottomQueens.length; i++)
        bots.innerHTML += `${bottomQueens[i].getName()}, `;
        bots.innerHTML += "you are all in the verge of elimination.";
        screen.createHorizontalLine();
        }
        else {
        for (let i = 0; i < bottomQueens.length - 2; i++) {
            screen.createImage(bottomQueens[i].QueenA.image, "pink");
            bottomQueens[i].QueenA.addToTrackRecord("LOW");
            bottomQueens[i].QueenA.ppe += 2;
            bottomQueens[i].QueenA.unfavoritism += 1.5;
            screen.createImage(bottomQueens[i].QueenB.image, "pink");
            bottomQueens[i].QueenB.addToTrackRecord("LOW");
            bottomQueens[i].QueenB.ppe += 2;
            bottomQueens[i].QueenB.unfavoritism += 1.5;
            if (bottomQueens[i] == threeSome[0]) {
            screen.createImage(bottomQueens[i].QueenC.image, "pink");
            bottomQueens[i].QueenC.addToTrackRecord("LOW");
            bottomQueens[i].QueenC.ppe += 2;
            bottomQueens[i].QueenC.unfavoritism += 1.5;
            }
            
        }
        screen.createBold("", "lows");
        let lows = document.getElementById("lows");
        for (let i = 0; i < bottomQueens.length - 2; i++)
        lows.innerHTML += `${bottomQueens[i].getName()}, `;
        lows.innerHTML += " you are safe."
        let sureBottom = [];
        sureBottom.push(bottomQueens[bottomQueens.length - 2].QueenA);
        sureBottom.push(bottomQueens[bottomQueens.length - 2].QueenB);
        sureBottom.push(bottomQueens[bottomQueens.length - 1].QueenA);
        sureBottom.push(bottomQueens[bottomQueens.length - 1].QueenB);
        bottomQueens = [];
        for (let i = 0; i < sureBottom.length; i++) {
        bottomQueens.push(sureBottom[i]);
        }
        screen.createImage(bottomQueens[0].image, "tomato");
        screen.createImage(bottomQueens[1].image, "tomato");
        screen.createImage(bottomQueens[2].image, "tomato");
        screen.createImage(bottomQueens[3].image, "tomato");
        screen.createBold("", "bots");
        let bots = document.getElementById("bots");
        bots.innerHTML += "That means, ";
        for (let i = 0; i < bottomQueens.length; i++)
        bots.innerHTML += `${bottomQueens[i].getName()}, `;
        bots.innerHTML += "you are all in the verge of elimination.";
        screen.createHorizontalLine();
        }
    }
    else if (bottomQueens.length == 2) {
    if (bottomQueens[0] == threeSome[0] || bottomQueens[1] == threeSome[0]) {
        let botHolder = [];
        botHolder.push(bottomQueens[0]);
        botHolder.push(bottomQueens[1]);
        bottomQueens = [];
        bottomQueens.push(botHolder[0].QueenA);
        bottomQueens.push(botHolder[0].QueenB);
        if (botHolder[0] == threeSome[0])
        bottomQueens.push(botHolder[0].QueenC);
        bottomQueens.push(botHolder[1].QueenA);
        bottomQueens.push(botHolder[1].QueenB);
        if (botHolder[1] == threeSome[0])
        bottomQueens.push(botHolder[1].QueenC);
        bottomQueens.sort((a, b) => ((a.unfavoritism + a.favoritism) - (b.unfavoritism + b.favoritism)));
        lowQueens.push(bottomQueens[0]);
        lowQueens.push(bottomQueens[1]);
        for (let i = 0; i < lowQueens.length; i++) {
            screen.createImage(lowQueens[i].image, "pink");
            lowQueens[i].addToTrackRecord("LOW");
            lowQueens[i].ppe += 2;
            lowQueens[i].unfavoritism += 1.5;
        }
        screen.createBold("", "lows");
        let lows = document.getElementById("lows");
        for (let i = 0; i < lowQueens.length; i++) {
        lows.innerHTML += `${lowQueens[i].getName()}, `;
        bottomQueens.splice(bottomQueens.indexOf(lowQueens[i]), 1);
        }
        lows.innerHTML += " you are safe."
    }
    else {
        let botHolder = [];
        botHolder.push(bottomQueens[0]);
        botHolder.push(bottomQueens[1]);
        bottomQueens = [];
        bottomQueens.push(botHolder[0].QueenA);
        bottomQueens.push(botHolder[0].QueenB);
        bottomQueens.push(botHolder[1].QueenA);
        bottomQueens.push(botHolder[1].QueenB);
        bottomQueens.sort((a, b) => ((a.unfavoritism + a.favoritism) - (b.unfavoritism + b.favoritism)));
        lowQueens.push(bottomQueens[0]);
        for (let i = 0; i < lowQueens.length; i++) {
            screen.createImage(lowQueens[i].image, "pink");
            lowQueens[i].addToTrackRecord("LOW");
            lowQueens[i].ppe += 2;
            lowQueens[i].unfavoritism += 1.5;
        }
        screen.createBold("", "lows");
        let lows = document.getElementById("lows");
        for (let i = 0; i < lowQueens.length; i++) {
        lows.innerHTML += `${lowQueens[i].getName()}, `;
        bottomQueens.splice(bottomQueens.indexOf(lowQueens[i]), 1);
        }
        lows.innerHTML += " you are safe."
    }
    }
        screen.createBigText("After Deliberations");
        if (bottomQueens.length == 3) {
        if (randomNumber(0, 100) > 70) {
            bottomQueens.sort((a, b) => ((a.unfavoritism + a.favoritism) - (b.unfavoritism + b.favoritism)));
            topQueens[0].lipstick = bottomQueens[0];
        }
        else {
            topQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
        }
        screen.createBold("The winning queens have already made their decision.");
        screen.createImage(topQueens[0].QueenA.image, "darkblue");
        screen.createImage(topQueens[0].QueenB.image, "darkblue");
        screen.createBold("The queens have chosen to save...");
        screen.createImage(topQueens[0].lipstick.image, "yellow");
        screen.createBold(topQueens[0].lipstick.getName());
        bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
        topQueens[0].lipstick.addToTrackRecord("SAVED");
        topQueens[0].lipstick.ppe += 1.5;
        topQueens[0].lipstick.unfavoritism += 2;
        }
        else {
        if (randomNumber(0, 100) > 70) {
            bottomQueens.sort((a, b) => ((a.unfavoritism + a.favoritism) - (b.unfavoritism + b.favoritism)));
            topQueens[0].lipstick = bottomQueens[0];
            topQueens[0].lipstickTwo = bottomQueens[1];
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstickTwo), 1);
        }
        else {
            topQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
            topQueens[0].lipstickTwo = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstickTwo), 1);
        }
        screen.createBold("The winning queens have already made their decision.");
        screen.createImage(topQueens[0].QueenA.image, "darkblue");
        screen.createImage(topQueens[0].QueenB.image, "darkblue");
        if (topQueens[0] == threeSome[0])
        screen.createImage(topQueens[0].QueenC.image, "darkblue");
        screen.createBold("The queens have chosen to save...");
        screen.createImage(topQueens[0].lipstick.image, "yellow");
        screen.createImage(topQueens[0].lipstickTwo.image, "yellow");
        screen.createBold(topQueens[0].lipstick.getName() + " and " + topQueens[0].lipstickTwo.getName());
        topQueens[0].lipstick.addToTrackRecord("SAVED");
        topQueens[0].lipstick.ppe += 1.5;
        topQueens[0].lipstick.unfavoritism += 2;
        topQueens[0].lipstickTwo.addToTrackRecord("SAVED");
        topQueens[0].lipstickTwo.ppe += 1.5;
        topQueens[0].lipstickTwo.unfavoritism += 2;
        }
    screen.createHorizontalLine();
    screen.createBigText("That means...");
    for (let i = 0; i < bottomQueens.length; i++)
    screen.createImage(bottomQueens[i].image, "red");
    screen.createBold(bottomQueens[0].getName() + ", " + bottomQueens[1].getName() + ", you will be up for elimination.")
    }
    else {
    if (bottomQueens.length > 3) {
    for (let i = 0; i < bottomQueens.length; i++)
    if (isDesignChallenge == true)
        bottomQueens[i].performanceScore -= ((bottomQueens[i].performanceScore * 1.5) + bottomQueens[i].unfavoritism + (bottomQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        bottomQueens[i].performanceScore -= ((bottomQueens[i].performanceScore * 1.5) - (bottomQueens[i].runwayScore / 2) + bottomQueens[i].unfavoritism + (bottomQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        bottomQueens[i].performanceScore -= ((bottomQueens[i].performanceScore * 1.5) + bottomQueens[i].unfavoritism + (bottomQueens[i].favoritism / 25));
    else
        bottomQueens[i].performanceScore += bottomQueens[i].runwayScore;
    bottomQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
    for (let i = 0; i < bottomQueens.length - 3; i++)
    lowQueens.push(bottomQueens[i]);
    for (let i = 0; i < lowQueens.length; i++) {
        bottomQueens.splice(bottomQueens.indexOf(lowQueens[i]), 1);
        lowQueens[i].addToTrackRecord("LOW");
        lowQueens[i].ppe += 2;
        lowQueens[i].unfavoritism += 1;
        screen.createImage(lowQueens[i].image, "pink");
    }
    screen.createBold("", "lows");
    let lows = document.getElementById("lows");
    for (let i = 0; i < lowQueens.length; i++)
    lows.innerHTML += `${lowQueens[i].getName()}, `;
    lows.innerHTML += " you are safe."
    }
    for (let i = 0; i < bottomQueens.length; i++)
    screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "verge");
    let verge = document.getElementById("verge");
    verge.innerHTML += "That means, ";
    for (let i = 0; i < bottomQueens.length; i++)
    verge.innerHTML += `${bottomQueens[i].getName()}, `;
    verge.innerHTML += " you are all in the verge of elimination.";
    screen.createHorizontalLine();
    screen.createBigText("After Deliberations");
    screen.createBold("The winner/s have already made a decision.");
    for (let i = 0; i < weekWinner.length; i++)
    screen.createImage(weekWinner[i].image, "royalblue");
    screen.createBold("The queen that was chosen to be saved is...");
    if (randomNumber(0, 100) > 30) 
    topQueens[0].lipstick = bottomQueens[0];
    else
    topQueens[0].lipstick = bottomQueens[randomNumber(0, 2)];
    topQueens[0].lipstick.addToTrackRecord("SAVED");
    topQueens[0].lipstick.ppe += 1.5;
    topQueens[0].lipstick.unfavoritism += 2.5;
    screen.createImage(topQueens[0].lipstick.image, "yellow");
    screen.createBold(topQueens[0].lipstick.getName());
    bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
    screen.createHorizontalLine();
    screen.createBigText("That means...");
    for (let i = 0; i < bottomQueens.length; i++)
    screen.createImage(bottomQueens[i].image, "red");
    screen.createBold(bottomQueens[0].getName() + ", " + bottomQueens[1].getName() + ", you will be up for elimination.");
    }
    if (pairings == true) {
    currentCast = [];
    for (let i = 0; i < castHolder.length; i++) {
    currentCast.push(castHolder[i]);
    }
    let topHolder = [];
    for (let i = 0; i < topQueens.length; i++) {
        topHolder.push(topQueens[i].QueenA);
        topHolder.push(topQueens[i].QueenB);
        if (topQueens[i] == threeSome[0]) {
            topHolder.push(topQueens[i].QueenC);
        }
    }
    topQueens = [];
    for (let i = 0; i < topHolder.length; i++)
    topQueens.push(topHolder[i]);
    }
    noneIndividual = false;
    pairings = false;
    twoTeams = false;
    screen.createButton("Proceed", "lipSync()");
}
//UNTUCKED
function untucked() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Untucked !!!");
    screen.createBold("This is Untucked. A special backstage access for LVDR. <br> Girl, if you're not watching Untucked, you're only getting half of the story!");
    if (savequeen && bottomQueens.length == 2 && ruvengeUntucked == false) {
        bottomQueens.push(topQueens[0].lipstick);
    }
    else if (savequeen && bottomQueens.length == 2 && ruvengeUntucked == true) {
        bottomQueens.push(ruvengeQueens[0].lipstick);
    }
    for (let i = 0; i < currentCast.length; i++) {
        let lowPlacement = currentCast[i].trackRecord.length - 1;
        if (currentCast[i].trackRecord[lowPlacement] == "LOW" && all_stars == false && lipsync_assassin == false) {
            bottomQueens.push(currentCast[i]);
        }
    }
    if ((all_stars || lipsync_assassin) && bottomQueens.length > 1) {
        bottomQueens.push(top2[0].lipstick);
    }
    if ((s12Premiere || s6Premiere || porkelimPremiere || porkchopPremiere) && episodeCount == 3) {
        let archetypes = [...currentCast];
        villainQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(villainQueen[0]), 1);
        heroQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(heroQueen[0]), 1);
        delusionalQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(delusionalQueen[0]), 1);
        annoyingQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(annoyingQueen[0]), 1);
        saboteurQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(saboteurQueen[0]), 1);
        fanfaveQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(fanfaveQueen[0]), 1);
        if (currentCast > 10) {
            let archetypes = [];
            archetypes = [...currentCast];
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[0]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[1]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[2]), 1);
            narrator.push(currentCast[randomNumber(0, currentCast.length)]);
        }
        if (currentCast > 12) {
            shadyQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            underdog.push(currentCast[randomNumber(0, currentCast.length)]);
            bustedQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            if (randomNumber(0, 100) > 90) {
                coupleArc = true;
                let archetypes = [];
                archetypes = [...currentCast];
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[0]), 1);
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[1]), 1);
            }
        }
    }
    else if (triplePremiere && episodeCount == 4) {
        let archetypes = [...currentCast];
        villainQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(villainQueen[0]), 1);
        heroQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(heroQueen[0]), 1);
        delusionalQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(delusionalQueen[0]), 1);
        annoyingQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(annoyingQueen[0]), 1);
        saboteurQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(saboteurQueen[0]), 1);
        fanfaveQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(fanfaveQueen[0]), 1);
        if (currentCast > 10) {
            let archetypes = [];
            archetypes = [...currentCast];
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[0]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[1]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[2]), 1);
            narrator.push(currentCast[randomNumber(0, currentCast.length)]);
        }
        if (currentCast > 12) {
            shadyQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            underdog.push(currentCast[randomNumber(0, currentCast.length)]);
            bustedQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            if (randomNumber(0, 100) > 90) {
                coupleArc = true;
                let archetypes = [];
                archetypes = [...currentCast];
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[0]), 1);
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[1]), 1);
            }
        }
    }
    else if ((pageantPremiere || s9Premiere || extraPremiere) && episodeCount == 2) {
        let archetypes = [...currentCast];
        villainQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(villainQueen[0]), 1);
        heroQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(heroQueen[0]), 1);
        delusionalQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(delusionalQueen[0]), 1);
        annoyingQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(annoyingQueen[0]), 1);
        saboteurQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(saboteurQueen[0]), 1);
        fanfaveQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(fanfaveQueen[0]), 1);
        if (currentCast > 10) {
            let archetypes = [];
            archetypes = [...currentCast];
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[0]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[1]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[2]), 1);
            narrator.push(currentCast[randomNumber(0, currentCast.length)]);
        }
        if (currentCast > 12) {
            shadyQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            underdog.push(currentCast[randomNumber(0, currentCast.length)]);
            bustedQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            if (randomNumber(0, 100) > 90) {
                coupleArc = true;
                let archetypes = [];
                archetypes = [...currentCast];
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[0]), 1);
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[1]), 1);
            }
        }
    }
    else if (splitCastPremiere && splitCastDuration == false && splitAssign == false) {
        splitAssign = true;
        let archetypes = [...currentCast];
        villainQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(villainQueen[0]), 1);
        heroQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(heroQueen[0]), 1);
        delusionalQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(delusionalQueen[0]), 1);
        annoyingQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(annoyingQueen[0]), 1);
        saboteurQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(saboteurQueen[0]), 1);
        fanfaveQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(fanfaveQueen[0]), 1);
        if (currentCast > 10) {
            let archetypes = [];
            archetypes = [...currentCast];
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[0]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[1]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[2]), 1);
            narrator.push(currentCast[randomNumber(0, currentCast.length)]);
        }
        if (currentCast > 12) {
            shadyQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            underdog.push(currentCast[randomNumber(0, currentCast.length)]);
            bustedQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            if (randomNumber(0, 100) > 90) {
                coupleArc = true;
                let archetypes = [];
                archetypes = [...currentCast];
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[0]), 1);
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[1]), 1);
            }
        }
    }
    else if (episodeCount == 1) {
        let archetypes = [...currentCast];
        villainQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(villainQueen[0]), 1);
        heroQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(heroQueen[0]), 1);
        delusionalQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(delusionalQueen[0]), 1);
        annoyingQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(annoyingQueen[0]), 1);
        saboteurQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(saboteurQueen[0]), 1);
        fanfaveQueen.push(archetypes[randomNumber(0, archetypes.length - 1)]);
        archetypes.splice(archetypes.indexOf(fanfaveQueen[0]), 1);
        if (currentCast > 10) {
            let archetypes = [];
            archetypes = [...currentCast];
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[0]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[1]), 1);
            clique.push(archetypes[randomNumber(0, archetypes.length - 1)]);
            archetypes.splice(archetypes.indexOf(clique[2]), 1);
            narrator.push(currentCast[randomNumber(0, currentCast.length)]);
        }
        if (currentCast > 12) {
            shadyQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            underdog.push(currentCast[randomNumber(0, currentCast.length)]);
            bustedQueen.push(currentCast[randomNumber(0, currentCast.length)]);
            if (randomNumber(0, 100) > 90) {
                coupleArc = true;
                let archetypes = [];
                archetypes = [...currentCast];
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[0]), 1);
                coupleQueens.push(archetypes[randomNumber(0, archetypes.length - 1)]);
                archetypes.splice(archetypes.indexOf(coupleQueens[1]), 1);
            }
        }
    }
    let villainCompeting = false;
    let heroCompeting = false;
    let delusionalCompeting = false;
    let annoyingCompeting = false;
    let shadyCompeting = false;
    let cliqueThree = false;
    let cliqueTwo = false;
    let cliqueOne = false;
    let underdogCompeting = false;
    let saboteurCompeting = false;
    let narratorCompeting = false;
    let fanfaveCompeting = false;
    let bustedCompeting = false;
    let coupleOne = false;
    let coupleTwo = false;
    let cliqueCounter = 0;
    let coupleCounter = 0;
    for (let i = 0; i < currentCast.length; i++) {
        if (currentCast[i] == villainQueen[0])
        villainCompeting = true;
        if (currentCast[i] == heroQueen[0])
        heroCompeting = true;
        if (currentCast[i] == delusionalQueen[0])
        delusionalCompeting = true;
        if (currentCast[i] == annoyingQueen[0])
        annoyingCompeting = true;
        if (currentCast[i] == shadyQueen[0])
        shadyCompeting = true;
        if (currentCast[i] == clique[0] || currentCast[i] == clique[1] || currentCast[i] == clique[2])
        cliqueCounter += 1;
        if (currentCast[i] == underdog[0])
        underdogCompeting = true;
        if (currentCast[i] == saboteurQueen[0])
        saboteurCompeting = true;
        if (currentCast[i] == narrator[0])
        narratorCompeting = true;
        if (currentCast[i] == fanfaveQueen[0])
        fanfaveCompeting = true;
        if (currentCast[i] == bustedQueen[0])
        bustedCompeting = true;
        if (currentCast[i] == coupleQueens[0] || currentCast[i] == coupleQueens[1])
        coupleCounter += 1;
    }
    if (cliqueCounter == 3)
    cliqueThree = true;
    if (cliqueCounter == 2)
    cliqueTwo == true;
    if (cliqueThree == 1)
    cliqueOne == true;
    if (coupleCounter == 2)
    coupleTwo == true;
    if (coupleCounter == 1)
    coupleOne == true;
    let arcSwitch = false;
    if (episodeCount > 3 && splitCastDuration == false && splitpremiere == false && arcSwitch == true) {
    let descHVearly;
    (function (descHVearly) {
        descHVearly[descHVearly["had a fight after " + villainQueen[0].getName() + " said an insensitive remark on " + heroQueen[0].getName() + "'s drag."] = 0] = "had a fight after " + villainQueen[0].getName() + " said an insensitive remark on " + heroQueen[0].getName() + "'s drag.";
        descHVearly[descHVearly["made the atmosphere tense in the werkroom due to their history outside the show."] = 1] = "made the atmosphere tense in the werkroom due to their history outside the show.";
        descHVearly[descHVearly["had a small fight after " + villainQueen[0].getName() + " said some offensive joke towards " + heroQueen[0].getName() + "."] = 2] = "had a small fight after " + villainQueen[0].getName() + " said some offensive joke towards " + heroQueen[0].getName() + ".";
        descHVearly[descHVearly["were not feeling each other after" + villainQueen[0].getName() + " said that they do not see " + heroQueen[0].getName() +"'s drag at their level."] = 3] = "were not feeling each other after" + villainQueen[0].getName() + " said that they do not see " + heroQueen[0].getName() +"'s drag at their level.";
        descHVearly[descHVearly["yelled at each other after a misunderstanding regarding this week's challenge."] = 4] = "yelled at each other after a misunderstanding regarding this week's challenge.";
        descHVearly[descHVearly["had a heated confrontation after " + heroQueen[0].getName() + " knew that " + villainQueen[0].getName() + "<br> was trying to put them on the other queen's bad side."] = 5] = "had a heated confrontation after " + heroQueen[0].getName() + " knew that " + villainQueen[0].getName() + "<br> was trying to put them on the other queen's bad side.";
        descHVearly[descHVearly["had an explosive fight after " + villainQueen[0].getName() + " said that " + heroQueen[0].getName() + " should go home unprovoked."] = 6] = "had an explosive fight after " + villainQueen[0].getName() + " said that " + heroQueen[0].getName() + " should go home unprovoked.";
    })(descHVearly || (descHVearly = {}));
        screen.createHorizontalLine();
        screen.createBigText("Notable Moments!");
        if (currentCast.length > 12 && heroCompeting == true && villainCompeting == true && randomNumber(0, 100) > 55) {
            screen.createImage(heroQueen[0].image, "brown");
            screen.createImage(villainQueen[0].image, "brown");
            screen.createParagraph("<b>" + heroQueen[0].getName() + " and " + villainQueen[0].getName() + " </b>" + descHVearly[randomNumber(0, 6)]);
            heroQueen.favoritism += 3;
            villainQueen.favoritism += 2;
        }
        else if (currentCast.length < 13 && currentCast.length > 6 && heroCompeting == true && villainCompeting == true && randomNumber(0, 100) > 55) {
            screen.createImage(heroQueen[0].image, "brown");
            screen.createImage(villainQueen[0].image, "brown");
            screen.createParagraph("<b>" + heroQueen[0].getName() + " and " + villainQueen[0].getName() + " </b>" + descHVlate[randomNumber(0, 8)]);
            heroQueen.favoritism += 2;
            villainQueen.favoritism -= 1;
        }
    }
    screen.createHorizontalLine();
    let queenOne = [];
    let queenTwo = [];
    let queenThree = [];
    let desc1;
    (function (desc1) {
        desc1[desc1["was being silent in the corner due to the competition's pressure."] = 0] = "was being silent in the corner due to the competition's pressure.";
        desc1[desc1["is being optimistic towards this week's results."] = 1] = "is being optimistic towards this week's results.";
        desc1[desc1["is not living about the commotion happening in the werkroom."] = 2] = "is not living about the commotion happening in the werkroom.";
        desc1[desc1["got emotional after receiving a video greeting from their family."] = 3] = "got emotional after receiving a video greeting from their family.";
        desc1[desc1["got emotional after getting an advice from this week's guest judge."] = 4] = "got emotional after getting an advice from this week's guest judge.";
        desc1[desc1["opened up about their personal struggle outside the show."] = 5] = "opened up about their personal struggle outside the show.";
        desc1[desc1["had an emotional breakdown."] = 6] = "had an emotional breakdown.";
        desc1[desc1["opened up about their identity."] = 7] = "opened up about their identity.";
        desc1[desc1["got mad because everybody were underestimating them."] = 8] = "got mad because everybody were underestimating them.";
        desc1[desc1["was feeling their oats."] = 9] = "was feeling their oats.";
        desc1[desc1["got overwhelmed after receiving a special greeting from one of their idols."] = 10] = "got overwhelmed after receiving a special greeting from one of their idols.";
        desc1[desc1["was being emotional due to them missing their lover outside the show."] = 11] = "was being emotional due to them missing their lover outside the show.";
        desc1[desc1["drank too much and started talking non-sense in the werkroom."] = 12] = "drank too much and started talking non-sense in the werkroom.";
        desc1[desc1["felt very attacked after their competitors tried to talk about their performance on the show so far."] = 13] = "felt very attacked after their competitors tried to talk about their performance on the show so far.";
        desc1[desc1["feels like their competitors are not seeing them as a threat."] = 14] = "feels like their competitors are not seeing them as a threat.";
        desc1[desc1["is feeling confident about their spot in the competition."] = 15] = "is feeling confident about their spot in the competition.";
    })(desc1 || (desc1 = {}));
    queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
    untuckedQueens.splice(untuckedQueens.indexOf(queenOne[0]), 1);
    screen.createImage(queenOne[0].image, "orange");
    screen.createParagraph("<b>" + queenOne[0].getName() + " </b>" + desc1[randomNumber(0, 15)]);
    let oneQueenSecond = false;
    if (currentCast.length > 6 && randomNumber(0, 100) > 45) {
        queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenOne[1]), 1);
        screen.createImage(queenOne[1].image, "orange");
        screen.createParagraph("<b>" + queenOne[1].getName() + " </b>" + desc1[randomNumber(0, 15)]);
        oneQueenSecond = true;
    }
    if (currentCast.length > 10 && randomNumber(0, 100) > 90 && oneQueenSecond == true) {
        queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenOne[2]), 1);
        screen.createImage(queenOne[1].image, "orange");
        screen.createParagraph("<b>" + queenOne[1].getName() + " </b>" + desc1[randomNumber(0, 15)]);
    }
    for (let i = 0; i < queenOne.length; i++) {
        untuckedQueens.push(queenOne[i]);
    }
    queenOne = [];
    for (let i = 0; i < currentCast.length; i++) {
        let trackPerf1 = currentCast[i].trackRecord.length - 1;
        let trackPerf2 = currentCast[i].trackRecord.length - 2;
        let trackPerf3 = currentCast[i].trackRecord.length - 3;
        let trackPerf4 = currentCast[i].trackRecord.length - 4;
        if (currentCast[i].trackRecord[trackPerf1] == "SAFE" && currentCast[i].trackRecord[trackPerf2] == "SAFE" && currentCast[i].trackRecord[trackPerf3] == "SAFE" && currentCast[i].trackRecord[trackPerf4] == "SAFE") {
            queenOne.push(currentCast[i]);
        }
    }
    let descSafe;
    (function (descSafe) {
        descSafe[descSafe["feeling unhappy being continuously safe."] = 0] = "feeling unhappy being continuously safe.";
        descSafe[descSafe["dying to receive precise critiques so that they can elevate their performance."] = 1] = "dying to receive precise critiques so that they can elevate their performance.";
        descSafe[descSafe["wishing to be on the top next week."] = 2] = "wishing to be on the top next week.";
        descSafe[descSafe["feeling frustrated for not being acknowledged for their performance."] = 3] = "feeling frustrated for not being acknowledged for their performance.";
        descSafe[descSafe["asking for suggestions and feedbacks from their competitors to get out of the safe zone."] = 4] = "asking for suggestions and feedbacks from their competitors to get out of the safe zone.";
        descSafe[descSafe["somewhat feeling fine by sailing thru on the competition so far."] = 5] = "somewhat feeling fine by sailing thru on the competition so far.";
        descSafe[descSafe["not expecting to be safe so many times in a row."] = 6] = "not expecting to be safe so many times in a row.";
        descSafe[descSafe["desperate to receive critiques that they consider purposely bombing a challenge."] = 7] = "desperate to receive critiques that they consider purposely bombing a challenge.";
        descSafe[descSafe["not happy by how their competitors view them by being constantly safe."] = 8] = "not happy by how their competitors view them by being constantly safe.";
    })(descSafe || (descSafe = {}));
    for (let i = 0; i < queenOne.length; i++) {
        screen.createImage(queenOne[i].image, "orange");
    }
    if (queenOne.length == 1) {
        screen.createParagraph("<b>" + queenOne[0].getName() + "</b> was " + descSafe[randomNumber(0, 8)]);
    }
    else if (queenOne.length > 1) {
    screen.createParagraph("", "queensSafe");
        let queensSafe = document.getElementById("queensSafe");
        for (let i = 0; i < queenOne.length; i++) {
            queensSafe.innerHTML += "<b>" + queenOne[i].getName() + ", </b>";
        }
        queensSafe.innerHTML += "were " + descSafe[randomNumber(0, 8)];
    }
    let desc2;
    (function (desc2) {
        desc2[desc2["talked about their hometowns."] = 0] = "talked about their hometowns.";
        desc2[desc2["are reflecting upon their performance this week."] = 1] = "are reflecting upon their performance this week.";
        desc2[desc2["have found out that they have some things in common."] = 2] = "have found out that they have some things in common.";
        desc2[desc2["talked about their relationship outside the show."] = 3] = "talked about their relationship outside the show.";
        desc2[desc2["silently threw shade at their fellow competitors."] = 4] = "silently threw shade at their fellow competitors.";
        desc2[desc2["are trying to console each other."] = 5] = "are trying to console each other.";
        desc2[desc2["had a little disagreement about a certain topic."] = 6] = "had a little disagreement about a certain topic.";
        desc2[desc2["criticizes each other's runway looks."] = 7] = "criticizes each other's runway looks.";
        desc2[desc2["are estimating their competitors' abilities."] = 8] = "are estimating their competitors' abilities.";
        desc2[desc2["are talking about who might be in danger for the weeks to come."] = 9] = "are talking about who might be in danger for the weeks to come.";
        desc2[desc2["are comparing their skills and performances inside and outside the show."] = 10] = "are comparing their skills and performances inside and outside the show.";
        desc2[desc2["had a serious one-on-one talk after what happened during this week's challenge."] = 11] = "had a serious one-on-one talk after what happened during this week's challenge.";
        desc2[desc2["had a heartfelt talk about their past experiences."] = 12] = "had a heartfelt talk about their past experiences.";
        desc2[desc2["shared their first impression towards each other."] = 13] = "shared their first impression towards each other.";
        desc2[desc2["had a serious talk about a political and social issue."] = 14] = "had a serious talk about a political and social issue.";
        desc2[desc2["are talking about their childhood celebrity crushes."] = 15] = "are talking about their childhood celebrity crushes.";
        desc2[desc2["are having some tension due to this week's challenge."] = 16] = "are having some tension due to this week's challenge.";
        desc2[desc2["are both underestimating each other."] = 17] = "are both underestimating each other.";
        desc2[desc2["are fixing each other's makeup."] = 18] = "are fixing each other's makeup.";
        desc2[desc2["got heated because of the pressure."] = 19] = "got heated because of the pressure.";
        desc2[desc2["are both feeling defeated due to their performance."] = 20] = "are both feeling defeated due to their performance.";
    })(desc2 || (desc2 = {}));
    queenOne = [];
    queenTwo = [];
    queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
    untuckedQueens.splice(untuckedQueens.indexOf(queenOne[0]), 1);
    queenTwo.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
    untuckedQueens.splice(untuckedQueens.indexOf(queenTwo[0]), 1);
    screen.createImage(queenOne[0].image, "orange");
    screen.createImage(queenTwo[0].image, "orange");
    screen.createParagraph("<b>" + queenOne[0].getName() + " and " + queenTwo[0].getName() + " </b>" + desc2[randomNumber(0, 20)]);
    let twoQueensSecond = false;
    let twoQueensThird = false;
    if (currentCast.length > 5 && randomNumber(0, 100) > 30) {
        queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenOne[1]), 1);
        queenTwo.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenTwo[1]), 1);
        screen.createImage(queenOne[1].image, "orange");
        screen.createImage(queenTwo[1].image, "orange");
        screen.createParagraph("<b>" + queenOne[1].getName() + " and " + queenTwo[1].getName() + " </b>" + desc2[randomNumber(0, 20)]);
        twoQueensSecond = true;
    }
    if (currentCast.length > 8 && randomNumber(0, 100) > 60 && twoQueensSecond == true) {
        queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenOne[2]), 1);
        queenTwo.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenTwo[2]), 1);
        screen.createImage(queenOne[2].image, "orange");
        screen.createImage(queenTwo[2].image, "orange");
        screen.createParagraph("<b>" + queenOne[2].getName() + " and " + queenTwo[2].getName() + " </b>" + desc2[randomNumber(0, 20)]);
        twoQueensThird = true;
    }
    if (currentCast.length > 12 && randomNumber(0, 100) > 90 && twoQueensThird == true && splitpremiere == false) {
        queenOne.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenOne[3]), 1);
        queenTwo.push(untuckedQueens[randomNumber(0, untuckedQueens.length - 1)]);
        untuckedQueens.splice(untuckedQueens.indexOf(queenTwo[3]), 1);
        screen.createImage(queenOne[3].image, "orange");
        screen.createImage(queenTwo[3].image, "orange");
        screen.createParagraph("<b>" + queenOne[3].getName() + " and " + queenTwo[3].getName() + " </b>" + desc2[randomNumber(0, 20)]);
    }
    for (let i = 0; i < queenOne.length; i++) {
        untuckedQueens.push(queenOne[i]);
        untuckedQueens.push(queenTwo[i]);
    }
    if (topQueens.length > 0) {
        let descTop;
    (function (descTop) {
        descTop[descTop["was thrilled to hear a lot of positive feedbacks from the judges."] = 0] = "was thrilled to hear a lot of positive feedbacks from the judges.";
        descTop[descTop["feels like they finally figured out how to control their weaknesses."] = 1] = "feels like they finally figured out how to control their weaknesses.";
        descTop[descTop["was surprised that they excelled in this week's challenge."] = 2] = "was surprised that they excelled in this week's challenge.";
        descTop[descTop["was happy to be at the top despite their emotional difficulties this week."] = 3] = "was happy to be at the top despite their emotional difficulties this week.";
        descTop[descTop["express utter joy because this was the challenge that they wanted to nail the most."] = 4] = "express utter joy because this was the challenge that they wanted to nail the most.";
        descTop[descTop["was receiving a lot of compliments for nailing this week's challenge."] = 5] = "was receiving a lot of compliments for nailing this week's challenge.";
        descTop[descTop["did not expect that they would be at the top over some other queen in the competition."] = 6] = "did not expect that they would be at the top over some other queen in the competition.";
        descTop[descTop["was feeling dull because no one acknowledges their killer performance for this week among their other competitors."] = 7] = "was feeling dull because no one acknowledges their killer performance for this week among their other competitors.";
        descTop[descTop["was hoping that their momentum would continue on moving forward."] = 8] = "was hoping that their momentum would continue on moving forward.";
        descTop[descTop["expressed how much they wanted to bag the win for this week's challenge."] = 9] = "expressed how much they wanted to bag the win for this week's challenge.";
        descTop[descTop["is acting overconfident regarding their performance for the week."] = 10] = "is acting overconfident regarding their performance for the week.";
        descTop[descTop["was pissed because everyone was implying that they should not have been at the top."] = 11] = "was pissed because everyone was implying that they should not have been at the top.";
        descTop[descTop["was thrilled on the fact that they have the chance to earn money for this week."] = 12] = "was thrilled on the fact that they have the chance to earn money for this week.";
    })(descTop || (descTop = {}));
    queenOne = [];
    queenTwo = [];
    queenOne.push(topQueens[randomNumber(0, topQueens.length - 1)]);
    topQueens.splice(topQueens.indexOf(queenOne[0]), 1);
    screen.createImage(queenOne[0].image, "orange");
    screen.createParagraph("<b>" + queenOne[0].getName() + "</b> " + descTop[randomNumber(0, 12)]);
    if (randomNumber(0, 100) > 75 && currentCast.length > 8 && topQueens.length > 1 || currentCast.length > 11 && topQueens.length > 1 || topQueens.length > 2) {
        queenTwo.push(topQueens[randomNumber(0, topQueens.length - 1)]);
        screen.createImage(queenTwo[0].image, "orange");
        screen.createParagraph("<b>" + queenTwo[0].getName() + "</b> " + descTop[randomNumber(0, 12)]);
    }
    }
    if (currentCast.length > 7 && randomNumber(0, 100 > 60)) {
        let queenAmount = 0;
        queenAmount += randomNumber(3, 5);
        shuffle(untuckedQueens);
        queenOne = [];
        let descKiki;
    (function (descKiki) {
        descKiki[descKiki["were talking about the queens that are hot out of drag and who they wanna kai-kai."] = 0] = "was talking about the queens that are hot out of drag and who they wanna kai-kai.";
        descKiki[descKiki["were talking about the hate crimes that are happening in the community."] = 1] = "was talking about the hate crimes that are happening in the community.";
        descKiki[descKiki["were talking about their relationships with their parents."] = 2] = "was talking about their relationships with their parents.";
        descKiki[descKiki["were talking about their standing in the competition so far."] = 3] = "was talking about their standing in the competition so far.";
        descKiki[descKiki["were talking about their favorite part of doing drag."] = 4] = "were talking about their favorite part of doing drag.";
        descKiki[descKiki["were talking about their ongoing problems before going into the show."] = 5] = "were talking about their ongoing problems before going into the show.";
        descKiki[descKiki["were talking about their fears."] = 6] = "were talking about their ongoing problems before going into the show.";
        descKiki[descKiki["were talking about the dumbest thing they did while in drag."] = 7] = "were talking about the dumbest thing they did while in drag.";
        descKiki[descKiki["were talking about the sisterhood they have built up so far."] = 8] = "were talking about the sisterhood they have built up so far.";
        descKiki[descKiki["were astonished by the commotion happening in the competition."] = 9] = "were astonished by the commotion happening in the competition.";
        descKiki[descKiki["were talking about their favorite part of the competition so far."] = 10] = "were talking about their favorite part of the competition so far.";
    })(descKiki || (descKiki = {}));
        for (let i = 0; i < queenAmount; i++) {
            queenOne.push(untuckedQueens[i]);
        }
        for (let i = 0; i < queenOne.length; i++) {
            screen.createImage(queenOne[i].image, "orange");
        }
        screen.createParagraph("", "queensKiki");
        let queensKiki = document.getElementById("queensKiki");
        for (let i = 0; i < queenOne.length; i++) {
            queensKiki.innerHTML += "<b>" + queenOne[i].getName() + ", </b>";
        }
        queensKiki.innerHTML += descKiki[randomNumber(0, 10)];
    }
    if (bottomQueens.length > 0) {
        let descBot;
    (function (descBot) {
        descBot[descBot["tried to bribe the winner of the week to save them in exchange of money."] = 0] = "tried to bribe the winner of the week to save them in exchange of money.";
        descBot[descBot["talked about how much they wanted to be in this competition and how they are not ready to go."] = 1] = "talked about how much they wanted to be in this competition and how they are not ready to go.";
        descBot[descBot["got a video message from home and it boosts up their will to fight to stay."] = 2] = "got a video message from home and it boosts up their will to fight to stay.";
        descBot[descBot["talked about how they don't want to disappoint people rooting for them outside the show."] = 3] = "talked about how they don't want to disappoint people rooting for them outside the show.";
        descBot[descBot["felt defeated after receiving harsh critiques from the judges."] = 4] = "felt defeated after receiving harsh critiques from the judges.";
        descBot[descBot["was being sarcastic about them being in the bottom."] = 5] = "was being sarcastic about them being in the bottom.";
        descBot[descBot["disagrees about the judges' critique about them this week."] = 6] = "disagrees about the judges' critique about them this week.";
        descBot[descBot["yelled and said that they will do whatever it takes to stay."] = 7] = "yelled and said that they will do whatever it takes to stay.";
        descBot[descBot["said that they needed to prove themself and that's why they deserve to stay."] = 8] = "said that they needed to prove themself and that's why they deserve to stay.";
        descBot[descBot["does not want to give up their spot in the competition and is pumped up to stay."] = 9] = "does not want to give up their spot in the competition and is pumped up to stay.";
        descBot[descBot["was so exhausted that they implied that they are ready to go home."] = 10] = "was so exhausted that they implied that they are ready to go home.";
        descBot[descBot["threaten their competitors that they should be scared of her because they are not going to hold anything back on a lipsync."] = 11] = "threaten their competitors that they should be scared of her because they are not going to hold anything back on a lipsync.";
        descBot[descBot["arrogantly said that they will demolish the other bottom queen in the lipsync for this week."] = 12] = "arrogantly said that they will demolish the other bottom queen in the lipsync for this week.";
        descBot[descBot["learned the song right away and practiced in front of the mirror."] = 13] = "learned the song right away and practiced in front of the mirror..";
        descBot[descBot["was confident about the lipsync song for this week."] = 14] = "was confident about the lipsync song for this week.";
        descBot[descBot["was extremely emotional and could barely fight for their chance to stay."] = 15] = "was extremely emotional and could barely fight for their chance to stay.";
    })(descBot || (descBot = {}));
    queenOne = [];
    queenTwo = [];
    queenOne.push(bottomQueens[randomNumber(0, bottomQueens.length - 1)]);
    bottomQueens.splice(bottomQueens.indexOf(queenOne[0]), 1);
    screen.createImage(queenOne[0].image, "orange");
    if (savequeen || throwqueen) {
    screen.createParagraph("<b>" + queenOne[0].getName() + "</b> " + descBot[randomNumber(0, 15)]);
    }
    else if (top3 || top4) {
    screen.createParagraph("<b>" + queenOne[0].getName() + "</b> " + descBot[randomNumber(1, 15)]);
    }
    else {
    screen.createParagraph("<b>" + queenOne[0].getName() + "</b> " + descBot[randomNumber(0, 10)]);
    }
    if (randomNumber(0, 100) > 65 && bottomQueens.length > 1 || throwqueen == false && bottomQueens.length > 1) {
        queenTwo.push(bottomQueens[randomNumber(0, bottomQueens.length - 1)]);
        screen.createImage(queenTwo[0].image, "orange");
        if (savequeen || throwqueen) {
        screen.createParagraph("<b>" + queenTwo[0].getName() + "</b> " + descBot[randomNumber(0, 15)]);
        }
        else if (top3 || top4) {
        screen.createParagraph("<b>" + queenTwo[0].getName() + "</b> " + descBot[randomNumber(1, 15)]);
        }
        else {
        screen.createParagraph("<b>" + queenTwo[0].getName() + "</b> " + descBot[randomNumber(0, 10)]);
        }
    }
    }
    if (premiereCounter <= 2 && (s12Premiere || porkchopPremiere || s6Premiere || s14Premiere || porkelimPremiere) && doneUntucked == false || premiereCounter <= 3 && triplePremiere && doneUntucked == false) {
    screen.createButton("Proceed", "newEpisode()")
    doneUntucked = true;
    }
    else {
    screen.createButton("Proceed", "contestantProgress()");
    }
}
//GENERAL CHALLENGES:
//Episode Identifiers:
let brandingChallenge = false;
let spoofChallenge = false;
let brandingCounter = false;
let spoofCounter = false;
class ActingChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["theather piece about "] = 0] = "theather piece about ";
            desc1[desc1["parody film about "] = 1] = "parody film about ";
            desc1[desc1["slasher film about "] = 2] = "slasher film about ";
            desc1[desc1["2000's inspired film about "] = 3] = "2000's inspired film about ";
            desc1[desc1["dramatic telenovela about "] = 4] = "dramatic telenovela about ";
            desc1[desc1["commercial about "] = 5] = "commercial about ";
            desc1[desc1["dragtastic spoof about "] = 6] = "dragtastic video spoof about ";
        })(desc1 || (desc1 = {}));
        let desc2;
        (function (desc2) {
            desc2[desc2["pop divas."] = 0] = "pop divas.";
            desc2[desc2["social media."] = 1] = "social media.";
            desc2[desc2["iconic chick flicks."] = 2] = "iconic chick flicks.";
            desc2[desc2["drag queens."] = 3] = "drag queens.";
            desc2[desc2["iconic celebrity feuds."] = 4] = "iconic celebrity feuds.";
            desc2[desc2["the future."] = 5] = "the future.";
            desc2[desc2["reality show stars."] = 6] = "reality show stars.";
            desc2[desc2["fashion houses."] = 7] = "fashion houses.";
            desc2[desc2["the works of John Waters."] = 8] = "the works of John Waters.";
            desc2[desc2["the baddest bitches in herstory."] = 9] = "the baddest bitches in herstory.";
            desc2[desc2["their inner saboteur."] = 10] = "their inner saboteur.";
        })(desc2 || (desc2 = {}));
        if (splitCastDuration == true) {
            description.innerHTML += "The queens will act in a " + desc1[randomNumber(0, 3)];
        }
        else if (splitCastDuration == false && currentCast.length > 8 && randomNumber(0, 100) >= 25 && spoofCounter == false || superstars && randomNumber(0, 100) > 75) {
            description.innerHTML += "The queens will act in a " + desc1[6];
            spoofCounter = true;
        }
        else if (splitCastDuration == false && currentCast.length < 9 && randomNumber(0, 100) >= 40 && brandingCounter == false || superstars && randomNumber(0, 100) > 55) {
            description.innerHTML += "The queens will act in a " + desc1[5];
            brandingCounter = true;
        }
        else {
            description.innerHTML += "The queens will act in a " + desc1[randomNumber(0, 3)];
        }
        if (description.innerHTML == "The queens will act in a commercial about ") {
            brandingChallenge = true;
        }
        else if (description.innerHTML == "The queens will act in a dragtastic video spoof about ") {
            spoofChallenge = true;
        }
        description.innerHTML += desc2[randomNumber(0, 10)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].getActing();
        }
        sortPerformances(currentCast);
    }
}
function actingChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new ActingChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    actingChallengeCounter++;
    if (brandingChallenge == true) {
        episodeChallenges.push("Branding");
    }
    else if (spoofChallenge == true) {
        episodeChallenges.push("Spoofs");
    }
    else {
        episodeChallenges.push("Acting");
    }
    brandingChallenge = false;
    spoofChallenge = false;
}
//Episode Identifiers:
let roastChallenge = false;
let despysChallenge = false;
let roastCounter = false;
let despysCounter = false;
class ComedyChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        if (ruvengeEpisode == false) {
        (function (desc1) {
            desc1[desc1["a stand-up comedy about "] = 0] = "a stand-up comedy about ";
            desc1[desc1["a one-woman show about "] = 1] = "a one-woman show about ";
            desc1[desc1["a parody skit about "] = 2] = "a parody skit about ";
            desc1[desc1["a hosting show about "] = 3] = "a hosting show about ";
            desc1[desc1["a roast about "] = 4] = "a roast about ";
            desc1[desc1["a parody awards show about "] = 5] = "a parody awards show about ";
        })(desc1 || (desc1 = {}));
        let desc2;
        (function (desc2) {
            desc2[desc2["themselves."] = 0] = "themselves.";
            desc2[desc2["Drag Race."] = 1] = "Drag Race.";
            desc2[desc2["first eliminated queens."] = 2] = "first eliminated queens.";
            desc2[desc2["past Drag Race winners."] = 3] = "past Drag Race winners.";
            desc2[desc2["RuPaul's career."] = 4] = "RuPaul's career.";
            desc2[desc2["iconic Untucked moments."] = 5] = "iconic Untucked moments.";
            desc2[desc2["90's girl groups."] = 6] = "90's girl groups.";
            desc2[desc2["the extra-special guest judge of the week."] = 7] = "the extra-special guest judge of the week.";
            desc2[desc2["past Miss Congeniality winners."] = 8] = "past Miss Congeniality winners.";
        })(desc2 || (desc2 = {}));
        if (splitCastDuration == true) {
            description.innerHTML += "The queens will participate in " + desc1[randomNumber(0, 3)];
        }
        else if (splitCastDuration == false && currentCast.length > 8 && randomNumber(0, 100) >= 35 && despysCounter == false || superstars && randomNumber(0, 100) > 75) {
            description.innerHTML += "The queens will participate in " + desc1[5];
            despysCounter = true;
        }
        else if (splitCastDuration == false && currentCast.length < 8 && randomNumber(0, 100) >= 45 && roastCounter == false || superstars && randomNumber(0, 100) > 55) {
            description.innerHTML += "The queens will participate in " + desc1[4];
            roastCounter = true;
        }
        else {
            description.innerHTML += "The queens will participate in " + desc1[randomNumber(0, 3)];
        }
        if (description.innerHTML == "The queens will participate in a roast about ") {
            roastChallenge = true;
        }
        else if (description.innerHTML == "The queens will participate in a parody awards show about ") {
            despysChallenge = true;
        }
        description.innerHTML += desc2[randomNumber(0, 8)];
        }
        else if (ruvengeEpisode == true) {
        description.innerHTML = "The queens are paired up to deliver a hilarious number! <br> And with an ultimate chance to get back into the competition!";
        }
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getComedy();
        sortPerformances(currentCast);
    }
}
function comedyChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new ComedyChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    comedyChallengeCounter++;
    if (roastChallenge == true) {
        episodeChallenges.push("Roast");
    }
    else if (despysChallenge == true) {
        episodeChallenges.push("Drag <br> Awards");
    }
    else {
        episodeChallenges.push("Comedy");
    }
    roastChallenge = false;
    despysChallenge = false;
}
class LiveChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["a concert inspired from "] = 0] = "a concert inspired from ";
            desc1[desc1["a headlining tour based on "] = 1] = "a headlining tour based on ";
            desc1[desc1["their own rendition of songs from "] = 2] = "their own rendition of songs from ";
            desc1[desc1["front of a live audience with songs from "] = 3] = "front of a live audience with songs from ";
            desc1[desc1["a cabaret performance based on "] = 4] = "a cabaret performance based on ";
        })(desc1 || (desc1 = {}));
        let desc2;
        (function (desc2) {
            desc2[desc2["different glam-rock icons."] = 0] = "different glam-rock icons.";
            desc2[desc2["past Coachella performers."] = 1] = "past Coachella performers.";
            desc2[desc2["a RuPaul album."] = 2] = "a RuPaul album.";
            desc2[desc2["different Disney soundtracks."] = 3] = "different Disney soundtracks.";
            desc2[desc2["the discography of ABBA."] = 4] = "the discography of ABBA.";
            desc2[desc2["Drag Race winners."] = 5] = "Drag Race winners.";
            desc2[desc2["80s queer icons."] = 6] = "80s queer icons.";
            desc2[desc2["the discography of Girls' Generation."] = 7] = "the discography of Girls' Generation.";
        })(desc2 || (desc2 = {}));
        description.innerHTML = "The queens will perform in " + desc1[randomNumber(0, 4)] + desc2[randomNumber(0, 7)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].getLive();
        }
        sortPerformances(currentCast);
    }
}
function liveChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new LiveChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    liveChallengeCounter++;
    episodeChallenges.push("Live");
}
class DanceChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["the herstory of Disco."] = 0] = "the herstory of Disco.";
            desc1[desc1["RuPaul's biography."] = 1] = "RuPaul's biography.";
            desc1[desc1["iconic dance films of 2000s."] = 2] = "iconic dance films of 2000s.";
            desc1[desc1["Drag Race."] = 3] = "Drag Race.";
            desc1[desc1["the Olympics."] = 4] = "the Olympics.";
            desc1[desc1["halftime headliners."] = 5] = "halftime headliners.";
            desc1[desc1["the herstory of Voguing."] = 6] = "the herstory of Voguing.";
            desc1 [desc1["the discography of LOONA and WJSN."] = 7] = "the discography of LOONA and WJSN.";
        })(desc1 || (desc1 = {}));
        description.innerHTML = "The queens will participate in a dance number about " + desc1[randomNumber(0, 7)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getDance();
        sortPerformances(currentCast);
    }
}
function danceChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new DanceChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    danceChallengeCounter++;
    episodeChallenges.push("Dance");
}
class GroupsChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        if (ruvengeEpisode == false) {
        (function (desc1) {
            desc1[desc1["their hometowns."] = 0] = "their hometowns.";
            desc1[desc1["HIV and AIDS awareness."] = 1] = "HIV and AIDS awareness.";
            desc1[desc1["racial discrimination."] = 2] = "racial discrimination.";
            desc1[desc1["the art of drag."] = 3] = "the art of drag.";
            desc1[desc1["their self-discovery journey."] = 4] = "their self-discovery journey.";
            desc1[desc1["the women of their lives."] = 5] = "the women of their lives.";
        })(desc1 || (desc1 = {}));
        description.innerHTML = "The queens will debut a girl group song about " + desc1[randomNumber(0, 5)];
        }
        else if (ruvengeEpisode == true) {
        description.innerHTML = "The queens will debut new sickening girl groups. <br> And an eliminated queen is gonna perform their way back to the race!";
        }
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].getGroups();
        }
        sortPerformances(currentCast);
    }
}
function groupsChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new GroupsChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    groupsChallengeCounter++;
    episodeChallenges.push("Girl <br> Groups");
}
class DesignChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        if (ruvengeEpisode == false) {
        (function (desc1) {
            desc1[desc1["trash."] = 0] = "trash.";
            desc1[desc1["clothing rejects."] = 1] = "clothing rejects.";
            desc1[desc1["a local dollar store."] = 2] = "a local dollar store items.";
            desc1[desc1["a specific color scheme."] = 3] = "a specific color scheme.";
            desc1[desc1["materials inspired by past Drag Race contestants."] = 4] = "materials inspired by past Drag Race contestants.";
            desc1[desc1["lost and unclaimed belongings."] = 5] = "lost and unclaimed belongings.";
            desc1[desc1["an afterparty junk haul."] = 6] = "an afterparty junk haul.";
            desc1[desc1["surplus shirts from a clothing apparel."] = 7] = "surplus shirts from a clothing apparel.";
            desc1[desc1["materials inspired from iconic movie posters."] = 8] = "materials inspired from iconic movie posters.";
            desc1[desc1["random mystery boxes"] = 9] = "random mystery boxes.";
        })(desc1 || (desc1 = {}));
        description.innerHTML = "The queens will make a fabulous look with items they obtained from " + desc1[randomNumber(0, 9)];
        }
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getDesign();
        sortPerformances(currentCast);
    }
}
function designChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new DesignChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = true;
    queensPerformances();
    designChallengeCounter++;
    episodeChallenges.push("Design");
}
//Episode Identifiers:
let debateChallenge = false;
let panelsChallenge = false;
let debateCounter = false;
let panelsCounter = false;
class ImprovChallenge {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["political debate."] = 0] = "political debate.";
            desc1[desc1["DragCon Panel extravaganza."] = 1] = "DragCon Panel extravaganza.";
            desc1[desc1["celebrity interview."] = 2] = "celebrity interview.";
            desc1[desc1["modern morning TV show."] = 3] = "modern morning TV show.";
            desc1[desc1["late-night news show."] = 4] = "late-night news show.";
            desc1[desc1["new Bossy Rossy episode."] = 5] = "new Bossy Rossy episode.";
            desc1[desc1["suggestive kids TV show."] = 6] = "suggestive kids TV show.";
            desc1[desc1["showbiz gossip show."] = 7] = "showbiz gossip show.";
            desc1[desc1["trashy wrestling match."] = 8] = "trashy wrestling match.";
            desc1[desc1["shady political interviews."] = 9] = "shady political interviews.";
        })(desc1 || (desc1 = {}));
        if (splitCastDuration == true) {
            description.innerHTML = "The queens will improvise in a " + desc1[randomNumber(2, 9)];
        }
        else if (splitCastDuration == false && randomNumber(0, 100) > 35 && debateCounter == false) {
            description.innerHTML = "The queens will improvise in a " + desc1[0];
            debateCounter = true;
            debateChallenge = true;
        }
        else if (splitCastDuration == false && currentCast.length > 7 && randomNumber(0, 100) > 45 && panelsCounter == false) {
            description.innerHTML = "The queens will improvise in a " + desc1[1];
            panelsCounter = true;
            panelsChallenge = true;
        }
        else {
            description.innerHTML = "The queens will improvise in a " + desc1[randomNumber(2, 9)];
        }
    }
    rankPerformances() {
    if (extraPremiere && episodeCount > 1 || !extraPremiere) {
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].getImprov();
        }
        sortPerformances(currentCast);
    }
    else if (extraPremiere && episodeCount == 1) {
        for (let i = 0; i < topQueens.length; i++) {
            topQueens[i].getImprov();
        }
        sortPerformances(topQueens);
    }
    }
}
function improvChallenge() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new ImprovChallenge();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    improvChallengeCounter++;
    if (debateChallenge == true) {
        episodeChallenges.push("Debates");
    }
    else if (panelsChallenge == true) {
        episodeChallenges.push("Panels");
    }
    else {
        episodeChallenges.push("Improv");
    }
    debateChallenge = false;
    panelsChallenge = false;
}
//TODO: team challenges here
//SPECIAL CHALLENGES:
class SnatchGame {
    generateDescription() {
        let description = document.querySelector("p#Description");
        description.innerHTML = "Today's challenge is... SNATCH GAME!! The queens will do funny celebrity impersonations!";
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getSnatch();
    }
}
function snatchGame() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new SnatchGame();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    snatchCounter = true;
    episodeChallenges.push("Snatch");
}
class RuCreate {
    generateDescription() {
        let description = document.querySelector("p#Description");
        description.innerHTML = "In today's challenge, the queens are tasked to create and design sickening characters with hilarious backstories!";
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getRucreate();
    }
}
function rucreate() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new RuCreate();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = true;
    rucreateCounter = true;
    queensPerformances();
    episodeChallenges.push("Creation");
}
class Rusical {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc;
        (function (desc) {
            desc[desc["trashy reality shows."] = 0] = "trashy reality shows.";
            desc[desc["a pop and gay icon."] = 1] = "a pop and gay icon.";
            desc[desc["a political story."] = 2] = "a political story.";
            desc[desc["iconic Drag Race moments."] = 3] = "iconic Drag Race moments.";
            desc[desc["different Broadway shows."] = 4] = "different Broadway shows.";
            desc[desc["Disney Princesses."] = 5] = "Disney Princesses.";
            desc[desc["RuPaul's music career."] = 6] = "RuPaul's music career.";
        })(desc || (desc = {}));
        description.innerHTML = "Today's challenge is... THE RUSICAL!! The queens will do a musical inspired from " + desc[randomNumber(0, 6)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getRusical();
    }
}
function rusical() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new Rusical();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    rusicalCounter = true;
    queensPerformances();
    episodeChallenges.push("Rusical");
}
class Decor {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc;
        (function (desc) {
            desc[desc["motels for drag queens."] = 0] = "motels for drag queens.";
            desc[desc["extra campy movie theater."] = 1] = "extra campy movie theater.";
            desc[desc["shady interactive museums."] = 2] = "shady interactive museums.";
            desc[desc["hyperpop disco bars."] = 3] = "hyperpop disco bars.";
            desc[desc["silly and sexy bakeries."] = 4] = "silly and sexy bakeries.";
            desc[desc["top-notch health care services."] = 5] = "top-notch health care services.";
            desc[desc["DIY high-class adult shops."] = 6] = "DIY high-class adult shops.";
        })(desc || (desc = {}));
        description.innerHTML = "For today's challenge, the queens are tasked to decorate and promote their very own " + desc[randomNumber(0, 6)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getDecor();
    }
}
function decor() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new Decor();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    decorCounter = true;
    queensPerformances();
    episodeChallenges.push("Decor");
}
class Pageant {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc;
        (function (desc) {
            desc[desc["their favorite hobbies."] = 0] = "their favorite hobbies.";
            desc[desc["an iconic pop diva."] = 1] = "an iconic pop diva.";
            desc[desc["old Hollywood glamour."] = 2] = "old Hollywood glamour.";
            desc[desc["underground club scenes."] = 3] = "underground club scenes.";
            desc[desc["their favorite movie characters."] = 4] = "their favorite movie characters.";
            desc[desc["sexy swimwears."] = 5] = "sexy swimwears.";
            desc[desc["their signature drag style."] = 6] = "their signature drag style.";
        })(desc || (desc = {}));
        description.innerHTML = "For today's challenge, the queens will compete in a pageant with looks inspired from their hometowns and " + desc[randomNumber(0, 6)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getPageant();
    }
}
function pageant() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new Pageant();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = true;
    pageantCounter = true;
    queensPerformances();
    episodeChallenges.push("Pageant");
}
function extravaganza() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("The queens will have to strut their stuff on the runway as they wear costumes representing their hometowns.");
    let challenge = new Pageant();
    challenge.rankPerformances();
    isDesignChallenge = true;
    pageantCounter = true;
    runwayPortion = true;
    queensPerformances();
    episodeChallenges.push("Pageant");
}
function extraQnA() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("The queens' wit are put into the test as they need to answer hilarious and non-sensical questions.");
    let challenge = new ImprovChallenge();
    challenge.rankPerformances();
    qnaPortion = true;
    queensPerformances();
}
class Makeover {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc;
        if (ruvengeEpisode == false) {
        (function (desc) {
            desc[desc["professional football players."] = 0] = "professional football players.";
            desc[desc["Drag Race superfans."] = 1] = "Drag Race superfans.";
            desc[desc["Gym Instructors."] = 2] = "Gym Instructors.";
            desc[desc["soon-to-be husbands."] = 3] = "soon-to-be husbands.";
            desc[desc["single fathers."] = 4] = "single fathers..";
            desc[desc["female social workers."] = 5] = "female social workers.";
            desc[desc["ex-veteran lesbians."] = 6] = "ex-veteran lesbians.";
            desc[desc["high school teens."] = 7] = "high school teens.";
            desc[desc["the eliminated queens."] = 8] = "the eliminated queens.";
            desc[desc["male blue-collar workers."] = 9] = "male blue-collar workers.";
            desc[desc["kids diagnosed with Cancer."] = 10] = "kids diagnosed with Cancer.";
        })(desc || (desc = {}));
        description.innerHTML = "It's time for a MAKEOVER! The queens are challenged to bring drag family resemblance and perform with " + desc[randomNumber(0, 10)];
        }
        else if (ruvengeEpisode == true) {
            description.innerHTML = "The queens are paired up and tasked to makeover each other. <br> For an ultimate chance of going back to the competition!";
        }
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getMakeover();
    }
}
function makeover() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new Makeover();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = true;
    makeoverCounter = true;
    queensPerformances();
    episodeChallenges.push("Makeover");
}
class Ball {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["a SNOW BALL, categories are: Faux Furrr, Ice Boss Realness, & Winter Tucker. The final look being made entirely from winter items."] = 0] = "a SNOW BALL, categories are: Faux Furrr, Ice Boss Realness, & Winter Tucker. The final look being made entirely from winter items.";
            desc1[desc1["a BALD BALL, categories are: Wig Snatched, Executive Hairless, & Crown & Glory. The final look being made entirely from rugs."] = 1] = "a BALD BALL, categories are: Wig Snatched, Executive Hairless, & Crown & Glory. The final look being made entirely from rugs.";
            desc1[desc1["an ANDROGYNY BALL, categories are: Bald Stunning, Femme Butch, & Bearded and Girdled. The final look being made entirely from laces, ropes, belts, and ribbons."] = 2] = "an ANDROGYNY BALL, categories are: Bald Stunning, Femme Butch, & Bearded and Girdled. The final look being made entirely from laces, ropes, belts, and ribbons.";
            desc1[desc1["a BALLER BALL, categories are: Bitch The Heat, First Class Madame, & Scrap Out Of It. The final look being made entirely from fake designer items."] = 3] = " a BALLER BALL, categories are: Bitch The Heat, First Class Madame, & Scrap Out Of It. The final look being made entirely from fake designer items.";
            desc1[desc1["a BDSM BALL, categories are: Nude and Crude, Queen of the Nightgown, & Leather Heather. The final look being made entirely from leather items."] = 4] = "a BDSM BALL, categories are: Nude and Crude, Queen of the Nightgown, & Leather Heather. The final look being made entirely from leather items.";
            desc1[desc1["an ASSEMBALL, categories are: Techno she betta do, Geometric Treat, & Fab Morning Wood. The final look being made entirely from wooden items."] = 5] = "an ASSEMBALL, categories are: Techno she betta do, Geometric Treat, & Fab Morning Wood. The final look being made entirely from wooden items.";
            desc1[desc1["a GOOF BALL, categories are: Cartoon Netwerk, Coveted Clown, & Fashion Prank. The final look being made entirely from prank items."] = 6] = "a GOOF BALL, categories are: Cartoon Netwerk, Coveted Clown, & Fashion Prank. The final look being made entirely from prank items.";
            desc1[desc1["the REALEST BALL ever, categories are: Cishet Realness, CEO Realness, & Military Realness. The final look being made entirely from camouflage items."] = 7] = "the REALEST BALL ever, categories are: Cishet Realness, CEO Realness, & Military Realness. The final look being made entirely from camouflage items.";
            desc1[desc1["the FIRST BALL on Earth, categories are: Fags and Goddesses, Homos Sapiens, & Closet Of Eden. The final look being made entirely from gardening items."] = 8] = "the FIRST BALL on Earth, categories are: Fags and Goddesses, Homos Sapiens, & Closet Of Eden. The final look being made entirely from gardening items.";
            desc1[desc1["the CHEAPEST BALL ever, categories are: Fastfood Hunty, PVC 'ya Gurl, & 3-Dollar Shopaholic. The final look being made entirely from their 3-Dollar Shopping Spree."] = 9] = "the CHEAPEST BALL ever, categories are: Fastfood Hunty, PVC 'ya Gurl, & 3-Dollar Shopaholic. The final look being made entirely from their 3-Dollar Shopping Spree.";
            desc1[desc1["the FUTURE OF BALL, categories are: Android 69, 3D Couture, & Area 51 Fashion Week. The final look being made entirely from different laboratory apparatus."] = 10] = "the FUTURE OF BALL, categories are: Android 69, 3D Couture, & Area 51 Fashion Week. The final look being made entirely from different laboratory apparatus.";
        })(desc1 || (desc1 = {}));
        description.innerHTML = "For today's challenge, we are throwing a ball! And it's not just any ball but " + desc1[randomNumber(0, 10)];
    };
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getBall();
    }
}
function ball() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new Ball();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = true;
    ballCounter = true;
    queensPerformances();
    episodeChallenges.push("Ball");
}
class Rumix {
    generateDescription() {
        let description = document.querySelector("p#Description");
        let desc1;
        (function (desc1) {
            desc1[desc1["one of RuPaul's singles!"] = 0] = "one of RuPaul's singles!";
            desc1[desc1["an original song!"] = 1] = "an original song!";
        })(desc1 || (desc1 = {}));
        description.innerHTML = "Today's challenge is... the rumix! The queens will make a verse and a choreography for " + desc1[randomNumber(0, 1)];
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getRumix();
    }
}
function rumix() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new Rumix();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    queensPerformances();
    episodeChallenges.push("Rumix");
}
class TalentShow {
    generateDescription() {
        let description = document.querySelector("p#Description");
        description.innerHTML = "This week challenge is a talent show! The queens will prepare for their own sickening numbers!";
    }
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getTalentShow();
    }
}
function talentshow() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Maxi-challenge!");
    challengeScreen.createParagraph("", "Description");
    let challenge = new TalentShow();
    challenge.generateDescription();
    challenge.rankPerformances();
    isDesignChallenge = false;
    talentshowCounter = true;
    queensPerformances();
    episodeChallenges.push("Talent");
}
//performance:
function queensPerformances() {
    let performanceScreen = new Scene();
    if (showdownFinale == false) {
    performanceScreen.createHorizontalLine();
    performanceScreen.createBigText("Queens' performances...");
    }
    if (extraPremiere && qnaPortion == false || !extraPremiere) {
    let slay = currentCast.filter(function (queen) { return queen.performanceScore < 6; });
    let great = currentCast.filter(function (queen) { return queen.performanceScore >= 6 && queen.performanceScore < 16; });
    let good = currentCast.filter(function (queen) { return queen.performanceScore >= 16 && queen.performanceScore < 26; });
    let bad = currentCast.filter(function (queen) { return queen.performanceScore >= 26 && queen.performanceScore < 31; });
    let flop = currentCast.filter(function (queen) { return queen.performanceScore >= 31; });
    createPerformanceDesc(slay, great, good, bad, flop);
    }
    else if (extraPremiere && qnaPortion == true) {
    let slay = topQueens.filter(function (queen) { return queen.performanceScore < 6; });
    let great = topQueens.filter(function (queen) { return queen.performanceScore >= 6 && queen.performanceScore < 16; });
    let good = topQueens.filter(function (queen) { return queen.performanceScore >= 16 && queen.performanceScore < 26; });
    let bad = topQueens.filter(function (queen) { return queen.performanceScore >= 26 && queen.performanceScore < 31; });
    let flop = topQueens.filter(function (queen) { return queen.performanceScore >= 31; });
    createPerformanceDesc(slay, great, good, bad, flop);
    }
    if (noneIndividual == true && isDesignChallenge == true)
        performanceScreen.createButton("Proceed", "groupsJudging()");
    else if (extraPremiere && episodeCount == 1 && runwayPortion == true) {
        performanceScreen.createButton("Proceed", "extraQAQueens()", "button2");
    }
    else if (extraPremiere && episodeCount == 1 && qnaPortion == true) {
        performanceScreen.createButton("Proceed", "extraLipsyncs()", "button2");
    }
    else if (showdownFinale == true)
        performanceScreen.createButton("Proceed", "runway()", "button3");
    else if (isDesignChallenge == false && secretEpisode == false && showdownFinale == false)
        performanceScreen.createButton("Proceed", "runway()", "button2");
    else if (isDesignChallenge == true && secretEpisode == true) {
        performanceScreen.createButton("Proceed", "results()");
    }
    else if (selectOutcome == true && isDesignChallenge == true && splitpremiere == false && splitCastDuration == false && secretEpisode == false && s9Premiere == false && pageantPremiere == false && extraPremiere == false && (showgirlShowdown == false || showgirlShowdown == true && forFinaleLS == false || showgirlShowdown == true && forFinaleLS == true && currentCast.length > 3) && ruvengeEpisode == false || (s9Premiere || pageantPremiere || extraPremiere) && selectOutcome == true && episodeCount > 1 && (showgirlShowdown == false || showgirlShowdown == true && forFinaleLS == false || showgirlShowdown == true && forFinaleLS == true && currentCast.length > 3) && ruvengeEpisode == false) {
        performanceScreen.createButton("Basic Judging", "judging()");
        performanceScreen.createButton("Top 2 Non-Elimination", "top2Choice()");
        if (currentCast.length > 6) {
        performanceScreen.createButton("Multiple-Way Lipsync", "halfWayElimChoice()");
        }
        if (currentCast.length > 7) {
        performanceScreen.createButton("LaLaPaRUZa Invitation", "floppedChoice()");
        }
    }
    else if (isDesignChallenge == true) {
        performanceScreen.createButton("Proceed", "judging()");
    }
    else
        performanceScreen.createButton("Proceed", "runway()", "button2");
}
//runway:
let colorCounter = 0;
let nightofCounter = 0;
let culturalCounter = 0;
let popCounter = 0;
function runwayCats() {
    let screen = new Scene();
    let colorRunway = false;
    let nightofRunway = false;
    let culturalRunway = false;
    let popRunway = false;
    let embellishmentRunway = false;
    let coutureRunway = false;
    let weirdRunway = false;
    let presentationRunway = false;
    let catIdentifier = randomNumber(0, 7);
    if (catIdentifier == 0 && colorCounter == 0) {
        colorRunway = true;
        colorCounter++;
    }
    else if (catIdentifier == 0 && colorCounter > 0) {
        embellishmentRunway = true;
    }
    else if (catIdentifier == 1 && nightofCounter == 0) {
        nightofRunway = true;
        nightofCounter++;
    }
    else if (catIdentifier == 1 && nightofCounter > 0) {
        coutureRunway = true;
    }
    else if (catIdentifier == 2 && culturalCounter < 2) {
        culturalRunway = true;
        culturalCounter++;
    }
    else if (catIdentifier == 2 && culturalCounter > 1) {
        weirdRunway = true;
    }
    else if (catIdentifier == 3 && popCounter < 2) {
        popRunway = true;
        popCounter++;
    }
    else if (catIdentifier == 3 && popCounter > 1) {
        presentationRunway = true;
    }
    else if (catIdentifier == 4) {
        embellishmentRunway = true;
    }
    else if (catIdentifier == 5) {
        coutureRunway = true;
    }
    else if (catIdentifier == 6) {
        weirdRunway = true;
    }
    else if (catIdentifier == 7) {
        presentationRunway = true;
    }
    let desc1;
    (function (desc1) {
        desc1[desc1["Red For Filth."] = 0] = "Red For Filth.";
        desc1[desc1["Orange You Happy To See Me?"] = 1] = "Orange You Happy To See Me?";
        desc1[desc1["Yellow, Let It Mellow."] = 2] = "Yellow, Let It Mellow.";
        desc1[desc1["Why Is She Green?"] = 3] = "Why Is She Green?";
        desc1[desc1["Blooming in Blue."] = 4] = "Blooming in Blue.";
        desc1[desc1["Ultra Violet."] = 5] = "Ultra Violet.";
        desc1[desc1["Petty in Pink."] = 6] = "Petty in Pink.";
        desc1[desc1["Brown Stunning."] = 7] = "Brown Stunning.";
        desc1[desc1["Monochromatica."] = 8] = "Monochromatica.";
        desc1[desc1["69 Shades of Grayscale."] = 9] = "69 Shades of Grayscale.";
        desc1[desc1["Neon-oh, She Betta Do!"] = 10] = "Neon-oh, She Betta Do!.";
        desc1[desc1["I Ain't Your Beige."] = 11] = "I Ain't Your Beige.";
    })(desc1 || (desc1 = {}));
    let desc2;
    (function (desc2) {
        desc2[desc2["Night of 1000 Lady Gaga."] = 0] = "Night of 1000 Lady Gaga.";
        desc2[desc2["Night of 1000 Madonna."] = 1] = "Night of 1000 Madonna.";
        desc2[desc2["Night of 1000 Britney Spears."] = 2] = "Night of 1000 Britney Spears.";
        desc2[desc2["Night of 1000 Katy Perry."] = 3] = "Night of 1000 Katy Perry.";
        desc2[desc2["Night of 1000 Mariah Carey."] = 4] = "Night of 1000 Mariah Carey.";
        desc2[desc2["Night of 1000 Judy Garland."] = 5] = "Night of 1000 Judy Garland.";
        desc2[desc2["Night of 1000 Diana Ross."] = 6] = "Night of 1000 Diana Ross.";
        desc2[desc2["Night of 1000 Ariana Grande."] = 7] = "Night of 1000 Ariana Grande.";
        desc2[desc2["Night of 1000 Miley Cyrus."] = 8] = "Night of 1000 Miley Cyrus.";
        desc2[desc2["Night of 1000 Whitney Houston."] = 9] = "Night of 1000 Whitney Houston.";
        desc2[desc2["Night of 1000 Rihanna."] = 10] = "Night of 1000 Rihanna.";
        desc2[desc2["Night of 1000 Cher."] = 11] = "Night of 1000 Cher.";
    })(desc2 || (desc2 = {}));
    let desc3;
    (function (desc3) {
        desc3[desc3["Only in my Country."] = 0] = "Only in my Country.";
        desc3[desc3["Drag is Political."] = 1] = "Drag is Political.";
        desc3[desc3["Sis, Resist!"] = 2] = "Sis, Resist!";
        desc3[desc3["How's Your Roots?"] = 3] = "How's Your Roots?";
        desc3[desc3["Support Local."] = 4] = "Support Local.";
        desc3[desc3["What Are You Serving?"] = 5] = "What Are You Serving?";
        desc3[desc3["Petty in Pink."] = 6] = "Petty in Pink.";
        desc3[desc3["Celebrate Pride."] = 7] = "Celebrate Pride.";
        desc3[desc3["Frights & Folklore."] = 8] = "Frights & Folklore.";
        desc3[desc3["Ancient Drag."] = 9] = "Ancient Drag.";
        desc3[desc3["Thee Matriarch."] = 10] = "Thee Matriarch.";
        desc3[desc3["National Symbols."] = 11] = "National Symbols.";
    })(desc3 || (desc3 = {}));
    let desc4;
    (function (desc4) {
        desc4[desc4["RENNAISANCE OF FAGS."] = 0] = "RENNAISANCE OF FAGS.";
        desc4[desc4["What's Over That Rainbow, Judy?"] = 1] = "What's Over That Rainbow, Judy?";
        desc4[desc4["Bling It On!"] = 2] = "Bling It On!";
        desc4[desc4["Fairytales of Gayness."] = 3] = "Fairytales of Gayness.";
        desc4[desc4["Make It POP Art."] = 4] = "Make It POP Art.";
        desc4[desc4["What A Gay Way To Die."] = 5] = "What A Gay Way To Die.";
        desc4[desc4["Dragsperate Housewives."] = 6] = "Dragsperate Housewives.";
        desc4[desc4["Filthy Gorgeous."] = 7] = "Filthy Gorgeous.";
        desc4[desc4["Life In Plastic."] = 8] = "Life In Plastic.";
        desc4[desc4["BUTCHED!"] = 9] = "BUTCHED!.";
        desc4[desc4["Bombshells Away!"] = 10] = "Bombshells Away!";
        desc4[desc4["Y2K, Why Too Gay?"] = 11] = "Y2K, Why Too Gay?";
    })(desc4 || (desc4 = {}));
    let desc5;
    (function (desc5) {
        desc5[desc5["Fascinating Fascinators."] = 0] = "Fascinating Fascinators.";
        desc5[desc5["Mad Hats."] = 1] = "Mad Hats.";
        desc5[desc5["Chic Clips."] = 2] = "Chic Clips.";
        desc5[desc5["Scarf Out Of It!"] = 3] = "Scarf Out Of It!";
        desc5[desc5["Clash of the Patterns."] = 4] = "Clash of the Patterns.";
        desc5[desc5["Caftan Eleganza."] = 5] = "Caftan Eleganza.";
        desc5[desc5["Trains for Days."] = 6] = "Trains for Days.";
        desc5[desc5["A Trick Up My Sleeve."] = 7] = "A Trick Up My Sleeve.";
        desc5[desc5["Glove It!"] = 8] = "Glove It!";
        desc5[desc5["Bead It!"] = 9] = "Bead It!";
        desc5[desc5["Feather You Like It Or Not."] = 10] = "Feather You Like It Or Not.";
        desc5[desc5["Rhinestoned For The Gods."] = 11] = "Rhinestoned For The Gods.";
        desc5[desc5["Such A Velour."] = 12] = "Such A Velour.";
        desc5[desc5["We're Here, We're Sheer."] = 13] = "We're Here, We're Sheer.";
        desc5[desc5["Lamé, You Stay."] = 14] = "Lamé, You Stay.";
        desc5[desc5["Bitch Fleece!."] = 15] = "Bitch Fleece!";
        desc5[desc5["Serving Facekini."] = 16] = "Serving Facekini.";
        desc5[desc5["Boots The House Down."] = 17] = "Boots The House Down.";
        desc5[desc5["Fasten Your Sick Belts."] = 18] = "Fasten Your Sick Belts.";
    })(desc5 || (desc5 = {}));
    let desc6;
    (function (desc6) {
        desc6[desc6["Spring Has Sprung."] = 0] = "Spring Has Sprung.";
        desc6[desc6["Oh My Goth!"] = 1] = "Oh My Goth!";
        desc6[desc6["Ruffles, Henny."] = 2] = "Ruffles, Henny.";
        desc6[desc6["Frill Of It All."] = 3] = "Frill Of It All.";
        desc6[desc6["Street Couture."] = 4] = "Street Couture.";
        desc6[desc6["Birth Stoned On The Runway."] = 5] = "Birth Stone On The Runway.";
        desc6[desc6["What's Your Sign?"] = 6] = "What's Your Sign?";
        desc6[desc6["Flower Power."] = 7] = "Flower Power.";
        desc6[desc6["Lady of the Night."] = 8] = "Lady of the Night.";
        desc6[desc6["Pre-Herstoric."] = 9] = "Pre-Herstoric.";
        desc6[desc6["Your Disco Fits You."] = 10] = "Your Disco Fits You.";
        desc6[desc6["Mermaid Eleganza."] = 11] = "Mermaid Eleganza.";
        desc6[desc6["Heavenly Bodies."] = 12] = "Heavenly Bodies.";
        desc6[desc6["Pads Extreme."] = 13] = "Pads Extreme.";
        desc6[desc6["Let There Be Curves."] = 14] = "Let There Be Curves.";
        desc6[desc6["Beachgirl Bonanza."] = 15] = "Beachgirl Bonanza.";
        desc6[desc6["Geeks On The Runway."] = 16] = "Geeks On The Runway.";
        desc6[desc6["Stripes Couture."] = 17] = "Stripes Couture.";
        desc6[desc6["Loving My Skin."] = 18] = "Loving My Skin.";
    })(desc6 || (desc6 = {}));
    let desc7;
    (function (desc7) {
        desc7[desc7["The Animal Kingdom."] = 0] = "The Animal Kingdom.";
        desc7[desc7["Queens in Suits."] = 1] = "Queens in Suits.";
        desc7[desc7["Mythical Creatures."] = 2] = "Mythical Creatures.";
        desc7[desc7["Bitchcraft!"] = 3] = "Bitchcraft!";
        desc7[desc7["Sex Sells."] = 4] = "Sex Sells.";
        desc7[desc7["Ugliest Dress Ever."] = 5] = "Ugliest Dress Ever.";
        desc7[desc7["Spike It Up!"] = 6] = "Spike It Up!";
        desc7[desc7["Ring My Bell Bottoms."] = 7] = "Ring My Bell Bottoms.";
        desc7[desc7["Animézing!"] = 8] = "Animézing!";
        desc7[desc7["Bead It!"] = 9] = "OOPS! Fashionable Fashion Fails.";
        desc7[desc7["OOPS! Fashionable Fails."] = 10] = "OOPS! Fashionable Fashion Fails.";
        desc7[desc7["Fry Your Freak Frag."] = 11] = "Fry Your Freak Frag.";
        desc7[desc7["It Started With A Kitsch."] = 12] = "It Started With A Kitsch.";
        desc7[desc7["Drag Orchestra."] = 13] = "Drag Orchestra.";
        desc7[desc7["Soak It Up."] = 14] = "Soak It Up.";
        desc7[desc7["Claws Out The Runway."] = 15] = "Claws Out The Runway.";
        desc7[desc7["E.T. Couture."] = 16] = "E.T. Couture.";
        desc7[desc7["Biblical Monsters."] = 17] = "Biblical Monsters.";
        desc7[desc7["Dystopian Drag."] = 18] = "Dystopian Drag.";
    })(desc7 || (desc7 = {}));
    let desc8;
    (function (desc8) {
        desc8[desc8["2 Looks In 1."] = 0] = "2 Looks In 1.";
        desc8[desc8["Ruveal After Ruveal After Ruveal."] = 1] = "Ruveal After Ruveal After Ruveal.";
        desc8[desc8["Wait 'Til You See It From The Back."] = 2] = "Wait 'Til You See It From The Back.";
        desc8[desc8["Strip Tease."] = 3] = "Strip Tease.";
        desc8[desc8["Here Comes The Wig Reveal!"] = 4] = "Here Comes The Wig Reveal!";
        desc8[desc8["Tutu Much."] = 5] = "Tutu Much.";
        desc8[desc8["Good Girl Gone Bad."] = 6] = "Good Girl Gone Bad.";
        desc8[desc8["Roller Queens."] = 7] = "Roller Queens.";
        desc8[desc8["Superhero Transformations!"] = 8] = "Superhero Transformations!";
        desc8[desc8["Earth, Wind, And Fire."] = 9] = "Earth, Wind, And Fire.";
        desc8[desc8["Gowns To Dance To."] = 10] = "Gowns To Dance To.";
        desc8[desc8["Lights Off, Lights On."] = 11] = "Lights Off, Lights On.";
        desc8[desc8["Planet Of The Capes."] = 12] = "Planet Of The Capes.";
        desc8[desc8["Release The Bitch."] = 13] = "Release The Bitch.";
        desc8[desc8["Veiled It."] = 14] = "Veiled It.";
        desc8[desc8["Upside Down."] = 15] = "Upside Down.";
        desc8[desc8["Freak Show."] = 16] = "Freak Show.";
        desc8[desc8["Prison Break, Henny."] = 17] = "Prison Break, Henny.";
        desc8[desc8["Beauty In The Beast."] = 18] = "Beauty In The Beast.";
    })(desc8 || (desc8 = {}));
    if (randomNumber(0, 100) > 40 && (all_stars || lipsync_assassin || vstheworld || throwqueen) && colorRunway == true) {
        screen.createParagraph("The Category is: <b>" + "RuDemption Runway" + " </b>");
    }
    else if (colorRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc1[randomNumber(0, 11)] + " </b>");
    }
    else if (nightofRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc2[randomNumber(0, 11)] + " </b>");
    }
    else if (culturalRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc3[randomNumber(0, 11)] + " </b>");
    }
    else if (popRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc4[randomNumber(0, 11)] + " </b>");
    }
    else if (embellishmentRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc5[randomNumber(0, 18)] + " </b>");
    }
    else if (coutureRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc6[randomNumber(0, 18)] + " </b>");
    }
    else if (weirdRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc7[randomNumber(0, 18)] + " </b>");
    }
    else if (presentationRunway == true) {
        screen.createParagraph("The Category is: <b>" + desc8[randomNumber(0, 18)] + " </b>");
    }
}
function runway() {
    let runwayScreen = new Scene();
    runwayScreen.createHorizontalLine();
    runwayScreen.createBigText("Runway!");
    let desc1;
    (function (desc1) {
        desc1[desc1["I'm Here, I'm Queer"] = 0] = "I'm Here, I'm Queer";
        desc1[desc1["Club Kid Couture"] = 1] = "Club Kid Couture";
        desc1[desc1["She's a Masterpiece"] = 2] = "She's a Masterpiece";
        desc1[desc1["Me, Another Me"] = 3] = "Me, Another Me";
        desc1[desc1["One For The Books"] = 4] = "One For The Books";
        desc1[desc1["If Looks Could Kill"] = 5] = "If Looks Could Kill";
    })(desc1 || (desc1 = {}));
    let desc2;
    (function (desc2) {
        desc2[desc2["Statements On The Catwalk"] = 0] = "Statements On The Catwalk";
        desc2[desc2["Going Back To My Roots"] = 1] = "Going Back To My Roots";
        desc2[desc2["Life, Liberty, and Drag"] = 2] = "Life, Liberty, and Drag";
        desc2[desc2["What Dreams Are Made Of"] = 3] = "What Dreams Are Made Of";
        desc2[desc2["HUNapologetic"] = 4] = "HUNapologetic";
        desc2[desc2["This Is Change"] = 5] = "This Is Change";
    })(desc2 || (desc2 = {}));
    let desc3;
    (function (desc3) {
        desc3[desc3["Reigning Royalty"] = 0] = "Reigning Royalty";
        desc3[desc3["Rise & Shine"] = 1] = "Rise & Shine";
        desc3[desc3["Gays Of Throne"] = 2] = "Gays Of Throne";
        desc3[desc3["Glamorous Jaw-Droppers"] = 3] = "Glamorous Jaw-Droppers";
        desc3[desc3["Gemstoned For The Gods"] = 4] = "Gemstoned For The Gods";
        desc3[desc3["Fearless Heiress"] = 5] = "Fearless Heiress";
    })(desc3 || (desc3 = {}));
    if (showdownFinale == true) {
        let button3 = document.querySelector("button#button3");
        button3.remove();
        runwayScreen.createBold("Our Final Five brings it to the runway with their 3 Different Ball Looks. <br> The Categories Are:");
        runwayScreen.createParagraph("<i> " + desc1[randomNumber(0, 5)] + " <br> " + desc2[randomNumber(0, 5)] + " <br> " + desc3[randomNumber(0, 5)] + " </i>");
    }
    else if (showdownFinale == false) {
    let button2 = document.querySelector("button#button2");
    button2.remove();
    runwayScreen.createParagraph("The queens will bring it to the runway!");
    if (currentCast.length > 4 && !splitpremiere && (top3 || all_stars || lipsync_assassin || throwqueen || vstheworld || superstars) || currentCast.length > 5 && !splitpremiere && !team || currentCast.length > 2 && !splitpremiere && team || splitpremiere == false && pairings == true)
        runwayCats();
    else if (splitpremiere == true)
        runwayScreen.createParagraph("<b> The theme is... signature showstoppers! </b>");
    else if (currentCast.length == 3 && top3  && showgirlShowdown == false && pairings == false || currentCast.length == 4 && top3 && showgirlShowdown == true && pairings == false || currentCast.length == 5 && savequeen && pairings == false || currentCast.length == 5 && top4 && pairings == false || currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen || vstheworld) || currentCast.length == 2 && team)
        runwayScreen.createParagraph("<b> The theme is... drag excellence! </b>");
    }
    if (pairings == true) {
    for (let i = 0; i < castHolder.length; i++)
        castHolder[i].getRunway();
    let slay = castHolder.filter(function (queen) { return queen.runwayScore < 6; });
    let great = castHolder.filter(function (queen) { return queen.runwayScore >= 6 && queen.runwayScore < 16; });
    let good = castHolder.filter(function (queen) { return queen.runwayScore >= 16 && queen.runwayScore < 26; });
    let bad = castHolder.filter(function (queen) { return queen.runwayScore >= 26; });
    createRunwayDesc(slay, great, good, bad);
    }
    else if (pairings == false) {
    for (let i = 0; i < currentCast.length; i++)
        currentCast[i].getRunway();
    let slay = currentCast.filter(function (queen) { return queen.runwayScore < 6; });
    let great = currentCast.filter(function (queen) { return queen.runwayScore >= 6 && queen.runwayScore < 16; });
    let good = currentCast.filter(function (queen) { return queen.runwayScore >= 16 && queen.runwayScore < 26; });
    let bad = currentCast.filter(function (queen) { return queen.runwayScore >= 26; });
    createRunwayDesc(slay, great, good, bad);
    }
    if (noneIndividual == true || pairings == true)
        runwayScreen.createButton("Proceed", "groupsJudging()");
    else if (showdownFinale == true)
        runwayScreen.createButton("Proceed", "top2Showdown()");
    else if (currentCast.length > 4 && secretEpisode == false && selectOutcome == false || currentCast.length > 4 && secretEpisode == false && selectOutcome == true && (all_stars || lipsync_assassin || vstheworld || superstars || team || throwqueen))
        runwayScreen.createButton("Proceed", "judging()");
    else if (secretEpisode == true) {
        runwayScreen.createButton("Proceed", "results()");
    }
    else if (currentCast.length == 4 && splitpremiere == true)
        runwayScreen.createButton("Proceed", "judging()");
    else if (currentCast.length == 4 && top3 && selectOutcome == false || currentCast.length == 4 && top3 && selectOutcome == true && showgirlShowdown == true)
        runwayScreen.createButton("Proceed", "judging()");
    else if (currentCast.length == 4 && team)
        runwayScreen.createButton("Proceed", "judging()");
    else if (currentCast.length == 4 && top4 && splitpremiere == true)
        runwayScreen.createButton("Proceed", "judging()");
    else if (currentCast.length == 3 && team)
        runwayScreen.createButton("Proceed", "judging()");
    else if (currentCast.length == 3 && forFinaleLS == false && top3)
        runwayScreen.createButton("Proceed", "finaleTop3()");
    else if (currentCast.length == 3 && forFinaleLS == true && top3)
        runwayScreen.createButton("Proceed", "finaleJudging()");
    else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen || vstheworld) && juryTwist == false && (goldticket == false || ticketSave == true))
        runwayScreen.createButton("Proceed", "finaleASJudging()");
    else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen || vstheworld) && juryTwist == true && (goldticket == false || ticketSave == true))
        runwayScreen.createButton("Proceed", "finaleASJury()");
    else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen || vstheworld) && juryTwist == false && goldticket == true && ticketSave == false)
        runwayScreen.createButton("Proceed", "finaleASChoc()");
    else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen || vstheworld) && juryTwist == true && goldticket == true && ticketSave == false)
        runwayScreen.createButton("Proceed", "finaleASChoc()");
    else if (currentCast.length == 2 && team)
        runwayScreen.createButton("Proceed", "finaleTeamJudging()");
    else if (selectOutcome == true && (splitpremiere == true || splitCastDuration == true))
        runwayScreen.createButton("Proceed", "judging()");
    else if (selectOutcome == true && secretEpisode == true)
        runwayScreen.createButton("Proceed", "results()");
    else if (selectOutcome == true && splitpremiere == false && splitCastDuration == false && secretEpisode == false && showgirlShowdown == true && currentCast.length == 5)
        runwayScreen.createButton("Proceed", "judging()");
    else if (selectOutcome == true && splitpremiere == false && splitCastDuration == false && secretEpisode == false && showgirlShowdown == false && (top3 || top4 || savequeen) || selectOutcome == true && splitpremiere == false && splitCastDuration == false && secretEpisode == false && showgirlShowdown == true && currentCast.length > 5 && (top3 || top4 || savequeen)) {
        runwayScreen.createButton("Basic Judging", "judging()");
        runwayScreen.createButton("Top 2 Non-Elimination", "top2Choice()");
        if (currentCast.length > 6) {
        runwayScreen.createButton("Multiple-Way Lipsync", "halfWayElimChoice()");
        }
        if (currentCast.length > 7) {
        runwayScreen.createButton("LaLaPaRUZa Invitation", "floppedChoice()");
        }
    }
}
//Q&A Segment
function extraQAQueens() {
    let screen = new Scene();
    screen.createHorizontalLine();
    if (totalCastSize % 2 == 0)
    screen.createBigText("The Top " + totalCastSize / 2 + " Queens!");
    else if (totalCastSize % 2 == 1)
    screen.createBigText("The Top " + (totalCastSize + 1) / 2 + " Queens!");
    let button2 = document.querySelector("button#button2");
    button2.remove();
    let halfTop = 0;
    if (totalCastSize % 2 == 0)
    halfTop += totalCastSize / 2;
    else if (totalCastSize % 2 == 1)
    halfTop += (totalCastSize + 1) / 2;
    //add half of queens to the top and the rest is safe
    currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
    for (let i = 0; i < halfTop; i++) {
        topQueens.push(currentCast[i]);
    }
    for (let i = halfTop; i < currentCast.length; i++) {
        currentCast[i].addToTrackRecord("SAFE");
        currentCast[i].ppe += 3;
    }
    for (let i = 0; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image, "royalblue");
    }
    screen.createBold("", "nextRoundQueens");
    let nextRoundQueens = document.getElementById("nextRoundQueens");
    for (let i = 0; i < topQueens.length; i++) {
        nextRoundQueens.innerHTML += (topQueens[i].getName() + ", ");
    }
    nextRoundQueens.innerHTML += "you are all going to advance to our Q&A Portion."
    runwayPortion = false;
    screen.createButton("Proceed", "extraQnA()");
}
//Smackdown Segment
function extraLipsyncs() {
    let screen = new Scene();
    screen.createHorizontalLine();
    screen.createBigText("The Top 4!");
    let button2 = document.querySelector("button#button2");
    button2.remove();
    let halfTop = 0;
    if (currentCast.length % 2 == 0)
    halfTop += currentCast.length / 2;
    else if (currentCast.length % 2 == 1)
    halfTop += (currentCast.length + 1) / 2;
    //add 4 queens to the top and the rest is safe
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    for (let i = 0; i < 4; i++) {
        pageantLS.push(topQueens[i]);
    }
    for (let i = 4; i < halfTop; i++) {
        topQueens[i].addToTrackRecord("TOP" + halfTop);
        topQueens[i].ppe += 4;
        topQueens[i].favoritism += 1;
    }
    for (let i = 0; i < pageantLS.length; i++) {
        screen.createImage(pageantLS[i].image, "royalblue");
    }
    screen.createBold("", "nextRoundQueens");
    let nextRoundQueens = document.getElementById("nextRoundQueens");
    for (let i = 0; i < pageantLS.length; i++) {
        nextRoundQueens.innerHTML += (pageantLS[i].getName() + ", ");
    }
    nextRoundQueens.innerHTML += "you are all going to advance to our lipsync smackdown for the win."
    qnaPortion = false;
    screen.createButton("Proceed", "extraSmackdown()");
}
//Smackdown For The Win
function extraSmackdown() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Smackdown For The Win!");
    screen.createParagraph("Our Top 4 Queens will impress us with their lipsync prowess as they compete for the first win of the season!");
    screen.createHorizontalLine();
    shuffle(pageantLS);
    let pageantSecond = [];
    pageantSecond.push(pageantLS[2]);
    pageantSecond.push(pageantLS[3]);
    pageantLS.splice(2, 2);
    screen.createBigText("Let The Smackdown Begin!")
    for (let i = 0; i < pageantLS.length; i++) {
        pageantLS[i].getASLipsync();
    }
    screen.createImage(pageantLS[0].image, "orange");
    screen.createImage(pageantLS[1].image, "orange");
    screen.createBold(pageantLS[0].getName() + ", " + pageantLS[1].getName() + ", the time has come for you to lipsync for the win!!! <br> Good luck and don't fuck it up!");
    lsSong();
    pageantLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    screen.createImage(pageantLS[0].image, "pink");
    screen.createBold(pageantLS[0].getName() + ", condragulations! You are moving on to our final lipsync for the win!");
    screen.createImage(pageantLS[1].image, "darkgray");
    screen.createParagraph(pageantLS[1].getName() + ", you are safe to slay another day! You may now join your sisters.");
    top2.push(pageantLS[0]);
    pageantLS[1].addToTrackRecord("TOP4");
    pageantLS[1].ppe += 4.5;
    pageantLS[1].favoritism += 2;
    screen.createHorizontalLine();
    for (let i = 0; i < pageantSecond.length; i++) {
        pageantSecond[i].getASLipsync();
    }
    screen.createImage(pageantSecond[0].image, "orange");
    screen.createImage(pageantSecond[1].image, "orange");
    screen.createBold(pageantSecond[0].getName() + ", " + pageantSecond[1].getName() + ", the time has come for you to lipsync for the win!!! <br> Good luck and don't fuck it up!");
    lsSong();
    pageantSecond.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    screen.createImage(pageantSecond[0].image, "pink");
    screen.createBold(pageantSecond[0].getName() + ", condragulations! You are moving on to our final lipsync for the win!");
    screen.createImage(pageantSecond[1].image, "darkgray");
    screen.createParagraph(pageantSecond[1].getName() + ", you are safe to slay another day! You may now join your sisters.");
    top2.push(pageantSecond[0]);
    pageantSecond[1].addToTrackRecord("TOP4");
    pageantSecond[1].ppe += 4.5;
    pageantSecond[1].favoritism += 2;
    screen.createHorizontalLine();
    screen.createBold("Our final smackdown awaits!");
    for (let i = 0; i < top2.length; i++)
    screen.createImage(top2[i].image, "cyan");
    screen.createBold("Who's gonna win the Miss C.U.N.T. title and bag the first win of the season?")
    screen.createButton("Proceed", "top2Lipsync()");
}
//helper functions
////create next challenge
function randomChallenge(challenges, miniChallengeScreen) {
    for (let i = 0; i < currentCast.length; i++){
        currentCast[i].episodesOn++;
    }
    let currentChallenge = challenges[randomNumber(0, challenges.length - 1)];
    if (currentChallenge === lastChallenge && currentCast.length != totalCastSize) {
        currentChallenge = challenges[randomNumber(0, challenges.length - 1)];
        lastChallenge = currentChallenge;
        miniChallengeScreen.createButton("Random", currentChallenge, "button18");
    }
    else {
        lastChallenge = currentChallenge;
        miniChallengeScreen.createButton("Random", currentChallenge, "button18");
    }
}
function createChallenge(challenges, miniChallengeScreen) {
    for (let i = 0; i < currentCast.length; i++){
        currentCast[i].episodesOn++;
    }
    //ball for superstars
    if (superstars && superstarsEpisode == 1 && ballCounter == false)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //live for superstars split premiere
    else if (superstars && splitpremiere == true)
        miniChallengeScreen.createButton("Proceed", "liveChallenge()");
    //snatch game for superstars
    else if (superstars && superstarsEpisode == 2 && snatchCounter == false)
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //girlgroups for superstars
    else if (superstars && totalCastSize % 2 == 0 && totalCastSize / 2 == superstarsEpisode && groupsChallengeCounter == 0)
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    //girlgroups for superstars with odd cast
    else if (superstars && totalCastSize % 2 == 1 && (totalCastSize + 1) / 2 == superstarsEpisode && groupsChallengeCounter == 0) {
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    }
    //talent show for superstars
    else if (superstars && totalCastSize % 2 == 0 && totalCastSize + 3 == superstarsEpisode && talentshowCounter == false)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //talentshow for superstars with odd
    else if (superstars && totalCastSize % 2 == 1 && totalCastSize + 4 == superstarsEpisode && talentshowCounter == false)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //rusical for superstars
    else if (superstars && superstarsEpisode > totalCastSize / 2 && randomNumber(0, 100) > 50 && rusicalCounter == false)
        miniChallengeScreen.createButton("Proceed", "rusical()");
    //makeover for superstars
    else if (superstars && superstarsEpisode > totalCastSize / 2 && makeoverCounter == false)
        miniChallengeScreen.createButton("Proceed", "makeover()");
    //creation for superstars
    else if (superstars && superstarsEpisode > 3 && rucreateCounter == false)
        miniChallengeScreen.createButton("Proceed", "rucreate()");
    //first design challenge for normal seasons
    else if (currentCast.length == totalCastSize && top3 && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || s9Premiere || pageantPremiere || extraPremiere || triplePremiere || splitCastPremiere) == false && ruvengeEpisode == false || currentCast.length == totalCastSize && savequeen && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || s9Premiere || pageantPremiere || extraPremiere || triplePremiere || splitCastPremiere) == false && ruvengeEpisode == false || currentCast.length == totalCastSize && top4 && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || s9Premiere || pageantPremiere || extraPremiere || triplePremiere || splitCastPremiere) == false && ruvengeEpisode == false || currentCast.length == totalCastSize && team || sweatshop)
        miniChallengeScreen.createButton("Proceed", "designChallenge()");
    //rusical as first challenge for vs the World
    else if (currentCast.length == totalCastSize && vstheworld && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || s9Premiere || pageantPremiere || extraPremiere || triplePremiere || splitCastPremiere) == false && ruvengeEpisode == false && rusicalCounter == false)
        miniChallengeScreen.createButton("Proceed", "rusical()");
    //snatch game for vstheworld with elim premieres
    else if (vstheworld && splitpremiere == true && (s6Premiere || s14Premiere))
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //creation for vstheworld with no elim premieres
    else if (vstheworld && splitpremiere == true && (s12Premiere || porkelimPremiere || porkchopPremiere|| triplePremiere))
        miniChallengeScreen.createButton("Proceed", "rucreate()");
    //rusical for split premiere combined challenges
    else if ((s6Premiere || s14Premiere || s12Premiere || porkelimPremiere || porkchopPremiere || triplePremiere) && vstheworld && currentCast.length == totalCastSize && rusicalCounter == false)
        miniChallengeScreen.createButton("Proceed", "rusical()");
    //talent show for vs the world
    else if (vstheworld && currentCast.length == 6 && talentshowCounter == false && splitpremiere == false)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //ball for vs the world
    else if (vstheworld && currentCast.length > 8 && currentCast.length < 12 && ballCounter == false && splitpremiere == false)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //girlgroups for vstheworld
    else if (vstheworld && (currentCast.length % 2 == 0 || currentCast.length % 3 == 0) && currentCast.length > 5 && groupsChallengeCounter == 0)
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    //talent show for split cast premiere
    else if (splitCastPremiere == true && episodeCount == 1)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //creation for split cast first challenges
    else if (splitCastPremiere == true && splitCastDuration == true && currentCast.length == totalCastSize)
        miniChallengeScreen.createButton("Proceed", "rucreate()");
    //rusical for split cast second challenges
    else if (splitCastPremiere == true && splitCastDuration == true && currentCast.length == totalCastSize - 1)
        miniChallengeScreen.createButton("Proceed", "rusical()");
    //acting for split cast last challenges
    else if (splitCastPremiere == true && splitCastDuration == true && currentCast.length == 5 && eightCombine == true || splitCastPremiere == true && splitCastDuration == true && currentCast.length == 6 && tenCombine == true)
        miniChallengeScreen.createButton("Proceed", "actingChallenge()");
    //decor for split cast third challenges
    else if (splitCastPremiere == true && splitCastDuration == true && currentCast.length == totalCastSize - 2)
        miniChallengeScreen.createButton("Proceed", "decor()");
    //improv for split cast fourth challenges
    else if (splitCastPremiere == true && splitCastDuration == true && currentCast.length == totalCastSize - 3)
        miniChallengeScreen.createButton("Proceed", "improvChallenge()");
    //ball for split cast fifth challenges
    else if (splitCastPremiere == true && splitCastDuration == true && currentCast.length == totalCastSize - 4)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //girl groups for split cast first combine episode if more than 10 queens
    else if (splitCastPremiere == true && splitCastDuration == false && currentCast.length == totalCastSize && totalCastSize > 10 && groupsChallengeCounter == 0)
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    //snatch game for split cast first combine episode if 10 or less queens
    else if (splitCastPremiere == true && splitCastDuration == false && currentCast.length == totalCastSize && snatchCounter == false && totalCastSize <= 10 || splitCastPremiere == true && splitCastDuration == false && currentCast.length == 10 && snatchCounter == false && totalCastSize > 10)
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //ball for split cast second combine episode
    else if (splitCastPremiere == true && splitCastDuration == false && currentCast.length == totalCastSize - 1 && ballCounter == false && totalCastSize <= 10 || splitCastPremiere == true && splitCastDuration == false && currentCast.length == 9 && ballCounter == false && totalCastSize > 10)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //pageant premiere
    else if ((s9Premiere || pageantPremiere) && episodeCount == 1)
        miniChallengeScreen.createButton("Proceed", "pageant()");
    //extravaganza premiere
    else if (extraPremiere && episodeCount == 1)
        miniChallengeScreen.createButton("Proceed", "extravaganza()");
    //makeover with twins twist
    else if (twinstwist && currentCast.length == totalCastSize && totalCastSize % 2 == 0 && ruvengeEpisode == true || twinstwist && currentCast.length == totalCastSize - 1 && totalCastSize % 2 == 1 && ruvengeEpisode == true)
        miniChallengeScreen.createButton("Proceed", "makeover()");
    //comedy for ruvenge
    else if (comedyRuvenge && currentCast.length == totalCastSize && totalCastSize % 2 == 0 && ruvengeEpisode == true || comedyRuvenge && currentCast.length == totalCastSize - 1 && totalCastSize % 2 == 1 && ruvengeEpisode == true)
        miniChallengeScreen.createButton("Proceed", "comedyChallenge()");
    //girlgroups for ruvenge
    else if (groupsRuvenge && currentCast.length == totalCastSize && totalCastSize % 2 == 0 && ruvengeEpisode == true || groupsRuvenge && currentCast.length == totalCastSize - 1 && totalCastSize % 2 == 1 && ruvengeEpisode == true)
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    //talent show for triple premiere
    else if (triplePremiere && episodeCount == 1 || triplePremiere && episodeCount == 2 || triplePremiere && episodeCount == 3)
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //talent show for normal all stars seasons
    else if (currentCast.length == totalCastSize && all_stars && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || triplePremiere) == false || currentCast.length == totalCastSize && lipsync_assassin && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || triplePremiere) == false || currentCast.length == totalCastSize && throwqueen && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || triplePremiere) == false || currentCast.length == totalCastSize && team)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //snatch game
    else if (totalCastSize >= 10 && currentCast.length == 9 && !team && snatchCounter == false && splitpremiere == false || totalCastSize >= 6 && currentCast.length == 5 && team && splitCastPremiere == false)
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //decor for international all stars with s6 premiere
    else if (throwqueen && currentCast.length == totalCastSize && s6Premiere)
        miniChallengeScreen.createButton("Proceed", "decor()");
    //acting for s12 or s14 or porkchop premiere without smackdown
    else if (currentCast.length == totalCastSize  && (savequeen || top4 || top3) && (s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) && smackdown == false)
        miniChallengeScreen.createButton("Proceed", "actingChallenge()");
    //girl groups for s12 or s14 or porkchop premiere with smackdown
    else if (currentCast.length == totalCastSize  && (savequeen || top4 || top3) && (s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && smackdown == true)
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    //talent show for all stars with s12 or porkchop premiere
    else if (premiereCounter <= 2 && (s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) && (all_stars || lipsync_assassin))
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //live challenge for international all stars with splitpremiere without elim
    else if (premiereCounter <= 2 && (s12Premiere || porkchopPremiere) && throwqueen)
        miniChallengeScreen.createButton("Proceed", "liveChallenge()");
    //snatch game for international all stars with s14 premiere
    else if (premiereCounter <= 2 && s14Premiere && throwqueen)
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //talent show for international all stars with porkelim premiere
    else if (premiereCounter <= 2 && porkelimPremiere && throwqueen)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //rumix for international all stars with s6 premiere
    else if (premiereCounter <= 2 && s6Premiere && throwqueen)
        miniChallengeScreen.createButton("Proceed", "rumix()");
    //creation for international all stars with s12 and porkchop premiere
    else if (throwqueen && currentCast.length == totalCastSize && (s12Premiere || porkchopPremiere))
        miniChallengeScreen.createButton("Proceed", "rucreate()");
    //rusical for international all stars with s14 premiere
    else if (throwqueen && currentCast.length == totalCastSize && s14Premiere)
        miniChallengeScreen.createButton("Proceed", "rusical()");
    //creation for international all stars with s12 and porkchop premiere
    else if (throwqueen && currentCast.length == totalCastSize - 3 && rucreateCounter == false)
        miniChallengeScreen.createButton("Proceed", "rucreate()");
    //ball for international all stars
    else if (throwqueen && currentCast.length == 5 && (!smackdown || returningQueen == true) && !ballCounter)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //makeover for international all stars
    else if (throwqueen && currentCast.length == 7 && makeoverCounter == false)
        miniChallengeScreen.createButton("Proceed", "makeover()");
    //snatch game for s12 or porkchop premiere with smackdown twist
    else if (premiereCounter <= 2 && (s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) && (savequeen || top4 || top3) && smackdown == true)
        miniChallengeScreen.createButton("Proceed", "snatchGame()");
    //talent show for s12 or s14 or porkchop premiere
    else if (premiereCounter <= 2 && (s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && smackdown == false)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //the ball for s6 premiere
    else if (currentCast == firstCast && s6Premiere || currentCast == secondCast && s6Premiere)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //talent show for all stars with s6 premiere
    else if (s6Premiere == true && (all_stars || lipsync_assassin) && currentCast.length == totalCastSize)
        miniChallengeScreen.createButton("Proceed", "talentshow()");
    //the ball for all stars with normal premiere
    else if (!ballCounter && currentCast.length == totalCastSize - 1 && all_stars && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == false || !ballCounter && currentCast.length == totalCastSize - 1 && lipsync_assassin && (s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == false)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //ball for all stars with s12, porkchop, and s14 premiere
    else if (currentCast.length == totalCastSize && (all_stars || lipsync_assassin) && (s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) && !ballCounter)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //girl groups for all stars
    else if (currentCast.length == 8 && (all_stars || lipsync_assassin) && !groupsRuvenge)
        miniChallengeScreen.createButton("Proceed", "groupsChallenge()");
    //acting for all stars
    else if (currentCast.length == 5 && (all_stars || lipsync_assassin) && (!smackdown || returningQueen == true))
        miniChallengeScreen.createButton("Proceed", "actingChallenge()");
    //the ball for the third competitive episode for all stars with s12 and porkchop premiere
    else if (currentCast.length == totalCastSize && (all_stars || lipsync_assassin) && (s12Premiere || porkchopPremiere || porkelimPremiere) && !ballCounter)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //the ball for the fourth competitive episode for lsftc seasons
    else if (s6Premiere == false && currentCast.length == totalCastSize - 3 && (savequeen || top4) && !ballCounter)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //rusical
    else if (currentCast.length == 10 && rusicalCounter == false && superstars == false)
        miniChallengeScreen.createButton("Proceed", "rusical()");
    //decor
    else if (currentCast.length > 6 && randomNumber(0, 4) == 4 && decorCounter == false)
        miniChallengeScreen.createButton("Proceed", "decor()");
    //rucreate
    else if (currentCast.length == 7 && rucreateCounter == false && forFinaleLS == false)
        miniChallengeScreen.createButton("Proceed", "rucreate()");
    //makeover
    else if ((smackdown || twinstwist) == false && currentCast.length == 6 && makeoverCounter == false && splitCastDuration == false && superstars == false)
        miniChallengeScreen.createButton("Proceed", "makeover()");
    //makeover with smackdown
    else if (smackdown == true && currentCast.length == 5 && makeoverCounter == false && showgirlShowdown == false || smackdown == true && returningQueen == true && showgirlShowdown == true && currentCast.length == 6 && makeoverCounter == false)
        miniChallengeScreen.createButton("Proceed", "makeover()");
    //rumix
    else if (currentCast.length == 5 && (savequeen || top4) && (!smackdown || returningQueen == true) && goldticket == false)
        miniChallengeScreen.createButton("Proceed", "rumix()");
    //live
    else if (currentCast.length == 5 && (savequeen || top4) && (!smackdown || returningQueen == true) && goldticket == true && top5Choc == false)
        miniChallengeScreen.createButton("Proceed", "liveChallenge()");
    //improv
    else if (currentCast.length == 5 && (savequeen || top4) && (!smackdown || returningQueen == true) && goldticket == true && top5Choc == true)
        miniChallengeScreen.createButton("Proceed", "improvChallenge()");
    //ball for top3 seasons
    else if (currentCast.length == 4 && top3 && !ballCounter && goldticket == false && forFinaleLS == false || currentCast.length == 4 && top3 && !ballCounter && goldticket == true && top5Choc == false && forFinaleLS == false)
        miniChallengeScreen.createButton("Proceed", "ball()");
    // ball for top3 seasons with reunion ls
    else if (currentCast.length == 7 && top3 && forFinaleLS == true && !ballCounter)
        miniChallengeScreen.createButton("Proceed", "ball()");
    //rumix for top 3
    else if (currentCast.length == 4 && top3 && goldticket == true && top5Choc == true)
        miniChallengeScreen.createButton("Proceed", "rumix()");
    //if no conditions apply, create random challenge
    else {
        let currentChallenge = challenges[randomNumber(0, challenges.length - 1)];
        if (currentChallenge === lastChallenge && currentCast.length != totalCastSize) {
            currentChallenge = challenges[randomNumber(0, challenges.length - 1)];
            lastChallenge = currentChallenge;
            miniChallengeScreen.createButton("Proceed", currentChallenge);
        }
        else {
            lastChallenge = currentChallenge;
            miniChallengeScreen.createButton("Proceed", currentChallenge);
        }
    }
}
////create performance descriptions
function createPerformanceDesc(slay, great, good, bad, flop) {
    let screen = new Scene();
    if (pairings == false) {
    if (slay.length !== 0) {
        for (let i = 0; i < slay.length; i++)
            screen.createImage(slay[i].image, "darkblue");
        screen.createBold("", "slay");
        let slayText = document.getElementById("slay");
        for (let i = 0; i < slay.length; i++)
            slayText.innerHTML += `${slay[i].getName()}, `;
        slayText.innerHTML += "slayed the challenge!";
    }
    if (great.length !== 0) {
        for (let i = 0; i < great.length; i++)
            screen.createImage(great[i].image, "royalblue");
        screen.createBold("", "great");
        let greatText = document.getElementById("great");
        for (let i = 0; i < great.length; i++)
            greatText.innerHTML += `${great[i].getName()}, `;
        greatText.innerHTML += "had a great performance!";
    }
    if (good.length !== 0) {
        for (let i = 0; i < good.length; i++)
            screen.createImage(good[i].image);
        screen.createBold("", "good");
        let goodText = document.getElementById("good");
        for (let i = 0; i < good.length; i++)
            goodText.innerHTML += `${good[i].getName()}, `;
        goodText.innerHTML += "had a good performance.";
    }
    if (bad.length !== 0) {
        for (let i = 0; i < bad.length; i++)
            screen.createImage(bad[i].image, "pink");
        screen.createBold("", "bad");
        let badText = document.getElementById("bad");
        for (let i = 0; i < bad.length; i++)
            badText.innerHTML += `${bad[i].getName()}, `;
        badText.innerHTML += "had a bad performance...";
    }
    if (flop.length !== 0) {
        for (let i = 0; i < flop.length; i++)
            screen.createImage(flop[i].image, "tomato");
        screen.createBold("", "flop");
        let flopText = document.getElementById("flop");
        for (let i = 0; i < flop.length; i++)
            flopText.innerHTML += `${flop[i].getName()}, `;
        flopText.innerHTML += "bombed the challenge...";
    }
    }
    else if (pairings == true) {
    if (slay.length !== 0) {
        for (let i = 0; i < slay.length; i++) {
            screen.createImage(slay[i].QueenA.image, "darkblue");
            screen.createImage(slay[i].QueenB.image, "darkblue");
            if (slay[i] == threeSome[0])
            screen.createImage(slay[i].QueenC.image, "darkblue");
        }
        screen.createBold("", "slay");
        let slayText = document.getElementById("slay");
        for (let i = 0; i < slay.length; i++)
            slayText.innerHTML += `${slay[i].getName()}, `;
        slayText.innerHTML += "slayed the challenge!";
    }
    if (great.length !== 0) {
        for (let i = 0; i < great.length; i++){
            screen.createImage(great[i].QueenA.image, "royalblue");
            screen.createImage(great[i].QueenB.image, "royalblue");
            if (great[i] == threeSome[0])
            screen.createImage(great[i].QueenC.image, "royalblue");
        }
        screen.createBold("", "great");
        let greatText = document.getElementById("great");
        for (let i = 0; i < great.length; i++)
            greatText.innerHTML += `${great[i].getName()}, `;
        greatText.innerHTML += "had a great performance!";
    }
    if (good.length !== 0) {
        for (let i = 0; i < good.length; i++){
            screen.createImage(good[i].QueenA.image);
            screen.createImage(good[i].QueenB.image);
            if (good[i] == threeSome[0])
            screen.createImage(good[i].QueenC.image);
        }
        screen.createBold("", "good");
        let goodText = document.getElementById("good");
        for (let i = 0; i < good.length; i++)
            goodText.innerHTML += `${good[i].getName()}, `;
        goodText.innerHTML += "had a good performance.";
    }
    if (bad.length !== 0) {
        for (let i = 0; i < bad.length; i++){
            screen.createImage(bad[i].QueenA.image, "pink");
            screen.createImage(bad[i].QueenB.image, "pink");
            if (bad[i] == threeSome[0])
            screen.createImage(bad[i].QueenC.image, "pink");
        }
        screen.createBold("", "bad");
        let badText = document.getElementById("bad");
        for (let i = 0; i < bad.length; i++)
            badText.innerHTML += `${bad[i].getName()}, `;
        badText.innerHTML += "had a bad performance...";
    }
    if (flop.length !== 0) {
        for (let i = 0; i < flop.length; i++){
            screen.createImage(flop[i].QueenA.image, "tomato");
            screen.createImage(flop[i].QueenB.image, "tomato");
            if (flop[i] == threeSome[0])
            screen.createImage(flop[i].QueenC.image, "tomato");
        }
        screen.createBold("", "flop");
        let flopText = document.getElementById("flop");
        for (let i = 0; i < flop.length; i++)
            flopText.innerHTML += `${flop[i].getName()}, `;
        flopText.innerHTML += "bombed the challenge...";
    }
    }
}
function createRunwayDesc(slay, great, good, bad) {
    let screen = new Scene();
    if (slay.length !== 0) {
        for (let i = 0; i < slay.length; i++) {
            screen.createImage(slay[i].image, "darkblue");
            slay[i].runwayScore = 10;
        }
        screen.createBold("", "slayR");
        let slayText = document.getElementById("slayR");
        for (let i = 0; i < slay.length; i++)
            slayText.innerHTML += `${slay[i].getName()}, `;
        slayText.innerHTML += "slayed the runway!";
    }
    if (great.length !== 0) {
        for (let i = 0; i < great.length; i++) {
            screen.createImage(great[i].image, "royalblue");
            great[i].runwayScore = 5;
        }
        screen.createBold("", "greatR");
        let greatText = document.getElementById("greatR");
        for (let i = 0; i < great.length; i++)
            greatText.innerHTML += `${great[i].getName()}, `;
        greatText.innerHTML += "had a great runway!";
    }
    if (good.length !== 0) {
        for (let i = 0; i < good.length; i++) {
            screen.createImage(good[i].image);
            good[i].runwayScore = 0;
        }
        screen.createBold("", "goodR");
        let goodText = document.getElementById("goodR");
        for (let i = 0; i < good.length; i++)
            goodText.innerHTML += `${good[i].getName()}, `;
        goodText.innerHTML += "had a good runway.";
    }
    if (bad.length !== 0) {
        for (let i = 0; i < bad.length; i++) {
            screen.createImage(bad[i].image, "pink");
            bad[i].runwayScore = -3;
        }
        screen.createBold("", "badR");
        let badText = document.getElementById("badR");
        for (let i = 0; i < bad.length; i++)
            badText.innerHTML += `${bad[i].getName()}, `;
        badText.innerHTML += "had a bad runway...";
    }
}
function addQueen() {
    let name = document.getElementById("queenName").value.trim();
    let acting = document.getElementById("actingStat").valueAsNumber;
    let comedy = document.getElementById("comedyStat").valueAsNumber;
    let vocal = document.getElementById("vocalStat").valueAsNumber;
    let dance = document.getElementById("danceStat").valueAsNumber;
    let lyrical = document.getElementById("lyricalStat").valueAsNumber;
    let design = document.getElementById("designStat").valueAsNumber;
    let improv = document.getElementById("improvStat").valueAsNumber;
    let runway = document.getElementById("runwayStat").valueAsNumber;
    let lipsync = document.getElementById("lipsyncStat").valueAsNumber;
    if ((acting || comedy || vocal || dance || lyrical || design || improv || runway || lipsync) < 0 || (acting || comedy || vocal || dance || lyrical || design || improv || runway || lipsync) > 15) {
        window.alert("Queens' stats must be between 0 and 15!");
        return;
    }
    if (name == "" || isNaN((acting || comedy || vocal || dance || lyrical || design || improv || runway || lipsync))) {
        window.alert("One of the boxes is empty!");
        return;
    }
    let customQueen = new Queen(name, acting, comedy, vocal, dance, lyrical, design, improv, runway, lipsync);
    let sameName = false;
    for (let i = 0; i < allCustomQueens.length; i++)
        if (allCustomQueens[i].getName() == customQueen.getName()) {
            window.alert(`There's already a queen with the name ${customQueen.getName()}! Please use another name.`);
            sameName = true;
            break;
        }
    if (sameName == false) {
        allCustomQueens.push(customQueen);
        let announce = document.getElementById("announce-new");
        announce.innerHTML = `${customQueen.getName()} added to the queen list!`;
        localStorage.setItem("customQueens", JSON.stringify(allCustomQueens));
        setTimeout(() => {
            document.location.reload();
        }, 1500);
    }
}
function customQueenSelectList() {
    let select = document.getElementById("custom-remove");
    for (let i = 0; i < allCustomQueens.length; i++) {
        let option = document.createElement("option");
        option.innerHTML = allCustomQueens[i].getName();
        option.value = i.toString();
        select.appendChild(option);
    }
}
function removeCustomQueen() {
    let select = document.getElementById("custom-remove");
    let index = parseInt(select.options[select.selectedIndex].value);
    let announce = document.getElementById("announce-remove");
    announce.innerHTML = `${allCustomQueens[index].getName()} removed from the queen list!`;
    allCustomQueens.splice(index, 1);
    localStorage.setItem("customQueens", JSON.stringify(allCustomQueens));
    setTimeout(() => {
        document.location.reload();
    }, 1500);
}
function editCustomQueen(){
    let editButton = document.getElementById("edit");
    let addButton = document.getElementById("add");
    let select = document.getElementById("custom-remove");
    let index = parseInt(select.options[select.selectedIndex].value);
    addButton.setAttribute("hidden", "hidden");
    editButton.removeAttribute("hidden");
    document.getElementById("queenName").value = allCustomQueens[index].getName();
    document.getElementById("actingStat").value = allCustomQueens[index]._actingStat;
    document.getElementById("comedyStat").value = allCustomQueens[index]._comedyStat;
    document.getElementById("vocalStat").value = allCustomQueens[index]._vocalStat;
    document.getElementById("danceStat").value = allCustomQueens[index]._danceStat;
    document.getElementById("lyricalStat").value = allCustomQueens[index]._lyricalStat;
    document.getElementById("designStat").value = allCustomQueens[index]._designStat;
    document.getElementById("improvStat").value = allCustomQueens[index]._improvStat;
    document.getElementById("runwayStat").value = allCustomQueens[index]._runwayStat;
    document.getElementById("lipsyncStat").value = allCustomQueens[index]._lipsyncStat;
}
function updateCustomQueen(){
    let select = document.getElementById("custom-remove");
    let index = parseInt(select.options[select.selectedIndex].value);
    let name = document.getElementById("queenName").value.trim();
    let acting = document.getElementById("actingStat").valueAsNumber;
    let comedy = document.getElementById("comedyStat").valueAsNumber;
    let vocal = document.getElementById("vocalStat").valueAsNumber;
    let dance = document.getElementById("danceStat").valueAsNumber;
    let lyrical = document.getElementById("lyricalStat").valueAsNumber;
    let design = document.getElementById("designStat").valueAsNumber;
    let improv = document.getElementById("improvStat").valueAsNumber;
    let runway = document.getElementById("runwayStat").valueAsNumber;
    let lipsync = document.getElementById("lipsyncStat").valueAsNumber;
    if ((acting || comedy || vocal || dance || lyrical || design || improv || runway || lipsync) < 0 || (acting || comedy || vocal || dance || lyrical || design || improv || runway || lipsync) > 15) {
        window.alert("Queens' stats must be between 0 and 15!");
        return;
    }
    if (name == "" || isNaN((acting || comedy || vocal || dance || lyrical || design || improv || runway || lipsync))) {
        window.alert("One of the boxes is empty!");
        return;
}
    let customQueen = new Queen(name, acting, comedy, vocal, dance, lyrical, design, improv, runway, lipsync);
    allCustomQueens.splice(index, 1);
    allCustomQueens.push(customQueen);
    let announce = document.getElementById("announce-new");
    announce.innerHTML = `${customQueen.getName()} updated!`;
    localStorage.setItem("customQueens", JSON.stringify(allCustomQueens));
    setTimeout(() => {
        document.location.reload();
    }, 1500);
}
function randomizeStats() {
    let stats = document.getElementsByClassName("stats");
    for (let i = 0; i < stats.length; i++) {
        stats[i].value = randomNumber(0, 15).toString();
    }
}
let premiereCounter = 0;
let firstCast = [];
let secondCast = [];
let thirdCast = [];
let porkChops = [];
let queensPartyOne = [];
let queensPartyTwo = [];
function doublePremiere() {
    if (premiereCounter == 0)
        if (s6Premiere || s12Premiere || s14Premiere) {
            shuffle(currentCast);
            firstCast = currentCast.splice(0, Math.floor(currentCast.length / 2));
            secondCast = [...currentCast];
            if (s12Premiere && dragParty == true) {
                for (let i = 0; i < firstCast.length; i++) {
                    queensPartyOne.push(firstCast[i]);
                }
                for (let i = 0; i < secondCast.length; i++) {
                    queensPartyTwo.push(secondCast[i]);
                }
            }
        }
        else if (triplePremiere) {
            firstCast = currentCast.splice(0, Math.floor(currentCast.length / 3));
            secondCast = currentCast.splice(0, Math.floor(currentCast.length / 2));
            thirdCast = [...currentCast];
        }
    if (premiereCounter == 0) {
        currentCast = firstCast;
        splitpremiere = true;
        for (let i = 0; i < secondCast.length; i++)
            secondCast[i].addToTrackRecord("");
        if (triplePremiere) {
            for (let i = 0; i < thirdCast.length; i++)
            thirdCast[i].addToTrackRecord("");
        }
        premiereCounter++;
        newEpisode();
    }
    else if (premiereCounter == 1) {
        currentCast = secondCast;
        splitpremiere = true;
        for (let i = 0; i < firstCast.length; i++)
            firstCast[i].addToTrackRecord("");
        if (s6Premiere || s14Premiere || porkelimPremiere) {
            eliminatedCast[0].addToTrackRecord("");
            if (porkelimPremiere) {
                eliminatedCast[0].addToTrackRecord("");
            }
        }
        if (triplePremiere) {
            for (let i = 0; i < thirdCast.length; i++)
            thirdCast[i].addToTrackRecord("");
        }
        premiereCounter++;
        newEpisode();
    }
    else if (premiereCounter == 2 && triplePremiere) {
        currentCast = thirdCast;
        splitpremiere = true;
        for (let i = 0; i < firstCast.length; i++)
            firstCast[i].addToTrackRecord("");
        for (let i = 0; i < secondCast.length; i++)
            secondCast[i].addToTrackRecord("");
        premiereCounter++;
        newEpisode();
    }
    else if (premiereCounter == 2 && s14Premiere) {
        currentCast = [...firstCast, ...secondCast];
        splitpremiere = false;
        for (let i = 0; i < eliminatedCast.length; i++){
            eliminatedCast[i].lastEpisode -= eliminatedCast[i].lastEpisode
            let queen = eliminatedCast[i];
            currentCast.push(queen);
            eliminatedCast.splice(eliminatedCast.indexOf(queen), 1);
            i--;
        }
        premiereCounter++;
        newEpisode();
    }
    else if (premiereCounter == 2 && porkelimPremiere && goldticket) {
        currentCast = [...firstCast, ...secondCast];
        splitpremiere = false;
        currentCast.push(porkChops[0]);
        eliminatedCast.splice(eliminatedCast.indexOf(porkChops[0]), 1);
        premiereCounter++;
        newEpisode();
    }
    else if (premiereCounter == 2 && !triplePremiere && !s6Premiere || premiereCounter == 2 && s6Premiere && elimLipsync == false) {
        currentCast = [...firstCast, ...secondCast];
        splitpremiere = false;
        totalCastSize = currentCast.length;
        premiereCounter++;
        newEpisode();
    }
    else if (premiereCounter == 2 && s6Premiere && elimLipsync == true) {
        currentCast = [...firstCast, ...secondCast];
        splitpremiere = false;
        totalCastSize = currentCast.length;
        top2 = [];
        for (let i = 0; i < eliminatedCast.length; i++){
            let queen = eliminatedCast[i];
            top2.push(queen);
        }
        oneMoreChance();
    }
    else if (premiereCounter == 3 && triplePremiere) {
        currentCast = [...firstCast, ...secondCast, ...thirdCast];
        splitpremiere = false;
        totalCastSize = currentCast.length;
        premiereCounter++;
        newEpisode();
    }
}
let splitCastDuration = true;
let firstHalfRemain = [];
let firstHalfCast = true;
let eightCombine = false;
let tenCombine = false;
let firstElims = [];
let secondElims = [];
let combinedCast = [];
let secretEpisode = false;
function oneMoreChance() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("A Second Chance");
    for (let i = 0; i < eliminatedCast.length; i++){
        screen.createImage(eliminatedCast[i].image, "crimson");
    }
    screen.createBold("Ladies, I have decided to give one of you a second chance. <br> And to decide which one, you have to battle it out on another lipsync for your life!");
    screen.createButton("Proceed", "eliminatedLipsync()", "button2");
}
function eliminatedLipsync() {
    let screen = new Scene();
    screen.createHorizontalLine();
    let button2 = document.querySelector("button#button2");
    button2.remove();
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    screen.createBigText("The time has come!");
    screen.createBold("For you to lip-sync... for your life! Good luck, and don't fuck it up.");
    lsSong();
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(top2[0].image, "hotpink");
    screen.createBold(`${top2[0].getName()}, condragulations! You are back in the race!`);
    screen.createImage(top2[1].image, "red");
    screen.createBold(`${top2[1].getName()}, I am sorry, my dear, but this is not yet your time. Now, sashay away.`);
    if (top2[0] == eliminatedCast[0]) {
        top2[0].trackRecord.pop();
        top2[0].addToTrackRecord("ELIM <br> + <br> IN");
        top2[0].favoritism += 5;
        top2[0].lastEpisode = 0;
    }
    else if (top2[0] == eliminatedCast[1]) {
        top2[0].trackRecord.pop();
        top2[0].trackRecord.pop();
        top2[0].addToTrackRecord("ELIM <br> + <br> IN");
        top2[0].addToTrackRecord("");
        top2[0].favoritism += 5;
        top2[0].lastEpisode = 0;
    }
    if (top2[1] == eliminatedCast[0]) {
        top2[1].trackRecord.pop();
        top2[1].addToTrackRecord("ELIM <br> + <br> OUT");
    }
    else if (top2[1] == eliminatedCast[1]) {
        top2[1].trackRecord.pop();
        top2[1].trackRecord.pop();
        top2[1].addToTrackRecord("ELIM <br> + <br> OUT");
        top2[1].addToTrackRecord("");
    }
    totalCastSize += 1;
    currentCast.push(top2[0]);
    eliminatedCast.splice(eliminatedCast.indexOf(top2[0]), 1);
    premiereCounter++;
    screen.createButton("Proceed", "newEpisode()");
}
function splitCastEpisodes() {
    if (firstHalfStart == true) {
        if (totalCastSize >= 18) {
            tenCombine = true;
        }
        else {
            eightCombine = true;
        }
        currentCast = firstHalfQueens;
        firstHalfStart = false;
        totalCastSize = currentCast.length;
        newEpisode();
    }
    else if (firstHalfStart == false && currentCast.length > 4 && firstHalfCast == true && eightCombine == true || firstHalfStart == false && currentCast.length > 5 && firstHalfCast == true && tenCombine == true) {
        for (let i = 0; i < secondHalfQueens.length; i++) {
            secondHalfQueens[i].addToTrackRecord("");
        }
        firstElims.push(eliminatedCast[0]);
        newEpisode();
    }
    else if (firstHalfStart == false && currentCast.length == 4 && firstHalfCast == true && eightCombine == true || firstHalfStart == false && currentCast.length == 5 && firstHalfCast == true && tenCombine == true) {
        for (let i = 0; i < currentCast.length; i++) {
            firstHalfRemain.push(currentCast[i]);
        }
        currentCast = secondHalfQueens;
        for (let i = 0; i < secondHalfQueens.length; i++) {
            secondHalfQueens[i].addToTrackRecord("");
        }
        firstElims.push(eliminatedCast[0]);
        firstHalfCast = false;
        newEpisode();
    }
    else if (firstHalfStart == false && currentCast.length > 4 && firstHalfCast == false && eightCombine == true || firstHalfStart == false && currentCast.length > 5 && firstHalfCast == false && tenCombine == true) {
        for (let i = 0; i < firstHalfRemain.length; i++) {
            firstHalfRemain[i].addToTrackRecord("");
        }
        secondElims.push(eliminatedCast[0]);
        newEpisode();
    }
    else if (firstHalfStart == false && currentCast.length == 4 && firstHalfCast == false && eightCombine == true || firstHalfStart == false && currentCast.length == 5 && firstHalfCast == false && tenCombine == true) {
        for (let i = 0; i < firstHalfRemain.length; i++) {
            combinedCast.push(firstHalfRemain[i]);
            firstHalfRemain[i].addToTrackRecord("");
        }
        secondElims.push(eliminatedCast[0]);
        for (let i = 0; i < firstHalfRemain.length; i++) {
            combinedCast.push(currentCast[i]);
            currentCast.push(firstHalfRemain[i]);
        }
        firstHalfRemain = [];
        totalCastSize = currentCast.length;
        splitCastDuration = false;
        if (lscombats == true) {
            lipsyncCombats();
        }
        else if (lsbattles == true) {
            lipsyncBattles();
        }
        else if (secretPageant == true) {
            secretEpisode = true;
            secretPageantEpisode();
        }
        else if (secretDanceOffs == true) {
            secretEpisode = true;
            secretDanceOffEpisode();
        }
        else if (secretSitcoms == true) {
            secretEpisode = true;
            secretSitcomEpisode();
        }
        else {
            newEpisode();
        }
    }
}
function secretPageantEpisode() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("An Extra Secret Episode!");
    challengeScreen.createParagraph("The eliminated queens are back for the crown. <br> But first, they need to snatch the title of the Miss LamVi Of The Year!");
    for (let i = 0; i < eliminatedCast.length; i++) {
        challengeScreen.createImage(eliminatedCast[i].image, "red");
    }
    currentCast = eliminatedCast;
    challengeScreen.createBold("Let the pageant begin!");
    challengeScreen.createButton("Proceed", "missLamVi()");
}
function missLamVi() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Secret Challenge!");
    challengeScreen.createParagraph("The queens strut their stuff and test their wit in the Miss LamVi Of The Year Pageant!");
    for (let i = 0; i < currentCast.length; i++)
        currentCast[i].getPageant();
    isDesignChallenge = true;
    queensPerformances();
    episodeChallenges.push("Pageant");
}
function secretDanceOffEpisode() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("An Extra Secret Episode!");
    challengeScreen.createParagraph("The eliminated queens are back for the crown. <br> But first, they need show off their moves in Dancing with the Queens!");
    for (let i = 0; i < eliminatedCast.length; i++) {
        challengeScreen.createImage(eliminatedCast[i].image, "red");
    }
    currentCast = eliminatedCast;
    challengeScreen.createBold("Let the dance offs begin!");
    challengeScreen.createButton("Proceed", "dancingWithQueens()");
}
function dancingWithQueens() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Secret Challenge!");
    challengeScreen.createParagraph("The queens bring it to the dancefloor and unleashes their inner dancing queen!");
    for (let i = 0; i < currentCast.length; i++)
        currentCast[i].getDance();
    isDesignChallenge = false;
    queensPerformances();
    episodeChallenges.push("Showdowns");
}
function secretSitcomEpisode() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("An Extra Secret Episode!");
    challengeScreen.createParagraph("The eliminated queens are back for the crown. <br> But first, they must overreact and bring their funny bone in the sitcom Bing Bang Theory!");
    for (let i = 0; i < eliminatedCast.length; i++) {
        challengeScreen.createImage(eliminatedCast[i].image, "red");
    }
    currentCast = eliminatedCast;
    challengeScreen.createBold("Let the live sitcoms begin!");
    challengeScreen.createButton("Proceed", "bingbangTheory()");
}
function bingbangTheory() {
    let challengeScreen = new Scene();
    challengeScreen.clean();
    challengeScreen.createHeader("Secret Challenge!");
    challengeScreen.createParagraph("The queens stars and makes audience laugh in their very first live sitcom!");
    for (let i = 0; i < currentCast.length; i++)
        currentCast[i].getActing();
    isDesignChallenge = false;
    queensPerformances();
    episodeChallenges.push("Sitcoms");
}
function results() {
    bottomQueens = [];
    topQueens = [];
    //sort the best out of each in first and second set of eliminated queens
    for (let i = 0; i < firstElims.length; i++) {
        if (isDesignChallenge == false) {
            firstElims[i].performanceScore += (currentCast[i].runwayScore - (currentCast[i].favoritism / 10));
            secondElims[i].performanceScore += (currentCast[i].runwayScore - (currentCast[i].favoritism / 10));
        }
        else {
            firstElims[i].performanceScore += (currentCast[i].favoritism / 10);
            secondElims[i].performanceScore += (currentCast[i].favoritism / 10);
        }
    }
    firstElims.sort((a, b) => (a.performanceScore - b.performanceScore));
    secondElims.sort((a, b) => (b.performanceScore - a.performanceScore));
    topQueens.push(firstElims[0]);
    topQueens.push(secondElims[0]);
    for (let i = 1; i < firstElims.length; i++) {
        bottomQueens.push(firstElims[i]);
        bottomQueens.push(secondElims[i]);
    }
    for (let i = 0; i < combinedCast.length; i++) {
        combinedCast[i].addToTrackRecord("SAFE  ");
    }
    secretResults();
}
function secretResults() {
    let screen = new Scene();
    screen.clean();
    episodeCount++;
    screen.createHeader("Ladies, I have made my decision...");
    screen.createBold("The queens who dominated the challenge and will have a chance to comeback are...");
    screen.createImage(topQueens[0].image, "hotpink");
    screen.createImage(topQueens[1].image, "hotpink");
    screen.createBold(topQueens[0].getName() + ", " + topQueens[1].getName() + ", condragulations! You are both one step closer from joining back the race.");
    screen.createHorizontalLine();
    screen.createBigText("That means...");
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "brown");
    }
    screen.createBold("I'm so sorry, my dears, but this is not your time. <br> Please step at the back of the stage.");
    screen.createButton("Proceed", "secretLipsync()");
}
function secretLipsync() {
    for (let i = 0; i < top2.length; i++) {
        topQueens[i].getASLipsync();
    }
    topQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let score1 = topQueens[0].lipsyncScore;
    let score2 = topQueens[1].lipsyncScore;
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your life! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    if (score1 == score2) {
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(topQueens[0].image, "violet");
    screen.createImage(topQueens[1].image, "violet");
    screen.createBold(topQueens[0].getName() + " and " + topQueens[1].getName() + ", you're both winners baby! <br> You are both officially back in the race!");
    topQueens[0].addToTrackRecord(" WIN");
    topQueens[0].favoritism += 5;
    topQueens[0].ppe += 5;
    topQueens[0].episodesOn += 1;
    topQueens[1].addToTrackRecord(" WIN");
    topQueens[1].favoritism += 5;
    topQueens[1].ppe += 5;
    topQueens[1].episodesOn += 1;
    bottomQueens.sort((a, b) => (a.lastEpisode - b.lastEpisode));
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomQueens[i].addToTrackRecord("OUT ");
        currentCast.splice(currentCast.indexOf(bottomQueens[i]), 1);
        eliminatedCast.unshift(bottomQueens[i]);
    }
    eliminatedCast.splice(eliminatedCast.indexOf(topQueens[0]), 1);
    combinedCast.push(topQueens[0]);
    topQueens[0].lastEpisode -= topQueens[0].lastEpisode;
    eliminatedCast.splice(eliminatedCast.indexOf(topQueens[1]), 1);
    combinedCast.push(topQueens[1]);
    topQueens[1].lastEpisode -= topQueens[1].lastEpisode;
    currentCast = combinedCast;
    }
    else {
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(topQueens[0].image, "violet");
    screen.createBold(`${topQueens[0].getName()}, you're a winner baby! <br> You are now officially back in the race!`);
    topQueens[0].addToTrackRecord("WIN");
    topQueens[0].favoritism += 5;
    topQueens[0].ppe += 5;
    topQueens[0].episodesOn += 1;
    screen.createImage(topQueens[1].image, "crimson");
    screen.createBold(`${topQueens[1].getName()}, you are an amazing queen but this is not your time. <br> Now, sashay away...`);
    bottomQueens.push(topQueens[1]);
    bottomQueens.sort((a, b) => (a.lastEpisode - b.lastEpisode));
    for (let i = 0; i < bottomQueens.length; i++) {
        if (bottomQueens[i] == topQueens[1]) {
            topQueens[1].addToTrackRecord("LOST");
            topQueens[1].ppe += 4;
            topQueens[1].episodesOn += 1;
            currentCast.splice(currentCast.indexOf(topQueens[1]), 1);
            eliminatedCast.unshift(topQueens[1]);
        }
        else if (bottomQueens[i] != topQueens[1]) {
            bottomQueens[i].addToTrackRecord("OUT ");
            currentCast.splice(currentCast.indexOf(bottomQueens[i]), 1);
            eliminatedCast.unshift(bottomQueens[i]);
        }
    }
    eliminatedCast.splice(eliminatedCast.indexOf(topQueens[0]), 1);
    combinedCast.push(topQueens[0]);
    topQueens[0].lastEpisode -= topQueens[0].lastEpisode;
    currentCast = combinedCast;
    }
    totalCastSize = currentCast.length;
    lsaQueen.push(" ");
    secretEpisode = false;
    screen.createButton("Proceed", "newEpisode()");
}
function lipsyncCombats() {
    let screen = new Scene();
    screen.clean();
    episodeCount++;
    screen.createHeader("LipSync Combats Eleganza!!!");
    screen.createParagraph("The eliminated queens are going to face up against each other for a chance to return to the competition.");
    let smack1 = firstElims.slice();
    let smack2 = secondElims.slice();
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].addToTrackRecord("SAFE  ")
    }
    for (var i = 0; i < smack1.length; i++) {
        screen.createHorizontalLine();
        let queen1 = smack1[i];
        let queen2 = smack2[randomNumber(0, smack2.length - 1)];
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        smack2.splice(smack2.indexOf(queen2), 1);
        screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
        screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
        lsSong();
        screen.createBold("I've made my decision.");
        let lipSync = [queen1, queen2];
        for (let i_1 = 0; i_1 < lipSync.length; i_1++) {
            lipSync[i_1].getASLipsync();
        }
        queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
        queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
        lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
        if (queen1.lipsyncScore == queen2.lipsyncScore && randomNumber(0, 100) >= 50 && eightCombine == true) {
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createImage(lipSync[1].image, "royalblue");
            screen.createBold("Condragulations! Shantay, you both stay.");
            currentCast.push(lipSync[0]);
            lipSync[0].addToTrackRecord("RTRN");
            lipSync[0].lastEpisode -= lipSync[0].lastEpisode;
            eliminatedCast.splice(eliminatedCast.indexOf(lipSync[0]), 1);
            lipSync[1].addToTrackRecord("RTRN");
            lipSync[1].lastEpisode -= lipSync[1].lastEpisode;
            eliminatedCast.splice(eliminatedCast.indexOf(lipSync[1]), 1);
        }
        else {
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay, you stay.");
            screen.createBold(lipSync[1].getName() + ", sashay away...");
            currentCast.push(lipSync[0]);
            lipSync[0].addToTrackRecord("RTRN");
            lipSync[0].lastEpisode -= lipSync[0].lastEpisode;
            eliminatedCast.splice(eliminatedCast.indexOf(lipSync[0]), 1);
            lipSync[1].addToTrackRecord("OUT ");
        }
    }
    totalCastSize = currentCast.length;
    screen.createButton("Proceed", "newEpisode()");
    episodeChallenges.push("Lipsync <br> Combats");
    lsaQueen.push(" ");
}
let smackTops = [];
function lipsyncBattles() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Lipsync Battle Royale!!!");
    screen.createParagraph("The eliminated queens are back to compete in an epic Lipsync Battle Royale for a solo chance of going back into the race.");
    let smack1 = firstElims.slice();
    let smack2 = secondElims.slice();
    let smackLosers = [];
    smackdownCharts = true;
    for (var i = 0; i < smack1.length + 1; i++) {
        screen.createHorizontalLine();
        let queen1 = smack1[0];
        let queen2 = smack1[1];
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
        screen.createBold("The time has come for you to lip-sync... for your life! Good luck, and don't fuck it up." + queen2.episodesOn);
        lsSong();
        screen.createBold("I've made my decision.");
        let lipSync = [queen1, queen2];
        for (let i_1 = 0; i_1 < lipSync.length; i_1++) {
            lipSync[i_1].getASLipsync();
        }
        lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
        screen.createImage(lipSync[0].image, "royalblue");
        screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
        if (eliminatedCast.length - i != 2) {
            smackdownRounds.push(lipSync[0].getName());
            smackdownRounds.push(lipSync[1].getName());
            }
        screen.createBold(lipSync[1].getName() + ", sashay away. ");
        if (lipSync[0] == queen1) {
            smack1.splice(smack1.indexOf(queen2), 1);
            smackLosers.push(queen2);
        }
        else {
            smack1.splice(smack1.indexOf(queen1), 1);
            smackLosers.push(queen1);
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("In this corner...")
    screen.createImage(smack1[0].image, "hotpink");
    screen.createBold(smack1[0].getName() + ", that means you will fight it out on our final battle! ");
    smackTops.push(smack1[0]);
    for (var i = 0; i < smack2.length + 1; i++) {
        screen.createHorizontalLine();
        let queen1 = smack2[0];
        let queen2 = smack2[1];
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
        screen.createBold("The time has come for you to lip-sync... for your life! Good luck, and don't fuck it up." + queen2.episodesOn);
        lsSong();
        screen.createBold("I've made my decision.");
        let lipSync = [queen1, queen2];
        for (let i_1 = 0; i_1 < lipSync.length; i_1++) {
            lipSync[i_1].getASLipsync();
        }
        lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
        screen.createImage(lipSync[0].image, "royalblue");
        screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
        if (eliminatedCast.length - i != 2) {
            smackdownRounds.push(lipSync[0].getName());
            smackdownRounds.push(lipSync[1].getName());
            }
        screen.createBold(lipSync[1].getName() + ", sashay away. ");
        if (lipSync[0] == queen1) {
            smack2.splice(smack2.indexOf(queen2), 1);
            smackLosers.push(queen2);
        }
        else {
            smack2.splice(smack2.indexOf(queen1), 1);
            smackLosers.push(queen1);
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("In this corner...")
    screen.createImage(smack2[0].image, "hotpink");
    screen.createBold(smack2[0].getName() + ", that means you will fight it out on our final battle! ");
    smackTops.push(smack2[0]);
    for (let i = 0; i <= currentCast.length - 1; i++) {
        currentCast[i].addToTrackRecord("SAFE  ");
    }
    for (let i = 0; i <= smackLosers.length - 1; i++) {
        smackLosers[i].addToTrackRecord("OUT ");
    }
    screen.createHorizontalLine();
    screen.createBigText("The final battle awaits...")
    screen.createImage(smackTops[0].image, "yellow");
    screen.createImage(smackTops[1].image, "yellow");
    screen.createBold("Both of you are one step closer into rejoining the race.");
    screen.createButton("Proceed", "smackFinalBattle()");
    episodeChallenges.push("Lipsync <br> Battles");
    lsaQueen.push(" ");
}
function smackFinalBattle() {
    for (let i = 0; i < smackTops.length; i++) {
        smackTops[i].getASLipsync();
    }
    smackTops.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let score1 = smackTops[0].lipsyncScore;
    let score2 = smackTops[1].lipsyncScore;
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Final Battle!");
    screen.createBold("For you to lip-sync... for your life! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    if (score1 == score2) {
        screen.createImage(smackTops[0].image, "violet");
        screen.createImage(smackTops[1].image, "violet");
        screen.createBold("You are both winners, baby! <br> Condragulations, you are now both back in the race!");
        smackTops[0].addToTrackRecord("RTRN");
        currentCast.push(smackTops[0]);
        eliminatedCast.splice(eliminatedCast.indexOf(smackTops[0]), 1);
        smackTops[0].lastEpisode -= smackTops[0].lastEpisode;
        smackTops[1].addToTrackRecord("RTRN");
        currentCast.push(smackTops[1]);
        eliminatedCast.splice(eliminatedCast.indexOf(smackTops[1]), 1);
        smackTops[1].lastEpisode -= smackTops[1].lastEpisode;
        smackdownRounds.push(smackTops[0].getName() + " & " + smackTops[1].getName());
        smackdownRounds.push("");
        totalCastSize = currentCast.length;
    }
    else {
        screen.createImage(smackTops[0].image, "steelblue");
        screen.createBold(smackTops[0].getName() + ", shantay, you stay. You are now back in the race!");
        smackTops[0].addToTrackRecord("RTRN");
        currentCast.push(smackTops[0]);
        eliminatedCast.splice(eliminatedCast.indexOf(smackTops[0]), 1);
        smackTops[0].lastEpisode -= smackTops[0].lastEpisode;
        smackdownRounds.push(smackTops[0].getName());
        screen.createImage(smackTops[1].image, "crimson");
        screen.createBold(smackTops[1].getName() + ", I am, sorry, my dear, but this is not your time. Now, sashay away...");
        smackTops[1].addToTrackRecord("OUT ");
        smackdownRounds.push(smackTops[1].getName());
        totalCastSize = currentCast.length;
    }
    screen.createButton("Proceed", "newEpisode()");
}
function porkchopLipsyncs() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createParagraph("After the queens enter the workroom, it's time for them to lip-sync... for their lives!");
    for (let i = 0; i < Math.floor(totalCastSize / 2); i++) {
        screen.createHorizontalLine();
        let queen1 = currentCast[randomNumber(0, currentCast.length - 1)];
        currentCast.splice(currentCast.indexOf(queen1), 1);
        let queen2 = currentCast[randomNumber(0, currentCast.length - 1)];
        currentCast.splice(currentCast.indexOf(queen2), 1);
        if (currentCast.length == 1) {
            let queen3 = currentCast[randomNumber(0, currentCast.length - 1)];
            currentCast.splice(currentCast.indexOf(queen3), 1);
            screen.createImage(queen1.image, "royalblue");
            screen.createImage(queen2.image, "royalblue");
            screen.createImage(queen3.image, "royalblue");
            screen.createBold(`${queen1.getName()}, ${queen2.getName()} and ${queen3.getName()} will lipsync...`);
            lsSong();
            let lipSync = [queen1, queen2, queen3];
            for (let i = 0; i < lipSync.length; i++) {
                lipSync[i].getASLipsync();
            }
            lipSync.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
            queen1 = lipSync[0];
            queen2 = lipSync[1];
            queen3 = lipSync[2];
            screen.createImage(queen1.image, "green");
            screen.createBold(`${queen1.getName()}, shantay you stay!`);
            screen.createImage(queen2.image, "orange");
            screen.createImage(queen3.image, "orange");
            screen.createBold(`${queen2.getName()} and ${queen3.getName()}, you're getting the porkchop...`);
            queen1.addToTrackRecord(" WIN ");
            firstCast.push(queen1);
            porkChops.push(queen2, queen3);
        }
        else {
            screen.createImage(queen1.image, "royalblue");
            screen.createImage(queen2.image, "royalblue");
            screen.createBold(`${queen1.getName()} and ${queen2.getName()} will lipsync...`);
            lsSong();
            let lipSync = [queen1, queen2];
            for (let i = 0; i < lipSync.length; i++) {
                lipSync[i].getASLipsync();
            }
            lipSync.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
            queen1 = lipSync[0];
            queen2 = lipSync[1];
            screen.createImage(queen1.image, "green");
            screen.createBold(`${queen1.getName()}, shantay you stay!`);
            screen.createImage(queen2.image, "orange");
            screen.createBold(`${queen2.getName()}, you're getting the porkchop...`);
            queen1.addToTrackRecord(" WIN ");
            firstCast.push(queen1);
            porkChops.push(queen2);
        }
    }
    screen.createButton("Proceed", "porkchopVotes()");
}
function porkchopVotes() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("A chance to return!");
    screen.createParagraph("The porkchop queens are able to get back into the competition. <br> However, they first have to give one of their fellow queens the chop!");
    for (let i = 0; i < porkChops.length; i++) {
        screen.createImage(porkChops[i].image, "black");
    }
    screen.createHorizontalLine();
    screen.createBigText("Let the votings begin!");
    let porkChoice = [];
    for (let i = 0; i < porkChops.length; i++) {
        porkChoice.push(porkChops[i]);
    }
    for (let i = 0; i < porkChops.length; i++) {
        porkChops.indexOf(porkChops[i]); {
            porkChoice.splice(porkChoice.indexOf(porkChops[i]), 1);
            porkChops[i].lipstick = porkChoice[randomNumber(0, porkChoice.length - 1)];
            porkChoice.push(porkChops[i]);
            screen.createImage(porkChops[i].image, "black");
            screen.createImage(porkChops[i].lipstick.image, "red");
            screen.createBold(porkChops[i].getName() + " voted for " + porkChops[i].lipstick.getName() + "!");
            porkChops[i].lipstick.votes++;
            }
    }
    porkChops.sort((a, b) => b.votes - a.votes);
    if (porkChops[0].votes == porkChops[1].votes) {
        screen.createHorizontalLine();
        screen.createBigText("It was a tie. Let the votings begin again!");
        let porkChoice = [];
        porkChoice.push(porkChops[0]);
        porkChoice.push(porkChops[1]);
        for (let i = 0; i < porkChops.length; i++) {
            porkChops.indexOf(porkChops[i]); {
                if (porkChops[i] == porkChoice[0] || porkChops[i] == porkChoice[1]) {
                porkChoice.splice(porkChoice.indexOf(porkChops[i]), 1);
                porkChops[i].lipstick = porkChoice[0];
                porkChoice.push(porkChops[i]);
                }
                else {
                porkChops[i].lipstick = porkChoice[randomNumber(0, porkChoice.length - 1)];
                }
                screen.createImage(porkChops[i].image, "black");
                screen.createImage(porkChops[i].lipstick.image, "red");
                screen.createBold(porkChops[i].getName() + " voted for " + porkChops[i].lipstick.getName() + "!");
                porkChops[i].lipstick.votes++;
                }
        }
        porkChops.sort((a, b) => b.votes - a.votes);
    }
    screen.createHorizontalLine();
    screen.createBigText("The votes has been casted.");
      screen.createImage(porkChops[0].image, "darkred");
      screen.createBold("The queen that will get the chop is " + porkChops[0].getName());
      porkChops[0].addToTrackRecord("ELIM");
      porkChops[0].ppe += 0;
      porkChops[0].votes -= porkChops[0].votes;
      if (porkchopPremiere == true) {
          firstCast.push(porkChops[0]);
      }
      else if (porkelimPremiere == true) {
          eliminatedCast.unshift(porkChops[0]);
      }
    for (let i = 1; i < porkChops.length; i++) {
        porkChops[i].addToTrackRecord("LOSS");
        secondCast.push(porkChops[i]);
        porkChops[i].votes -= porkChops[i].votes;
    }
    episodeChallenges.push("Porkchop");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "doublePremiere()");
}
function doublePremiereJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    screen.createImage(topQueens[0].image, "cyan");
    screen.createImage(topQueens[1].image, "cyan");
    screen.createBold(`${topQueens[0].getName()}, ${topQueens[1].getName()}, condragulations, you're the Top 2 of the week!`);
    screen.createParagraph("Nobody is going home tonight!");
    screen.createHorizontalLine();
    screen.createBold("The Top 2 will now lip-sync... for the win!");
    lsSong();
    for (let i = 0; i < topQueens.length; i++) {
        topQueens[i].getASLipsync();
    }
    topQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    screen.createImage(topQueens[0].image, "royalblue");
    screen.createBold(`${topQueens[0].getName()}, you're a winner baby!`);
    topQueens[0].addToTrackRecord("WIN");
    topQueens[0].favoritism += 5;
    topQueens[0].ppe += 2;
    topQueens[0].coinz += 5;
    if (superstars) {
        topQueens[0].starpoints += 1;
        topQueens[0].coinz += 10;
    }
    topQueens[1].addToTrackRecord("TOP2");
    topQueens[1].favoritism += 2;
    topQueens[1].ppe += 1;
    lsaQueen.push(" ");
    screen.createButton("Proceed", "doublePremiere()");
}
function nonElimJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    screen.createImage(topQueens[0].image, "cyan");
    screen.createImage(topQueens[1].image, "cyan");
    screen.createImage(topQueens[2].image, "cyan");
    screen.createImage(topQueens[3].image, "cyan");
    screen.createImage(topQueens[4].image, "cyan");
    screen.createBold("Condragulations, you're our Top 5 finalists!");
    screen.createParagraph("And the winner of our pageant is...");
    shuffle(topQueens);
    screen.createImage(topQueens[0].image, "royalblue");
    screen.createBold(topQueens[0].getName());
    screen.createHorizontalLine();
    screen.createBold("The winner will now lipsync for her pleasure!");
    lsSong();
    screen.createImage(topQueens[0].image, "royalblue");
    screen.createBold(topQueens[0].getName() + ", you're a pleasure, baby!");
    topQueens[0].addToTrackRecord("WIN");
    topQueens[0].favoritism += 5;
    topQueens[0].ppe += 2;
    topQueens[0].coinz += 5;
    if (superstars) {
        topQueens[0].coinz += 10;
        topQueens[0].starpoints += 1;
    }
    topQueens[1].addToTrackRecord("TOP5");
    topQueens[1].favoritism += 3;
    topQueens[1].ppe += 1;
    topQueens[2].addToTrackRecord("TOP5");
    topQueens[2].favoritism += 3;
    topQueens[2].ppe += 1;
    topQueens[3].addToTrackRecord("TOP5");
    topQueens[3].favoritism += 3;
    topQueens[3].ppe += 1;
    topQueens[4].addToTrackRecord("TOP5");
    topQueens[4].favoritism += 3;
    topQueens[4].ppe += 1;
    lsaQueen.push(" ");
    if (s9Premiere) {
    screen.createButton("Proceed", "surpriseQueen()", "button2");
    }
    else if (pageantPremiere) {
    screen.createButton("Proceed", "newEpisode()");
    }
}
function surpriseQueen() {
    let surpriseScreen = new Scene();
    surpriseScreen.createHorizontalLine();
    let button2 = document.querySelector("button#button2");
    button2.remove();
    for (let i = 0; i < currentCast.length; i++) {
        allQueens.splice(allQueens.indexOf(currentCast[i]), 1);
    }
    surpriseScreen.createBigText("A big surprise...");
    surpriseScreen.createParagraph("We would like to introduce another queen that will join you in the race!");
    let secretQueen = allQueens[randomNumber(0, allQueens.length - 1)];
    currentCast.push(secretQueen);
    inQueen.push(secretQueen);
    surpriseScreen.createImage(secretQueen.image, "hotpink");
    surpriseScreen.createBold("Please welcome " + secretQueen.getName() + "!");
    secretQueen.addToTrackRecord("IN");
    secretQueen.favoritism += 5;
    totalCastSize += 1;;
    surpriseScreen.createButton("Proceed", "newEpisode()");
}
let firstHalfQueens = [];
let secondHalfQueens = [];
let firstHalfStart = false;
function splitCastJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBigText("This season we are doing things differently.");
    screen.createBold("Based on your performances, the audience voted which of you did the best. <br> When I call your name, please step forward.");
    shuffle(topQueens);
    for (let i = 0; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image, "steelblue");
        topQueens[i].addToTrackRecord("SAFE");
        topQueens[i].ppe += 3;
        topQueens[i].favoritism += 3;
        firstHalfQueens.push(topQueens[i]);
    }
    screen.createBold("", "firstBatch");
    let firstBatch = document.getElementById("firstBatch");
    for (let i = 0; i < topQueens.length; i++) {
        firstBatch.innerHTML += topQueens[i].getName() + ", ";
    }
    firstBatch.innerHTML += "great job this week, ladies, you are all safe.";
    screen.createHorizontalLine();
    screen.createBigText("And that means...");
    screen.createBold("I am sorry, my dears, but you are all getting the chop!");
    shuffle(bottomQueens);
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "crimson");
        bottomQueens[i].addToTrackRecord("OUT ");
        bottomQueens[i].ppe += 1;
        secondHalfQueens.push(bottomQueens[i]);
    }
    screen.createBold("", "secondBatch");
    let secondBatch = document.getElementById("secondBatch");
    for (let i = 0; i < bottomQueens.length; i++) {
        secondBatch.innerHTML += bottomQueens[i].getName() + ", ";
    }
    secondBatch.innerHTML += "now, sashay away.";
    firstHalfStart = true;
    lsaQueen.push(" ");
    screen.createButton("Proceed", "splitCastEpisodes()");
}
function top2nonElimJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    screen.createImage(topQueens[0].image, "cyan");
    screen.createImage(topQueens[1].image, "cyan");
    screen.createBold(topQueens[0].getName() + ", " + topQueens[1].getName() + ", condragulations, you're the Top 2 queens of the week!");
    screen.createHorizontalLine();
    for (let i = 2; i < topQueens.length; i++) {
    screen.createImage(topQueens[i].image, "cyan");
    topQueens[i].addToTrackRecord("HIGH");
    topQueens[i].ppe += 4;
    topQueens[i].favoritism += 2;
    }
    screen.createParagraph("", "highQueens");
    let highQueens = document.getElementById("highQueens");
    for (let i = 2; i < topQueens.length; i++) {
    highQueens.innerHTML += topQueens[i].getName() + ", ";
    }
    highQueens.innerHTML += "great job this week, ladies. You are all safe."
    screen.createHorizontalLine();
    screen.createBold("This week no one is going home but there should only be one winner.");
    screen.createImage(topQueens[0].image, "hotpink");
    screen.createImage(topQueens[1].image, "hotpink");
    screen.createBold(topQueens[0].getName() + ", " + topQueens[1].getName() + ", both of you will be lipsyncing for the win!");
    top2.push(topQueens[0]);
    top2.push(topQueens[1]);
    screen.createButton("Proceed", "top2Lipsync()");
}
function top2Lipsync() {
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b._lipsyncStat - a._lipsyncStat));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for the win! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(top2[0].image, "royalblue");
    screen.createBold(`${top2[0].getName()}, you're a winner baby!`);
    screen.createImage(top2[1].image, "cyan");
    screen.createBold(`${top2[1].getName()}, keep the fire burning!`);
    if (extraPremiere && episodeCount == 1) {
    top2[0].addToTrackRecord("WIN");
    top2[0].favoritism += 5;
    top2[0].ppe += 2;
    top2[0].coinz += 5;
    top2[1].addToTrackRecord("TOP2");
    top2[1].favoritism += 4;
    top2[1].ppe += 1;
    }
    else if (!extraPremiere || extraPremiere && episodeCount > 1) {
    top2[0].addToTrackRecord("WIN");
    top2[0].favoritism += 5;
    top2[0].ppe += 6;
    top2[0].coinz += 5;
    top2[1].addToTrackRecord("TOP2");
    top2[1].favoritism += 4;
    top2[1].ppe += 5;
    }
    lsaQueen.push(" ");
    if (showgirlShowdown == true && currentCast.length == 5)
    final5Episode = true;
    screen.createButton("Proceed", "newEpisode()");
}
function halfWayElimJudging() {
    let judgingScreen = new Scene();
    judgingScreen.clean();
    judgingScreen.createHeader("Judging!");
    judgingScreen.createBold("Based on tonight's performances...");
    for (let i = 0; i < topQueens.length; i++) {
        judgingScreen.createImage(topQueens[i].image, "cyan");
        }
    for (let i = 0; i < bottomQueens.length; i++) {
        judgingScreen.createImage(bottomQueens[i].image, "cyan");
        }
        judgingScreen.createBold("", "judged");
        let judged = document.getElementById("judged");
        for (let i = 0; i < topQueens.length; i++) {
            judged.innerHTML += `${topQueens[i].getName()}, `;
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            judged.innerHTML += `${bottomQueens[i].getName()}, `;
        }
        judged.innerHTML += "you represent the tops and bottoms of the week.";
        judgingScreen.createHorizontalLine();
        judgingScreen.createParagraph("", "safeQueens");
        let safeQueens = document.getElementById("safeQueens");
    for (let i = 0; i < currentCast.length; i++) {
        if (topQueens.indexOf(currentCast[i]) == -1 && bottomQueens.indexOf(currentCast[i]) == -1) {
            safeQueens.innerHTML += `${currentCast[i].getName()}, `;
            currentCast[i].addToTrackRecord("SAFE");
            currentCast[i].ppe += 3;
        }
    }
    safeQueens.innerHTML += "you are safe.";
    judgingScreen.createButton("Proceed", "halfWayDecisions()");
}
function halfWayDecisions() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge!");
        for (let i = 1; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
    screen.createHorizontalLine();
    screen.createBigText("We are expecting for more...");
    for (let i = 0; i < bottomQueens.length; i++)
        screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
        btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm2.innerHTML += "this week, none of you deserves to be safe. <br> I'm not sorry, my dears, but you are all up for elimination.";
    if (selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == false || selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == true && currentCast.length > 5) {
    screen.createHorizontalLine();
    screen.createBigText("Select The Outcome");
    let main = document.querySelector("div#MainBlock");
    let centering = document.createElement("center");
    let select = document.createElement("select");
    select.setAttribute("id", "lsOutcome");
    let basicoption = document.createElement("option");
    basicoption.innerHTML += "Basic Lipsync";
    select.add(basicoption);
    let halfoption = document.createElement("option");
    halfoption.innerHTML += "Eliminate Half";
    select.add(halfoption);
    let onlyoneoption = document.createElement("option");
    onlyoneoption.innerHTML += "Only One Survives";
    select.add(onlyoneoption);
    centering.appendChild(select);
    main.appendChild(centering);
    screen.createParagraph("");
    screen.createButton("Select", "halfwayChoose()", "chosenOutcome");
    }
    else {
    screen.createButton("Proceed", "halfWaylipSync()");
    }
}
function halfwayChoose() {
    let screen = new Scene();
    let select = document.getElementById("lsOutcome");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("chosenOutcome");
    if (value == "Eliminate Half") {
        surviveHalf = true;
    }
    else if (value == "Only One Survives") {
        surviveOne = true;
    }
    button.remove();
    select.remove();
    screen.createBold(value + " was the selected outcome!");
    screen.createButton("Proceed", "halfWaylipSync()");
}
function halfWaylipSync() {
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomQueens[i].getLipsync();
    }
    bottomQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("I've made my decision.");
    let score1 = bottomQueens[0].lipsyncScore + bottomQueens[0].favoritism - bottomQueens[0].unfavoritism;
    let score2 = bottomQueens[1].lipsyncScore + bottomQueens[1].favoritism - bottomQueens[1].unfavoritism;
    for (let i = 0; i < bottomQueens.length; i++) {
    let score = bottomQueens[i].lipsyncScore + bottomQueens[i].favoritism - bottomQueens[i].unfavoritism;
    }
    let partyOneElim = false;
    let partyTwoElim = false;
    let goldBot = false;
    let goldBot2 = false;
    let halfPoint = 0;
    if (bottomQueens.length % 2 == 0) {
        halfPoint = bottomQueens.length / 2;

    }
    else if (bottomQueens.length % 2 == 1) {
        halfPoint = (bottomQueens.length + 1) / 2;
    }
    for (let i = halfPoint; i < bottomQueens.length; i++) {
        if (bottomQueens[i] == goldenTicket[0]) {
            goldBot = true;
        }
    }
    for (let i = 1; i < bottomQueens.length; i++) {
        if (bottomQueens[i] == goldenTicket[0]) {
            goldBot2 = true;
        }
    }
    if (randomNumber(0, 100) >= 85 && bottomQueens.length % 2 == 0 && goldticket && ticketSave == false && goldBot == true && splitpremiere == false && selectOutcome == false || goldticket && ticketSave == false && goldBot == true && selectOutcome == true && surviveHalf == true) {
        for (let i = 0; i < halfPoint; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
        }
        surviveHalf = false;
        screen.createHorizontalLine();
        screen.createBold("I am sorry, my dears, but all of your fates rest at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(goldenTicket[0].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        let chocElims = [];
        for (let i = halfPoint; i < bottomQueens.length; i++) {
            chocElims.push(bottomQueens[i]);
        }
        chocElims.splice(chocElims.indexOf(goldenTicket[0]), 1);
        for (let i = 0; i < chocElims.length; i++) {
            screen.createImage(chocElims[i].image, "red");
        }
        screen.createBold("", "elimQueens");
        let elimQueens = document.getElementById("elimQueens");
        for (let i = 0; i < chocElims.length; i++) {
        elimQueens.innerHTML += `${chocElims[i].getName()}, `;
        }
        elimQueens.innerHTML += "I am sorry, my dears, but this is not your time. Now, sashay away.";
        for (let i = 0; i < chocElims.length; i++) {
            chocElims[i].addToTrackRecord("ELIM");
            chocElims[i].ppe += 0;
            chocElims[i].lastEpisode += episodeCount;
            eliminatedCast.unshift(chocElims[i]);
            currentCast.splice(currentCast.indexOf(chocElims[i]), 1);
        }
        ticketSave = true;
        if (currentCast.length == 5) {
            top5Choc = true;
        }
        let rubukeOne = false;
        let rubukeTwo = false;
        let dragPresOneElim = false;
        let dragPresTwoElim = false;
        let presOneUnsave = false;
        let presTwoUnsave = false;
        chocElims.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            for (let i = 0; i < chocElims.length; i++) {
            if (dragPresidentOne[0] == chocElims[i]) {
                partyOneElim = true;
                dragPresOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == chocElims[i]) {
                partyTwoElim = true;
                dragPresTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyOneMembers[i] == chocElims[v]) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
        }
        partyOneJury.push(PartyOneMembers[i]);
        }
        if (partyOneElim == true) {
            for (let i = 0; i < partyOneBottoms.length; i++) {
            if (partyOneBottoms != dragPresidentOne[0]) {
                partyOneJury.splice(partyOneJury.indexOf(partyOneBottoms[i]), 1);
            }
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyTwoMembers[i] == chocElims[v]) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
        }
        partyTwoJury.push(PartyOneMembers[i]);
        }
        if (partyTwoElim == true) {
            for (let i = 0; i < partyTwoBottoms.length; i++) {
            if (partyTwoBottoms != dragPresidentTwo[0]) {
                partyTwoJury.splice(partyTwoJury.indexOf(partyTwoBottoms[i]), 1);
            }
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length >= 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length >= 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (dragPresOneElim == true) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (dragPresOneElim == true) {
                    presOneUnsave = true;
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    screen.createImage(partyOneBottoms[i].image, "black");
                }
                screen.createBold("", "ruproved");
                let ruproved = document.querySelector("b#ruproved");
                ruproved.innerHTML += "The Tucking Party has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    ruproved.innerHTML += partyOneBottoms[i].getName() + ", ";
                }
                ruproved.innerHTML += "as it was decided so it shall be done.";
                if (presOneUnsave == true) {
                    partyOneBottoms.splice(partyOneBottoms.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneBottoms.length >= 1) {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (dragPresTwoElim == true) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (dragPresTwoElim == true) {
                    presTwoUnsave = true;
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    screen.createImage(partyTwoBottoms[i].image, "black");
                }
                screen.createBold("", "ruprovedTwo");
                let ruprovedTwo = document.querySelector("b#ruprovedTwo");
                ruprovedTwo.innerHTML += "The Party Hoes has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    ruprovedTwo.innerHTML += partyTwoBottoms[i].getName() + ", ";
                }
                ruprovedTwo.innerHTML += "as it was decided so it shall be done.";
                if (presTwoUnsave == true) {
                    partyTwoBottoms.splice(partyTwoBottoms.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentOne[0]), 1);
                    if (partyTwoBottoms.length >= 1) {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                }
            }
        }
        }
    }
    else if (randomNumber(0, 100) >= 85 && bottomQueens.length % 2 == 0 && goldticket && ticketSave == false && goldBot == false && splitpremiere == false && selectOutcome == false || goldticket && ticketSave == false && goldBot == false && selectOutcome == true && surviveHalf == true) {
        for (let i = 0; i < halfPoint; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
        }
        surviveHalf = false;
        screen.createHorizontalLine();
        screen.createBold("I am sorry, my dears, but all of your fates rest at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        let chocElims = [];
        for (let i = halfPoint; i < bottomQueens.length; i++) {
            chocElims.push(bottomQueens[i]);
        }
        for (let i = 0; i < chocElims.length; i++) {
            screen.createImage(chocElims[i].image, "red");
        }
        screen.createBold("", "elimQueens");
        let elimQueens = document.getElementById("elimQueens");
        elimQueens.innerHTML += "IT'S ALL CHOCOLATE! <br>";
        for (let i = 0; i < chocElims.length; i++) {
        elimQueens.innerHTML += `${chocElims[i].getName()}, `;
        }
        elimQueens.innerHTML += "I am sorry, my dears, but this is not your time. Now, sashay away.";
        for (let i = 0; i < chocElims.length; i++) {
            chocElims[i].addToTrackRecord("ELIM");
            chocElims[i].ppe += 0;
            chocElims[i].lastEpisode += episodeCount;
            eliminatedCast.unshift(chocElims[i]);
            currentCast.splice(currentCast.indexOf(chocElims[i]), 1);
        }
        let rubukeOne = false;
        let rubukeTwo = false;
        let dragPresOneElim = false;
        let dragPresTwoElim = false;
        let presOneUnsave = false;
        let presTwoUnsave = false;
        chocElims.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            for (let i = 0; i < chocElims.length; i++) {
            if (dragPresidentOne[0] == chocElims[i]) {
                partyOneElim = true;
                dragPresOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == chocElims[i]) {
                partyTwoElim = true;
                dragPresTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyOneMembers[i] == chocElims[v]) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
        }
        partyOneJury.push(PartyOneMembers[i]);
        }
        if (partyOneElim == true) {
            for (let i = 0; i < partyOneBottoms.length; i++) {
            if (partyOneBottoms != dragPresidentOne[0]) {
                partyOneJury.splice(partyOneJury.indexOf(partyOneBottoms[i]), 1);
            }
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyTwoMembers[i] == chocElims[v]) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
        }
        partyTwoJury.push(PartyOneMembers[i]);
        }
        if (partyTwoElim == true) {
            for (let i = 0; i < partyTwoBottoms.length; i++) {
            if (partyTwoBottoms != dragPresidentTwo[0]) {
                partyTwoJury.splice(partyTwoJury.indexOf(partyTwoBottoms[i]), 1);
            }
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length >= 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length >= 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (dragPresOneElim == true) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (dragPresOneElim == true) {
                    presOneUnsave = true;
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    screen.createImage(partyOneBottoms[i].image, "black");
                }
                screen.createBold("", "ruproved");
                let ruproved = document.querySelector("b#ruproved");
                ruproved.innerHTML += "The Tucking Party has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    ruproved.innerHTML += partyOneBottoms[i].getName() + ", ";
                }
                ruproved.innerHTML += "as it was decided so it shall be done.";
                if (presOneUnsave == true) {
                    partyOneBottoms.splice(partyOneBottoms.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneBottoms.length >= 1) {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (dragPresTwoElim == true) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (dragPresTwoElim == true) {
                    presTwoUnsave = true;
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    screen.createImage(partyTwoBottoms[i].image, "black");
                }
                screen.createBold("", "ruprovedTwo");
                let ruprovedTwo = document.querySelector("b#ruprovedTwo");
                ruprovedTwo.innerHTML += "The Party Hoes has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    ruprovedTwo.innerHTML += partyTwoBottoms[i].getName() + ", ";
                }
                ruprovedTwo.innerHTML += "as it was decided so it shall be done.";
                if (presTwoUnsave == true) {
                    partyTwoBottoms.splice(partyTwoBottoms.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentOne[0]), 1);
                    if (partyTwoBottoms.length >= 1) {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                }
            }
        }
        }
    }
    else if (randomNumber(0, 100) >= 55 && bottomQueens.length == 3 && goldticket && ticketSave == false && goldBot2 == true && splitpremiere == false && selectOutcome == false || goldticket && ticketSave == false && goldBot2 == true && selectOutcome == true && surviveOne == true) {
        for (let i = 0; i < 1; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
        }
        surviveOne = false;
        screen.createHorizontalLine();
        screen.createBold("I am sorry, my dears, but all of your fates rest at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(goldenTicket[0].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        let chocElims = [];
        for (let i = 1; i < bottomQueens.length; i++) {
            chocElims.push(bottomQueens[i]);
        }
        chocElims.splice(chocElims.indexOf(goldenTicket[0]), 1);
        for (let i = 0; i < chocElims.length; i++) {
            screen.createImage(chocElims[i].image, "red");
        }
        screen.createBold("", "elimQueens");
        let elimQueens = document.getElementById("elimQueens");
        for (let i = 0; i < chocElims.length; i++) {
        elimQueens.innerHTML += `${chocElims[i].getName()}, `;
        }
        elimQueens.innerHTML += "I am sorry, my dears, but this is not your time. Now, sashay away.";
        for (let i = 0; i < chocElims.length; i++) {
            chocElims[i].addToTrackRecord("ELIM");
            chocElims[i].ppe += 0;
            chocElims[i].lastEpisode += episodeCount;
            eliminatedCast.unshift(chocElims[i]);
            currentCast.splice(currentCast.indexOf(chocElims[i]), 1);
        }
        ticketSave = true;
        let rubukeOne = false;
        let rubukeTwo = false;
        let dragPresOneElim = false;
        let dragPresTwoElim = false;
        let presOneUnsave = false;
        let presTwoUnsave = false;
        chocElims.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            for (let i = 0; i < chocElims.length; i++) {
            if (dragPresidentOne[0] == chocElims[i]) {
                partyOneElim = true;
                dragPresOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == chocElims[i]) {
                partyTwoElim = true;
                dragPresTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyOneMembers[i] == chocElims[v]) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
        }
        partyOneJury.push(PartyOneMembers[i]);
        }
        if (partyOneElim == true) {
            for (let i = 0; i < partyOneBottoms.length; i++) {
            if (partyOneBottoms != dragPresidentOne[0]) {
                partyOneJury.splice(partyOneJury.indexOf(partyOneBottoms[i]), 1);
            }
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyTwoMembers[i] == chocElims[v]) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
        }
        partyTwoJury.push(PartyOneMembers[i]);
        }
        if (partyTwoElim == true) {
            for (let i = 0; i < partyTwoBottoms.length; i++) {
            if (partyTwoBottoms != dragPresidentTwo[0]) {
                partyTwoJury.splice(partyTwoJury.indexOf(partyTwoBottoms[i]), 1);
            }
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length >= 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length >= 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (dragPresOneElim == true) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (dragPresOneElim == true) {
                    presOneUnsave = true;
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    screen.createImage(partyOneBottoms[i].image, "black");
                }
                screen.createBold("", "ruproved");
                let ruproved = document.querySelector("b#ruproved");
                ruproved.innerHTML += "The Tucking Party has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    ruproved.innerHTML += partyOneBottoms[i].getName() + ", ";
                }
                ruproved.innerHTML += "as it was decided so it shall be done.";
                if (presOneUnsave == true) {
                    partyOneBottoms.splice(partyOneBottoms.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneBottoms.length >= 1) {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (dragPresTwoElim == true) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (dragPresTwoElim == true) {
                    presTwoUnsave = true;
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    screen.createImage(partyTwoBottoms[i].image, "black");
                }
                screen.createBold("", "ruprovedTwo");
                let ruprovedTwo = document.querySelector("b#ruprovedTwo");
                ruprovedTwo.innerHTML += "The Party Hoes has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    ruprovedTwo.innerHTML += partyTwoBottoms[i].getName() + ", ";
                }
                ruprovedTwo.innerHTML += "as it was decided so it shall be done.";
                if (presTwoUnsave == true) {
                    partyTwoBottoms.splice(partyTwoBottoms.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentOne[0]), 1);
                    if (partyTwoBottoms.length >= 1) {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                }
            }
        }
        }
    }
    else if (randomNumber(0, 100) >= 45 && bottomQueens.length == 3 && currentCast.length == 7 && goldticket && ticketSave == false && goldBot2 == false && splitpremiere == false && selectOutcome == false || goldticket && ticketSave == false && goldBot2 == false && selectOutcome == true && surviveOne == true) {
        for (let i = 0; i < 1; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
        }
        surviveOne = false;
        screen.createHorizontalLine();
        screen.createBold("I am sorry, my dears, but all of your fates rest at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        let chocElims = [];
        for (let i = 1; i < bottomQueens.length; i++) {
            chocElims.push(bottomQueens[i]);
        }
        for (let i = 0; i < chocElims.length; i++) {
            screen.createImage(chocElims[i].image, "red");
        }
        screen.createBold("", "elimQueens");
        let elimQueens = document.getElementById("elimQueens");
        elimQueens.innerHTML += "IT'S ALL CHOCOLATE! <br>";
        for (let i = 0; i < chocElims.length; i++) {
        elimQueens.innerHTML += `${chocElims[i].getName()}, `;
        }
        elimQueens.innerHTML += "I am sorry, my dears, but this is not your time. Now, sashay away.";
        for (let i = 0; i < chocElims.length; i++) {
            chocElims[i].addToTrackRecord("ELIM");
            chocElims[i].ppe += 0;
            chocElims[i].lastEpisode += episodeCount;
            eliminatedCast.unshift(chocElims[i]);
            currentCast.splice(currentCast.indexOf(chocElims[i]), 1);
        }
        let rubukeOne = false;
        let rubukeTwo = false;
        let dragPresOneElim = false;
        let dragPresTwoElim = false;
        let presOneUnsave = false;
        let presTwoUnsave = false;
        chocElims.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            for (let i = 0; i < chocElims.length; i++) {
            if (dragPresidentOne[0] == chocElims[i]) {
                partyOneElim = true;
                dragPresOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == chocElims[i]) {
                partyTwoElim = true;
                dragPresTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyOneMembers[i] == chocElims[v]) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
        }
        partyOneJury.push(PartyOneMembers[i]);
        }
        if (partyOneElim == true) {
            for (let i = 0; i < partyOneBottoms.length; i++) {
            if (partyOneBottoms != dragPresidentOne[0]) {
                partyOneJury.splice(partyOneJury.indexOf(partyOneBottoms[i]), 1);
            }
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyTwoMembers[i] == chocElims[v]) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
        }
        partyTwoJury.push(PartyOneMembers[i]);
        }
        if (partyTwoElim == true) {
            for (let i = 0; i < partyTwoBottoms.length; i++) {
            if (partyTwoBottoms != dragPresidentTwo[0]) {
                partyTwoJury.splice(partyTwoJury.indexOf(partyTwoBottoms[i]), 1);
            }
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length >= 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length >= 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (dragPresOneElim == true) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (dragPresOneElim == true) {
                    presOneUnsave = true;
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    screen.createImage(partyOneBottoms[i].image, "black");
                }
                screen.createBold("", "ruproved");
                let ruproved = document.querySelector("b#ruproved");
                ruproved.innerHTML += "The Tucking Party has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    ruproved.innerHTML += partyOneBottoms[i].getName() + ", ";
                }
                ruproved.innerHTML += "as it was decided so it shall be done.";
                if (presOneUnsave == true) {
                    partyOneBottoms.splice(partyOneBottoms.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneBottoms.length >= 1) {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (dragPresTwoElim == true) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (dragPresTwoElim == true) {
                    presTwoUnsave = true;
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    screen.createImage(partyTwoBottoms[i].image, "black");
                }
                screen.createBold("", "ruprovedTwo");
                let ruprovedTwo = document.querySelector("b#ruprovedTwo");
                ruprovedTwo.innerHTML += "The Party Hoes has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    ruprovedTwo.innerHTML += partyTwoBottoms[i].getName() + ", ";
                }
                ruprovedTwo.innerHTML += "as it was decided so it shall be done.";
                if (presTwoUnsave == true) {
                    partyTwoBottoms.splice(partyTwoBottoms.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentOne[0]), 1);
                    if (partyTwoBottoms.length >= 1) {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                }
            }
        }
        }
    }
    else if (randomNumber(0, 100) >= 0 && goldticket && ticketSave == false && bottomQueens[bottomQueens.length - 1] == goldenTicket[0] && splitpremiere == false && selectOutcome == false || selectOutcome == true && surviveHalf == false && surviveOne == false && goldticket && ticketSave == false && bottomQueens[bottomQueens.length - 1] == goldenTicket[0]) {
        for (let i = 0; i < bottomQueens.length - 1; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
        }
        screen.createHorizontalLine();
        screen.createBold("Now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(bottomQueens[bottomQueens.length - 1].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        ticketSave = true;
        if (currentCast.length == 5) {
            top5Choc = true;
        }
    }
    else if (randomNumber(0, 100) >= 0 && goldticket && ticketSave == false && bottomQueens[bottomQueens.length - 1] != goldenTicket[0] && splitpremiere == false && selectOutcome == false || selectOutcome == true && surviveHalf == false && surviveOne == false && goldticket && ticketSave == false && bottomQueens[bottomQueens.length - 1] != goldenTicket[0]) {
        for (let i = 0; i < bottomQueens.length - 1; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
        }
        screen.createHorizontalLine();
        screen.createBold("Now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(bottomQueens[bottomQueens.length - 1].image, "red");
        screen.createBold("IT'S CHOCOLATE! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", sashay away.");
        bottomQueens[bottomQueens.length - 1].addToTrackRecord("ELIM");
        bottomQueens[bottomQueens.length - 1].ppe += 0;
        if (splitpremiere == false) {
        bottomQueens[bottomQueens.length - 1].lastEpisode += episodeCount;
        }
        eliminatedCast.unshift(bottomQueens[bottomQueens.length - 1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
        bottomQueens.splice(0, bottomQueens.length - 1)
        rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne[0] == bottomQueens[bottomQueens.length - 1]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == bottomQueens[bottomQueens.length - 1]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[bottomQueens.length - 1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[bottomQueens.length - 1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && bottomQueens[bottomQueens.length - 1].favoritism > 6 && bottomQueens[bottomQueens.length - 1].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && bottomQueens[bottomQueens.length - 1].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", you are safe to slay another day!");
                bottomQueens[bottomQueens.length - 1].trackRecord.pop();
                bottomQueens[bottomQueens.length - 1].addToTrackRecord("KEPT");
                bottomQueens[bottomQueens.length - 1].unfavoritism -= 5;
                bottomQueens[bottomQueens.length - 1].lastEpisode = 0;
                currentCast.push(bottomQueens[bottomQueens.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", you are safe to slay another day!");
                bottomQueens[bottomQueens.length - 1].trackRecord.pop();
                bottomQueens[bottomQueens.length - 1].addToTrackRecord(" KEPT ");
                bottomQueens[bottomQueens.length - 1].unfavoritism -= 5;
                bottomQueens[bottomQueens.length - 1].lastEpisode = 0;
                currentCast.push(bottomQueens[bottomQueens.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                }
            }
        }
        }
    }
    else {
        if (randomNumber(0, 100) >= 85 && bottomQueens.length % 2 == 0 && selectOutcome == false || selectOutcome == true && surviveHalf == true) {
            for (let i = 0; i < halfPoint; i++) {
            screen.createImage(bottomQueens[i].image, "tomato");
            screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
            bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
            bottomQueens[i].unfavoritism += 3;
            bottomQueens[i].ppe += 1;
            }
            for (let i = halfPoint; i < bottomQueens.length; i++) {
            screen.createImage(bottomQueens[i].image, "red");
            }
            surviveHalf = false;
            screen.createBold("", "elimQueens");
            let elimQueens = document.getElementById("elimQueens");
            for (let i = halfPoint; i < bottomQueens.length; i++) {
            elimQueens.innerHTML += `${bottomQueens[i].getName()}, `;
            }
            elimQueens.innerHTML += "I am sorry, my dears, but all of you must sashay away.";
            let chocElims = [];
            for (let i = halfPoint; i < bottomQueens.length; i++) {
            chocElims.push(bottomQueens[i]);
            bottomQueens[i].addToTrackRecord("ELIM");
            bottomQueens[i].ppe += 0;
            bottomQueens[i].lastEpisode += episodeCount;
            eliminatedCast.unshift(bottomQueens[i]);
            currentCast.splice(currentCast.indexOf(bottomQueens[i]), 1);
            }
        let rubukeOne = false;
        let rubukeTwo = false;
        let dragPresOneElim = false;
        let dragPresTwoElim = false;
        let presOneUnsave = false;
        let presTwoUnsave = false;
        chocElims.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            for (let i = 0; i < chocElims.length; i++) {
            if (dragPresidentOne[0] == chocElims[i]) {
                partyOneElim = true;
                dragPresOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == chocElims[i]) {
                partyTwoElim = true;
                dragPresTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyOneMembers[i] == chocElims[v]) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
        }
        partyOneJury.push(PartyOneMembers[i]);
        }
        if (partyOneElim == true) {
            for (let i = 0; i < partyOneBottoms.length; i++) {
            if (partyOneBottoms != dragPresidentOne[0]) {
                partyOneJury.splice(partyOneJury.indexOf(partyOneBottoms[i]), 1);
            }
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyTwoMembers[i] == chocElims[v]) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
        }
        partyTwoJury.push(PartyOneMembers[i]);
        }
        if (partyTwoElim == true) {
            for (let i = 0; i < partyTwoBottoms.length; i++) {
            if (partyTwoBottoms != dragPresidentTwo[0]) {
                partyTwoJury.splice(partyTwoJury.indexOf(partyTwoBottoms[i]), 1);
            }
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length >= 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length >= 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (dragPresOneElim == true) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (dragPresOneElim == true) {
                    presOneUnsave = true;
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    screen.createImage(partyOneBottoms[i].image, "black");
                }
                screen.createBold("", "ruproved");
                let ruproved = document.querySelector("b#ruproved");
                ruproved.innerHTML += "The Tucking Party has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    ruproved.innerHTML += partyOneBottoms[i].getName() + ", ";
                }
                ruproved.innerHTML += "as it was decided so it shall be done.";
                if (presOneUnsave == true) {
                    partyOneBottoms.splice(partyOneBottoms.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneBottoms.length >= 1) {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (dragPresTwoElim == true) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (dragPresTwoElim == true) {
                    presTwoUnsave = true;
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    screen.createImage(partyTwoBottoms[i].image, "black");
                }
                screen.createBold("", "ruprovedTwo");
                let ruprovedTwo = document.querySelector("b#ruprovedTwo");
                ruprovedTwo.innerHTML += "The Party Hoes has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    ruprovedTwo.innerHTML += partyTwoBottoms[i].getName() + ", ";
                }
                ruprovedTwo.innerHTML += "as it was decided so it shall be done.";
                if (presTwoUnsave == true) {
                    partyTwoBottoms.splice(partyTwoBottoms.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentOne[0]), 1);
                    if (partyTwoBottoms.length >= 1) {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                }
            }
        }
        }
        }
        else if (randomNumber(0, 100) >= 70 && bottomQueens.length == 3 && currentCast.length != 7 && selectOutcome == false || randomNumber(0, 100) >= 35 && bottomQueens.length == 3 && currentCast.length == 7 && selectOutcome == false || selectOutcome == true && surviveOne == true) {
            for (let i = 0; i < 1; i++) {
            screen.createImage(bottomQueens[i].image, "tomato");
            screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
            bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
            bottomQueens[i].unfavoritism += 3;
            bottomQueens[i].ppe += 1;
            }
            surviveOne = false;
            for (let i = 1; i < bottomQueens.length; i++) {
            screen.createImage(bottomQueens[i].image, "red");
            }
            screen.createBold("", "elimQueens");
            let elimQueens = document.getElementById("elimQueens");
            for (let i = 1; i < bottomQueens.length; i++) {
            elimQueens.innerHTML += `${bottomQueens[i].getName()}, `;
            }
            elimQueens.innerHTML += "I am sorry, my dears, but I must ask you to sashay away.";
            let chocElims = [];
            for (let i = 1; i < bottomQueens.length; i++) {
            chocElims.push(bottomQueens[i]);
            bottomQueens[i].addToTrackRecord("ELIM");
            bottomQueens[i].ppe += 0;
            bottomQueens[i].lastEpisode += episodeCount;
            eliminatedCast.unshift(bottomQueens[i]);
            currentCast.splice(currentCast.indexOf(bottomQueens[i]), 1);
            }
        let rubukeOne = false;
        let rubukeTwo = false;
        let dragPresOneElim = false;
        let dragPresTwoElim = false;
        let presOneUnsave = false;
        let presTwoUnsave = false;
        chocElims.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            for (let i = 0; i < chocElims.length; i++) {
            if (dragPresidentOne[0] == chocElims[i]) {
                partyOneElim = true;
                dragPresOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == chocElims[i]) {
                partyTwoElim = true;
                dragPresTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyOneMembers[i] == chocElims[v]) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
        }
        partyOneJury.push(PartyOneMembers[i]);
        }
        if (partyOneElim == true) {
            for (let i = 0; i < partyOneBottoms.length; i++) {
            if (partyOneBottoms != dragPresidentOne[0]) {
                partyOneJury.splice(partyOneJury.indexOf(partyOneBottoms[i]), 1);
            }
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
        for (let v = 0; v < chocElims.length; v++) {
            if (PartyTwoMembers[i] == chocElims[v]) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
        }
        partyTwoJury.push(PartyOneMembers[i]);
        }
        if (partyTwoElim == true) {
            for (let i = 0; i < partyTwoBottoms.length; i++) {
            if (partyTwoBottoms != dragPresidentTwo[0]) {
                partyTwoJury.splice(partyTwoJury.indexOf(partyTwoBottoms[i]), 1);
            }
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length >= 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length >= 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (dragPresOneElim == true) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (dragPresOneElim == true) {
                    presOneUnsave = true;
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    screen.createImage(partyOneBottoms[i].image, "black");
                }
                screen.createBold("", "ruproved");
                let ruproved = document.querySelector("b#ruproved");
                ruproved.innerHTML += "The Tucking Party has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyOneBottoms.length; i++) {
                    ruproved.innerHTML += partyOneBottoms[i].getName() + ", ";
                }
                ruproved.innerHTML += "as it was decided so it shall be done.";
                if (presOneUnsave == true) {
                    partyOneBottoms.splice(partyOneBottoms.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneBottoms.length >= 1) {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyOneBottoms.length; i++) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[i]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (dragPresTwoElim == true) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (dragPresTwoElim == true) {
                    presTwoUnsave = true;
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    screen.createImage(partyTwoBottoms[i].image, "black");
                }
                screen.createBold("", "ruprovedTwo");
                let ruprovedTwo = document.querySelector("b#ruprovedTwo");
                ruprovedTwo.innerHTML += "The Party Hoes has made a decision! The elimination has been RuProved! <br>";
                for (let i = 0; i < partyTwoBottoms.length; i++) {
                    ruprovedTwo.innerHTML += partyTwoBottoms[i].getName() + ", ";
                }
                ruprovedTwo.innerHTML += "as it was decided so it shall be done.";
                if (presTwoUnsave == true) {
                    partyTwoBottoms.splice(partyTwoBottoms.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentOne[0]), 1);
                    if (partyTwoBottoms.length >= 1) {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                    }
                }
                else {
                    for (let i = 0; i < partyTwoBottoms.length; i++) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[i]), 1);
                    }
                }
            }
        }
        }
        }
        else {
            for (let i = 0; i < bottomQueens.length - 1; i++) {
            screen.createImage(bottomQueens[i].image, "tomato");
            screen.createBold(bottomQueens[i].getName() + ", shantay, you stay.");
            bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
            bottomQueens[i].unfavoritism += 3;
            bottomQueens[i].ppe += 1;
            }
            screen.createImage(bottomQueens[bottomQueens.length - 1].image, "red");
            screen.createBold(bottomQueens[bottomQueens.length - 1].getName() + ", sashay away...");
            bottomQueens[bottomQueens.length - 1].addToTrackRecord("ELIM");
            bottomQueens[bottomQueens.length - 1].ppe += 0;
            bottomQueens[bottomQueens.length - 1].lastEpisode += episodeCount;
            eliminatedCast.unshift(bottomQueens[bottomQueens.length - 1]);
            currentCast.splice(currentCast.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
            bottomQueens.splice(0, bottomQueens.length - 1);
            rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne[0] == bottomQueens[bottomQueens.length - 1]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == bottomQueens[bottomQueens.length - 1]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[bottomQueens.length - 1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[bottomQueens.length - 1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && bottomQueens[bottomQueens.length - 1].favoritism > 6 && bottomQueens[bottomQueens.length - 1].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && bottomQueens[bottomQueens.length - 1].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", you are safe to slay another day!");
                bottomQueens[bottomQueens.length - 1].trackRecord.pop();
                bottomQueens[bottomQueens.length - 1].addToTrackRecord("KEPT");
                bottomQueens[bottomQueens.length - 1].unfavoritism -= 5;
                bottomQueens[bottomQueens.length - 1].lastEpisode = 0;
                currentCast.push(bottomQueens[bottomQueens.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", you are safe to slay another day!");
                bottomQueens[bottomQueens.length - 1].trackRecord.pop();
                bottomQueens[bottomQueens.length - 1].addToTrackRecord(" KEPT ");
                bottomQueens[bottomQueens.length - 1].unfavoritism -= 5;
                bottomQueens[bottomQueens.length - 1].lastEpisode = 0;
                currentCast.push(bottomQueens[bottomQueens.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[bottomQueens.length - 1].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + bottomQueens[bottomQueens.length - 1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[bottomQueens.length - 1] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[bottomQueens.length - 1]), 1);
                }
            }
        }
        }
        }
    }
    screen.createButton("Proceed", "newEpisode()");
}
function floppedJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge!");
    screen.createHorizontalLine();
    screen.createBigText("You are all dishonorably invited...");
    screen.createBold("The rest of you captured our attentions for all the wrong reasons.")
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        bottomQueens[i].addToTrackRecord("BTM" + bottomQueens.length);
        bottomQueens[i].unfavoritism += 2;
        bottomQueens[i].ppe += 1;
    }
    screen.createParagraph("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
        btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm2.innerHTML += "you are all going to lipsync for your lives but not now.";
    screen.createBold("Next week, you will battle it out on a Lipsync LaLaPaRUZa Smackdown!");
    screen.createButton("Proceed", "survivalLipsyncs()");
}
function survivalLipsyncs() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Lipsync LaLaPaRUZa Smackdown!");
    screen.createParagraph("The queens will battle it out on a series of lipsync to figure out which among them should go home.");
    let lsOpponent = [];
    let roundLosers = [];
    lsOpponent = currentCast.slice();
    for (var i = 0; i < lsOpponent.length; i++) {
        var trds = lsOpponent[i].trackRecord.length - 1;
        if (lsOpponent[i].trackRecord[trds] == "WIN") {
            lsOpponent[i].addToTrackRecord("SAFE  ");
            lsOpponent.splice(i, 1);
            i--;
    }
    }
    screen.createHorizontalLine();
    screen.createBigText("First Round of Lipsyncs");
    for (let i = 0; i < lsOpponent.length; i++) {
        screen.createImage(lsOpponent[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let overallOpponent = lsOpponent.length;
    if (overallOpponent % 2 == 1) {
        overallOpponent -= 1;
    }
    for (let i = 0; i < overallOpponent; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", shantay you stay!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are still up for elimination.");
                lipSync_1[0].addToTrackRecord(" STAY ");
                roundLosers.unshift(lipSync_1[1]);
                roundLosers.unshift(lipSync_1[2]);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
            screen.createBold(lipSync[1].getName() + ", you are still up for elimination.");
                lipSync[0].addToTrackRecord(" STAY ");
                roundLosers.unshift(lipSync[1]);
            i++
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("Second Round of Lipsyncs");
    for (let i = 0; i < roundLosers.length; i++) {
        screen.createImage(roundLosers[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let round2Opponent = roundLosers.length;
    if (round2Opponent % 2 == 1) {
        round2Opponent -= 1;
    }
    lsOpponent = roundLosers.slice();
    for (let i = 0; i < round2Opponent; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", shantay you stay!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are still up for elimination.");
                lipSync_1[0].addToTrackRecord(" STAY");
                finalLosers.push(lipSync_1[1]);
                finalLosers.push(lipSync_1[2]);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
            screen.createBold(lipSync[1].getName() + ", you are still up for elimination.");
                lipSync[0].addToTrackRecord(" STAY");
                finalLosers.push(lipSync[1]);
            i++
        }
    }
    if (finalLosers.length > 3) {
    screen.createHorizontalLine();
    screen.createBigText("Third Round of Lipsyncs");
    for (let i = 0; i < finalLosers.length; i++) {
        screen.createImage(finalLosers[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let round3Opponent = finalLosers.length;
    if (round3Opponent % 2 == 1) {
        round3Opponent -= 1;
    }
    lsOpponent = finalLosers.slice();
    for (let i = 0; i < round3Opponent; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", shantay you stay!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are still up for elimination.");
                lipSync_1[0].addToTrackRecord("STAY ");
                finalLosers.splice(finalLosers.indexOf(lipSync_1[0]), 1);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
            screen.createBold(lipSync[1].getName() + ", you are still up for elimination.");
                lipSync[0].addToTrackRecord("STAY ");
                finalLosers.splice(finalLosers.indexOf(lipSync[0]), 1);
            i++
        }
    }
    }
    screen.createHorizontalLine();
    screen.createBigText("The final round awaits...");
    for (let i = 0; i < finalLosers.length; i++) {
        screen.createImage(finalLosers[i].image, "red");
    }
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < finalLosers.length; i++) {
        btm2.innerHTML += finalLosers[i].getName() + ", ";
    }
    btm2.innerHTML += "that means, you will go head to head on our final lipsync where we will determine who might be sashaying away.";
    episodeChallenges.push("Survival <br> Lipsyncs");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "finalSurvival()");
}
function finalSurvival() {
    for (let i = 0; i < finalLosers.length; i++) {
        finalLosers[i].getLipsync();
    }
    finalLosers.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let partyOneElim = false;
    let partyTwoElim = false;
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("I've made my decision.");
    let score1 = finalLosers[0].lipsyncScore + finalLosers[0].favoritism - finalLosers[0].unfavoritism;
    let score2 = finalLosers[1].lipsyncScore + finalLosers[1].favoritism - finalLosers[1].unfavoritism;
    if (finalLosers.length == 3) {
        let score3 = finalLosers[2].lipsyncScore + finalLosers[2].favoritism - finalLosers[2].unfavoritism;
    }
    for (let i = 0; i < finalLosers.length; i++) {
    let score = finalLosers[i].lipsyncScore + finalLosers[i].favoritism - finalLosers[i].unfavoritism;
    }
    if (goldticket && ticketSave == false && finalLosers[finalLosers.length - 1] == goldenTicket[0] && splitpremiere == false) {
        for (let i = 0; i < finalLosers.length - 1; i++) {
        screen.createImage(finalLosers[i].image, "tomato");
        screen.createBold(finalLosers[i].getName() + ", shantay, you stay.");
        finalLosers[i].addToTrackRecord("STAY");
        }
        screen.createHorizontalLine();
        screen.createBold("Now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(finalLosers[finalLosers.length - 1].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        ticketSave = true;
        if (currentCast.length == 5) {
            top5Choc = true;
        }
    }
    else if (goldticket && ticketSave == false && finalLosers[finalLosers.length - 1] != goldenTicket[0] && splitpremiere == false) {
        for (let i = 0; i < finalLosers.length - 1; i++) {
        screen.createImage(finalLosers[i].image, "tomato");
        screen.createBold(finalLosers[i].getName() + ", shantay, you stay.");
        finalLosers[i].addToTrackRecord("STAY");
        }
        screen.createHorizontalLine();
        screen.createBold("Now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(finalLosers[finalLosers.length - 1].image, "red");
        screen.createBold("IT'S CHOCOLATE! <br>" + finalLosers[finalLosers.length - 1].getName() + ", sashay away.");
        finalLosers[finalLosers.length - 1].addToTrackRecord("ELIM");
        finalLosers[finalLosers.length - 1].lastEpisode += episodeCount;
        eliminatedCast.unshift(finalLosers[finalLosers.length - 1]);
        currentCast.splice(currentCast.indexOf(finalLosers[finalLosers.length - 1]), 1);
        bottomQueens = [];
        bottomQueens.push(finalLosers[finalLosers.length - 1]);
        rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne[0] == finalLosers[finalLosers.length - 1]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == finalLosers[finalLosers.length - 1]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (finalLosers[finalLosers.length - 1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (finalLosers[finalLosers.length - 1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && finalLosers[finalLosers.length - 1].favoritism > 6 && finalLosers[finalLosers.length - 1].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && finalLosers[finalLosers.length - 1].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + finalLosers[finalLosers.length - 1].getName() + ", you are safe to slay another day!");
                finalLosers[finalLosers.length - 1].trackRecord.pop();
                finalLosers[finalLosers.length - 1].addToTrackRecord("KEPT");
                finalLosers[finalLosers.length - 1].unfavoritism -= 5;
                finalLosers[finalLosers.length - 1].lastEpisode = 0;
                currentCast.push(finalLosers[finalLosers.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(finalLosers[finalLosers.length - 1]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + finalLosers[finalLosers.length - 1].getName() + ", as it was decided so it shall be done.");
                if (finalLosers[finalLosers.length - 1] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(finalLosers[finalLosers.length - 1]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(finalLosers[finalLosers.length - 1]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + finalLosers[finalLosers.length - 1].getName() + ", you are safe to slay another day!");
                finalLosers[finalLosers.length - 1].trackRecord.pop();
                finalLosers[finalLosers.length - 1].addToTrackRecord(" KEPT ");
                finalLosers[finalLosers.length - 1].unfavoritism -= 5;
                finalLosers[finalLosers.length - 1].lastEpisode = 0;
                currentCast.push(finalLosers[finalLosers.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(finalLosers[finalLosers.length - 1]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + finalLosers[finalLosers.length - 1].getName() + ", as it was decided so it shall be done.");
                if (finalLosers[finalLosers.length - 1] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(finalLosers[finalLosers.length - 1]), 1);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(finalLosers[finalLosers.length - 1]), 1);
                }
            }
        }
        }
    }
    else {
        for (let i = 0; i < finalLosers.length - 1; i++) {
        screen.createImage(finalLosers[i].image, "tomato");
        screen.createBold(finalLosers[i].getName() + ", shantay, you stay.");
        finalLosers[i].addToTrackRecord("STAY");
        }
        screen.createImage(finalLosers[finalLosers.length - 1].image, "red");
        screen.createBold(finalLosers[finalLosers.length - 1].getName() + ", sashay away...");
        finalLosers[finalLosers.length - 1].addToTrackRecord("ELIM");
        finalLosers[finalLosers.length - 1].lastEpisode += episodeCount;
        eliminatedCast.unshift(finalLosers[finalLosers.length - 1]);
        currentCast.splice(currentCast.indexOf(finalLosers[finalLosers.length - 1]), 1);
        bottomQueens = [];
        bottomQueens.push(finalLosers[finalLosers.length - 1]);
        rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne[0] == finalLosers[finalLosers.length - 1]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == finalLosers[finalLosers.length - 1]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (finalLosers[finalLosers.length - 1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (finalLosers[finalLosers.length - 1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && finalLosers[finalLosers.length - 1].favoritism > 6 && finalLosers[finalLosers.length - 1].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && finalLosers[finalLosers.length - 1].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + finalLosers[finalLosers.length - 1].getName() + ", you are safe to slay another day!");
                finalLosers[finalLosers.length - 1].trackRecord.pop();
                finalLosers[finalLosers.length - 1].addToTrackRecord("KEPT");
                finalLosers[finalLosers.length - 1].unfavoritism -= 5;
                finalLosers[finalLosers.length - 1].lastEpisode = 0;
                currentCast.push(finalLosers[finalLosers.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(finalLosers[finalLosers.length - 1]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + finalLosers[finalLosers.length - 1].getName() + ", as it was decided so it shall be done.");
                if (finalLosers[finalLosers.length - 1] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(finalLosers[finalLosers.length - 1]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(finalLosers[finalLosers.length - 1]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + finalLosers[finalLosers.length - 1].getName() + ", you are safe to slay another day!");
                finalLosers[finalLosers.length - 1].trackRecord.pop();
                finalLosers[finalLosers.length - 1].addToTrackRecord(" KEPT ");
                finalLosers[finalLosers.length - 1].unfavoritism -= 5;
                finalLosers[finalLosers.length - 1].lastEpisode = 0;
                currentCast.push(finalLosers[finalLosers.length - 1]);
                eliminatedCast.splice(eliminatedCast.indexOf(finalLosers[finalLosers.length - 1]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (finalLosers[finalLosers.length - 1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(finalLosers[finalLosers.length - 1].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + finalLosers[finalLosers.length - 1].getName() + ", as it was decided so it shall be done.");
                if (finalLosers[finalLosers.length - 1] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(finalLosers[finalLosers.length - 1]), 1);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(finalLosers[finalLosers.length - 1]), 1);
                }
            }
        }
        }
    }
    if ((twinstwist || comedyRuvenge || groupsRuvenge) && totalCastSize % 2 == 0 && currentCast.length == totalCastSize / 2 && ruvenge == false || (twinstwist || comedyRuvenge || groupsRuvenge) && totalCastSize % 2 == 1 && currentCast.length == (totalCastSize + 1) / 2 && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < eliminatedCast.length; i++) {
          if (eliminatedCast[i].withdraw == 1) {
              ruvengeQueens.splice(ruvengeQueens.indexOf(eliminatedCast[i]), 1);
          }
      }
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens[i]), 1);
      }
      if (currentCast.length % 2 !== 0) {
          if (top4 || top3) {
              immuneQueen.push(winnerEpisode[0]);
          }
          else {
            immuneQueen.push(topQueens[0]);
          }
          currentCast.splice(currentCast.indexOf(immuneQueen[0]), 1);
          remainingQueens.splice(remainingQueens.indexOf(immuneQueen[0]), 1);
          bringbackImmune = true;
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (ruvengeEpisode == true) {
        ruvengeUntucked = true;
        ruvengeEpisode = false;
        if (bringbackImmune == true) {
            currentCast.push(immuneQueen[0]);
            immuneQueen[0].addToTrackRecord("SAFE  ");
            bringbackImmune = false;
        }
        screen.createButton("Proceed", "newEpisode()");
    }
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else {
        ruvengeEpisode = false;
        screen.createButton("Proceed", "newEpisode()");
    }
}
function lipsyncOlympics() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The LipSync Olympics!");
    screen.createParagraph("This week's challenge will put the queens' lipsync prowess to the ultimate test.");
    let lsOpponent = [];
    let roundLosers = [];
    let roundWinners = [];
    lsOpponent = currentCast.slice();
    screen.createHorizontalLine();
    screen.createBigText("First Set of Lipsyncs!");
    for (let i = 0; i < lsOpponent.length; i++) {
        screen.createImage(lsOpponent[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let overallOpponent = lsOpponent.length;
    if (overallOpponent % 2 == 1) {
        overallOpponent -= 1;
    }
    for (let i = 0; i < overallOpponent; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", you are the winner of this lipsync!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you will be up for elimination.");
                roundWinners.unshift(lipSync_1[0]);
                roundLosers.unshift(lipSync_1[1]);
                roundLosers.unshift(lipSync_1[2]);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", you are the winner of this lipsync!");
            screen.createBold(lipSync[1].getName() + ", you will be up for elimination.");
                roundWinners.unshift(lipSync[0]);
                roundLosers.unshift(lipSync[1]);
            i++
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("Second Set for Winners' Lipsync");
    for (let i = 0; i < roundWinners.length; i++) {
        screen.createImage(roundWinners[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let round2Contender = roundWinners.length;
    let topSize1 = roundWinners.length;
    if (round2Contender % 2 == 1) {
        round2Contender -= 1;
    }
    lsOpponent = roundWinners.slice();
    for (let i = 0; i < round2Contender; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for the win! Good luck, and don't fuck it up.");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", you are the winner of this lipsync!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are both safe.");
                lipSync_1[1].addToTrackRecord("TOP" + topSize1);
                lipSync_1[1].ppe += 3;
                lipSync_1[2].addToTrackRecord("TOP" + topSize1);
                lipSync_1[2].ppe += 3;
                topQueens.unshift(lipSync_1[0]);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for the win! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", you are the winner of this lipSync! ");
            screen.createBold(lipSync[1].getName() + ", you are safe.");
                lipSync[1].addToTrackRecord("TOP" + topSize1);
                lipSync[1].ppe += 3;
                topQueens.unshift(lipSync[0]);
            i++
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("Third Set for Losers' Lipsyncs");
    for (let i = 0; i < roundLosers.length; i++) {
        screen.createImage(roundLosers[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let round2Opponent = roundLosers.length;
    if (round2Opponent % 2 == 1) {
        round2Opponent -= 1;
    }
    lsOpponent = roundLosers.slice();
    for (let i = 0; i < round2Opponent; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", shantay you stay!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are still up for elimination.");
                lipSync_1[0].addToTrackRecord(" STAY ");
                lipSync_1[0].ppe += 2.5;
                finalLosers.push(lipSync_1[1]);
                finalLosers.push(lipSync_1[2]);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
            lipSync[0].ppe += 2.5;
            screen.createBold(lipSync[1].getName() + ", you are still up for elimination.");
                lipSync[0].addToTrackRecord(" STAY ");
                finalLosers.push(lipSync[1]);
            i++
        }
    }
    if (topQueens.length > 3) {
    screen.createHorizontalLine();
    screen.createBigText("Last Set for Winners' Lipsync");
    for (let i = 0; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let round3Contender = topQueens.length;
    let topSize2 = topQueens.length;
    if (round3Contender % 2 == 1) {
        round3Contender -= 1;
    }
    lsOpponent = topQueens.slice();
    for (let i = 0; i < round3Contender; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for the win! Good luck, and don't fuck it up.");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", you are the winner of this lipsync!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are both safe.");
                lipSync_1[1].addToTrackRecord("TOP" + topSize2);
                lipSync_1[1].ppe += 3.5;
                topQueens.splice(topQueens.indexOf(lipSync_1[1]), 1);
                lipSync_1[2].addToTrackRecord("TOP" + topSize2);
                lipSync_1[2].ppe += 3.5;
                topQueens.splice(topQueens.indexOf(lipSync_1[2]), 1);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for the win! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", you are the winner of this lipSync! ");
            screen.createBold(lipSync[1].getName() + ", you are safe.");
                lipSync[1].addToTrackRecord("TOP" + topSize2);
                lipSync[1].ppe += 3.5;
                topQueens.splice(topQueens.indexOf(lipSync[1]), 1);
            i++
        }
    }
    }
    if (finalLosers.length > 3) {
    screen.createHorizontalLine();
    screen.createBigText("Last Set for Losers' Lipsyncs");
    for (let i = 0; i < finalLosers.length; i++) {
        screen.createImage(finalLosers[i].image);
    }
    screen.createBold("Let the Lipsyncs Begin!");
    let round3Opponent = finalLosers.length;
    if (round3Opponent % 2 == 1) {
        round3Opponent -= 1;
    }
    lsOpponent = finalLosers.slice();
    for (let i = 0; i < round3Opponent; i++) {
        screen.createHorizontalLine();
        shuffle(lsOpponent);
        let queen1 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen1), 1);
        let queen2 = lsOpponent[0];
        lsOpponent.splice(lsOpponent.indexOf(queen2), 1);
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        if (lsOpponent.length == 3) {
            let queen3 = lsOpponent[0];
            lsOpponent.splice(lsOpponent.indexOf(queen3), 1);
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", shantay you stay!");
            screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", you are still up for elimination.");
                lipSync_1[0].addToTrackRecord("STAY ");
                lipSync_1[0].ppe += 2;
                finalLosers.splice(finalLosers.indexOf(lipSync_1[0]), 1);
            i++;
        }
        else {
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
            screen.createBold(lipSync[1].getName() + ", you are still up for elimination.");
                lipSync[0].addToTrackRecord("STAY ");
                lipSync[0].ppe += 2;
                finalLosers.splice(finalLosers.indexOf(lipSync[0]), 1);
            i++
        }
    }
    }
    screen.createHorizontalLine();
    screen.createBigText("The final round awaits...");
    for (let i = 0; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image, "cyan");
    }
    screen.createBold("", "top2");
    let top2 = document.getElementById("top2");
    for (let i = 0; i < topQueens.length; i++) {
        top2.innerHTML += topQueens[i].getName() + ", ";
    }
    top2.innerHTML += "one of you will be this week's winner after your final lipsync smackdown.";
    for (let i = 0; i < finalLosers.length; i++) {
        screen.createImage(finalLosers[i].image, "red");
    }
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < finalLosers.length; i++) {
        btm2.innerHTML += finalLosers[i].getName() + ", ";
    }
    btm2.innerHTML += "unfortunately, on the other hand, one of you will sashay away after your final lipsync smackdwon.";
    episodeChallenges.push("Lipsync <br> Olympics");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "finalOlympics()");
}
function finalOlympics() {
    for (let i = 0; i < topQueens.length; i++) {
        topQueens[i].getLipsync();
    }
    topQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for the win! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createImage(topQueens[0].image, "royalblue");
    topQueens[0].addToTrackRecord("WIN");
    topQueens[0].favoritism += 5;
    topQueens[0].ppe += 5;
    topQueens[0].coinz += 5;
    screen.createBold(topQueens[0].getName() + ", condragulations! You are the winner of this week's LipSync Olympics!");
    for (let i = 1; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image, "cyan");
        topQueens[i].addToTrackRecord("TOP" + topQueens.length);
        topQueens[i].favoritism += 3;
        topQueens[i].ppe += 4;
    }
    screen.createBold("", "top2");
    let top2 = document.getElementById("top2");
    for (let i = 1; i < topQueens.length; i++) {
        top2.innerHTML += topQueens[i].getName() + ", ";
    }
    top2.innerHTML += "you serve great lips this week. You are safe.";
    screen.createButton("Proceed", "finalSurvival()");
}
let currentCast = [];
let eliminatedCast = [];
let winnerEpisode = [];
let immuneQueen = [];
let stealProne = [];
let safeQueens = [];
let topQueens = [];
let pageantLS = [];
let bottomQueens = [];
let soloImmune = [];
let nonImmune = [];
let versusQueens = [];
let botChoice = [];
let finalLosers = [];
let highQueens = [];
let fairQueens = [];
let lowQueens = [];
let goldenTicket = [];
let outRuvenge = [];
let notWinRuvenge = [];
let top2 = [];
let ruvengeQueens = [];
let remainingQueens = [];
let inQueen = [];
let immuneLow = false;
let doubleImmune = false;
let highLipstick = false;
let highLipstick2 = false;
let fairLipstick = false;
let fairLipstick2 = false;
let lowLipstick = false;
let doubleShantay = false;
let doubleSashay = false;
let disqQueen = false;
let episodeChallenges = [];
let lsaQueen = [];
let episodeCount = 0;
let superstarsEpisode = 0;
let returningQueen = false;
let noDouble = false;
let forFinaleLS = false;
let smackdownCharts = false;
let gagRate = false;
let randomChoc = false;
let goldBar = false;
let juryTwist = false;
let s6Premiere = false;
let s9Premiere = false;
let pageantPremiere = false;
let extraPremiere = false;
let s12Premiere = false;
let s14Premiere = false;
let porkelimPremiere = false;
let porkchopPremiere = false;
let triplePremiere = false;
let splitCastPremiere = false;
let firstPremiere = false;
let secondPremiere = false;
//challenge seasons
let sweatshop = false;
let chaos = false;
function newEpisode() {
    isDesignChallenge = false;
    highLipstick = false;
    highLipstick2 = false;
    fairLipstick = false;
    fairLipstick2 = false;
    lowLipstick = false;
    noneIndividual = false;
    actingChosen = false;
    comedyChosen = false;
    liveChosen = false;
    danceChosen = false;
    groupsChosen = false;
    designChosen = false;
    improvChosen = false;
    rucreateChosen = false;
    decorChosen = false;
    makeoverChosen = false;
    pairings = false;
    twoTeams = false;
    threeTeams = false;
    fourTeams = false;
    fiveTeams = false;
    threeSome = [];
    TeamOne = [];
    TeamTwo = [];
    weekWinner = [];
    castHolder = [];
    if (splitCastPremiere == false) {
        splitCastDuration = false;
    }
    episodeCount++;
    if (splitpremiere == false && !s9Premiere && !pageantPremiere && !extraPremiere || (s9Premiere || pageantPremiere || extraPremiere) && episodeCount > 1) {
    superstarsEpisode++;
    }
    let screen = new Scene();
    if (episodeCount == 1 || premiereCounter <= 2 && (s12Premiere || porkchopPremiere || s6Premiere || s14Premiere || porkelimPremiere) && doneUntucked == true || premiereCounter <= 3 && triplePremiere && doneUntucked == true) {
        screen.clean();
        screen.createHeader("Queens Enter The Werkroom");
        if (doneUntucked == true && splitpremiere == true) {
            episodeCount--;
        }
        doneUntucked = false;
        for (let i = 0; i < currentCast.length; i++) {
            screen.createImage(currentCast[i].image);
            screen.createBold(currentCast[i].getName());
        }
        if (selectOutcome == true && withdrawOut == false && splitpremiere == false && splitCastDuration == false && showgirlShowdown == false && (top4 || savequeen || top3) && currentCast.length > 5 || selectOutcome == true && withdrawOut == false && splitpremiere == false && splitCastDuration == false && showgirlShowdown == true && currentCast.length > 6 && (top4 || savequeen || top3)) {
            screen.createBigText("Select The Outcome");
            let main = document.querySelector("div#MainBlock");
            let centering = document.createElement("center");
            let select = document.createElement("select");
            select.setAttribute("id", "startOutcome");
            let basicoption = document.createElement("option");
            basicoption.innerHTML += "Continue As Usual";
            select.add(basicoption);
            let injuryoption = document.createElement("option");
            injuryoption.innerHTML += "Injured Queen";
            select.add(injuryoption);
            let quitoption = document.createElement("option");
            quitoption.innerHTML += "Queen Quits";
            select.add(quitoption);
            let disqoption = document.createElement("option");
            disqoption.innerHTML += "Disqualification";
            select.add(disqoption);
            centering.appendChild(select);
            main.appendChild(centering);
            screen.createParagraph("");
            screen.createButton("Select", "startChoose()", "chosenOutcome");
        }
        if (randomNumber(0, 500) > 475 && withdrawOut == false && twinstwist == false && comedyRuvenge == false && groupsRuvenge == false && lalaparuza == false && currentCast.length > 7 && superstars == false && splitCastPremiere == false && splitpremiere == false && episodeCount > 3 && selectOutcome == false || randomNumber(0, 500) > 475 && withdrawOut == false && currentCast.length > (totalCastSize / 2) + 1 && splitpremiere == false && episodeCount > 3 && selectOutcome == false && superstars == false && splitCastPremiere == false)
            screen.createButton("Proceed", "queenWithdraw()");
        else if (currentCast.length == 4 && superstars == true)
            screen.createButton("Proceed", "finaleLS()");
        else if (currentCast.length == 5 && (top4 || savequeen) && showgirlShowdown && final5Episode == true && forFinaleLS == false || currentCast.length == 3 && top3 && showgirlShowdown)
            screen.createButton("Proceed", "finaleShowdown()");
        else if (currentCast.length == 3 && (top4 || savequeen) && showgirlShowdown && forFinaleLS == true)
            screen.createButton("Proceed", "finaleShowGirls()");
        else if (currentCast.length == totalCastSize && team == true)
            screen.createButton("Proceed", "teamsScreen()");
        else if (currentCast.length == 5 && vstheworld == true && splitpremiere == false)
            screen.createButton("Proceed", "finalfiveVersus()");
        else if (currentCast.length == 5 && vstheworld == true && splitpremiere == true)
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 4 && vstheworld == true && splitpremiere == false)
            screen.createButton("Proceed", "finaleAS()");
        else if (currentCast.length > 4 && (selectOutcome == false || withdrawOut == true || splitpremiere == true) || currentCast.length == 5 && selectOutcome == true && showgirlShowdown == false || currentCast.length == 4 && selectOutcome == true && showgirlShowdown == false && top3 && forFinaleLS == false || currentCast.length <= 6 && showgirlShowdown == true && selectOutcome == true && (forFinaleLS == false || forFinaleLS == true && currentCast.length > 4))
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 4 && team || currentCast.length == 4 && top3 && splitpremiere == true)
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 4 && top3 && forFinaleLS == false)
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 4 && top3 && forFinaleLS == true && splitpremiere == false)
            screen.createButton("Proceed", "reunionLipsyncs()");
        else if (currentCast.length == 4 && (top4 || savequeen) && splitpremiere == false && forFinaleLS == true)
            screen.createButton("Proceed", "reunionLipsyncs()");
        else if (currentCast.length == 4 && savequeen)
            screen.createButton("Proceed", "finaleTop4()");
        else if (currentCast.length == 4 && top4 && splitpremiere == true)
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 4 && top4 && splitpremiere == false && forFinaleLS == false)
            screen.createButton("Proceed", "finaleTop4()");
        else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen) && splitpremiere == true)
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen) && splitpremiere == false)
            screen.createButton("Proceed", "finaleAS()");
        else if (currentCast.length == 3 && team)
            screen.createButton("Proceed", "miniChallenge()");
        else if (currentCast.length == 2 && team)
            screen.createButton("Proceed", "finaleTeam()");
        else if (selectOutcome == false || selectOutcome == true && currentCast.length < 4)
            screen.createButton("Proceed", "finale()");
    }
    else {
        if (top3 || top4 || savequeen) {
        for (let i = 0; i < currentCast.length; i++) {
        let trackPerf1 = currentCast[i].trackRecord.length - 1;
        if (currentCast[i].trackRecord[trackPerf1] == "LOW") {
            bottomQueens.push(currentCast[i]);
        }
        }
        }
        untucked();
    }
    untuckedQueens = [];
    for (let i = 0; i < currentCast.length; i++) {
        untuckedQueens.push(currentCast[i]);
    }
    winnerEpisode = [];
    safeQueens = [];
    topQueens = [];
    pageantLS = [];
    bottomQueens = [];
    stealProne = [];
    soloImmune = [];
    nonImmune = [];
    versusQueens = [];
    botChoice = [];
    finalLosers = [];
    highQueens = [];
    fairQueens = [];
    lowQueens = [];
    top2 = [];
    finalLS = [];
}
function startChoose() {
    let screen = new Scene();
    let select = document.getElementById("startOutcome");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("chosenOutcome");
    if (value == "Injured Queen") {
        injury = true;
    }
    else if (value == "Queen Quits") {
        queenquits = true;
    }
    else if (value == "Disqualification") {
        disqualify = true;
    }
    button.remove();
    select.remove();
    screen.createBold(value + " was the selected outcome!");
    if (value == "Injured Queen" || value == "Queen Quits" || value == "Disqualification")
    screen.createButton("Proceed", "queenWithdraw()");
    else
    screen.createButton("Proceed", "miniChallenge()");
}
function reSimulate() {
    //add eliminated queens again to cast and clean it
    for (let i = 0; i < eliminatedCast.length; i++) {
        currentCast.push(eliminatedCast[i]);
    }
    if (top4 || savequeen || superstars) {
        currentCast.push(finalLS[0]);
        finalLS = [];
        firstLS = [];
        secondLS = [];
    }
    currentCast.sort((a, b) => a.getName().toLowerCase().localeCompare(b.getName().toLowerCase()));
    eliminatedCast = [];
    firstCast = [];
    secondCast = [];
    porkChops = [];
    outRuvenge = [];
    notWinRuvenge = [];
    goldenTicket = [];
    inQueen = [];
    versusQueens = [];
    premiereCounter = 0;
    episodeCount = 0;
    superstarsEpisode = 0;
    if (splitCastPremiere) {
        splitCastDuration = true;
    }
    firstHalfRemain = [];
    firstHalfCast = true;
    eightCombine = false;
    tenCombine = false;
    firstElims = [];
    secondElims = [];
    combinedCast = [];
    secretEpisode = false;
    immuneLow = false;
    doubleImmune = false;
    highLipstick = false;
    highLipstick2 = false;
    fairLipstick = false;
    fairLipstick2 = false;
    lowLipstick = false;
    onFinale = false;
    onTop4Finale = false;
    ticketSave = false;
    top5Choc = false;
    chocEntrance = false;
    top2Episode = false;
    halfWayEpisode = false;
    survivalEpisode = false;
    smackCharts = false;
    ruvenge = false;
    ruvengeEpisode = false;
    ruvengeUntucked = false;
    colorCounter = 0;
    nightofCounter = 0;
    culturalCounter = 0;
    popCounter = 0;
    totalCastSize = currentCast.length;
    //clean track records
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].trackRecord = [];
        currentCast[i].favoritism = 0;
        currentCast[i].unfavoritism = 0;
        currentCast[i].finaleScore = 0;
        currentCast[i].votes = 0;
        currentCast[i].ppe = 0;
        currentCast[i].coinz = 0;
        currentCast[i].starpoints = 0;
        currentCast[i].episodesOn = 0;
        currentCast[i].lastEpisode = 0;
        currentCast[i].withdraw = 0;
    }
    //clean challenges
    episodeChallenges = [];
    lsaQueen = [];
    actingChallengeCounter = 0;
    comedyChallengeCounter = 0;
    liveChallengeCounter = 0;
    danceChallengeCounter = 0;
    groupsChallengeCounter = 0;
    designChallengeCounter = 0;
    improvChallengeCounter = 0;
    rolloverTip = 0;
    randomMini = 0;
    photoshootCounter = false;
    blindMakeupCounter = false;
    photobombCounter = false;
    readingCounter = false;
    puppetCounter = false;
    fashionWeek = false;
    fashionReview = false;
    dollDrags = false;
    artworkSaboteur = false;
    guessingCounter = false;
    craftqueenCounter = false;
    superlativesCounter = false;
    redCarpetCouture = false;
    vogueShow = false;
    snatchCounter = false;
    makeoverCounter = false;
    rucreateCounter = false;
    rusicalCounter = false;
    talentshowCounter = false;
    decorCounter = false;
    pageantCounter = false;
    ballCounter = false;
    brandingCounter = false;
    spoofCounter = false;
    roastCounter = false;
    despysCounter = false;
    debateCounter = false;
    panelsCounter = false;
    doubleShantay = false;
    doubleSashay = false;
    disqQueen = false;
    withdrawOut = false;
    smackdownRounds = [];
    miniChallenges = [];
    assasintable = [];
    assasinlipstick = [];
    //refill lip-sync songs and lsa
    lsSongs = allLsSongs;
    allQueens = allQueensCopy;
    if (s6Premiere || s12Premiere || s14Premiere || triplePremiere)
        doublePremiere();
    else if (porkchopPremiere || porkelimPremiere)
        porkchopLipsyncs();
    else
        newEpisode();
}
let firstLS = [];
let secondLS = [];
let finalLS = [];
let versusLS = [];
let onFinale = false;
let onTop4Finale = false;
function queenWithdraw() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("A Heartbreaking News!");
    screen.createBold("A queen has withdrawn from the race.");
    if (goldticket == true && ticketSave == false) {
        currentCast.splice(currentCast.indexOf(goldenTicket[0]), 1);
    }
    let withdrawQueen = currentCast[randomNumber(0, currentCast.length - 1)];
    screen.createImage(withdrawQueen.image, "black");
    if (goldticket == true && ticketSave == false) {
        currentCast.push(goldenTicket[0]);
    }
    if (randomNumber(0, 100) < 50 && selectOutcome == false || injury == true) {
        screen.createParagraph(withdrawQueen.getName() + " acquired an injury during the last challenge and due to doctor's advice this would be the end of their Drag Race journey.");
        withdrawQueen.withdraw += 1;
        withdrawQueen.addToTrackRecord("INJ");
        withdrawQueen.lastEpisode += episodeCount;
        eliminatedCast.unshift(withdrawQueen);
        currentCast.splice(currentCast.indexOf(withdrawQueen), 1);
        injury = false;
    }
    else if (randomNumber(0, 100) < 76 && selectOutcome == false || queenquits == true) {
        screen.createParagraph(withdrawQueen.getName() + " has been feeling overwhelmed by the competition and had an emotional breakdown that made them decide to quit voluntarily.");
        withdrawQueen.withdraw += 1;
        withdrawQueen.addToTrackRecord("QUIT");
        withdrawQueen.lastEpisode += episodeCount;
        eliminatedCast.unshift(withdrawQueen);
        currentCast.splice(currentCast.indexOf(withdrawQueen), 1);
        queenquits = false;
    }
    else if (randomNumber(0, 100) < 101 && selectOutcome == false || disqualify == true) {
        screen.createParagraph(withdrawQueen.getName() + " had a massive fight with the other queens and staff off-cam and it leads to their disqualification.");
        withdrawQueen.withdraw += 1;
        withdrawQueen.addToTrackRecord("DISQ");
        withdrawQueen.lastEpisode += episodeCount;
        eliminatedCast.unshift(withdrawQueen);
        currentCast.splice(currentCast.indexOf(withdrawQueen), 1);
        disqualify = false;
    }
    withdrawOut = true;
    totalCastSize--;
    screen.createButton("Proceed", "miniChallenge()");
}
function finalfiveVersus() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Final Five to Final Four!");
    screen.createParagraph("The queens have to earn their spot in the finale by knocking each other out!");
    for (let i = 0; i < currentCast.length; i++) {
        versusLS.push(currentCast[i]);
    }
    versusLS.splice(versusLS.indexOf(immuneQueen[0]), 1);
    immuneQueen[0].addToTrackRecord("SAFE  ");
    for (let i = 0; i < versusLS.length; i++) {
        screen.createImage(versusLS[i].image, "hotpink");
    }
    screen.createHorizontalLine();
    for (let i = 0; i < 2; i++) {
        let q1 = versusLS[randomNumber(0, versusLS.length - 1)];
        firstLS.push(q1);
        versusLS.splice(versusLS.indexOf(q1), 1);
        let q2 = versusLS[randomNumber(0, versusLS.length - 1)];
        secondLS.push(q2);
        versusLS.splice(versusLS.indexOf(q2), 1);
    }
    screen.createBigText("The opponents will be: ");
    screen.createImage(firstLS[0].image, "darkblue");
    screen.createImage(firstLS[1].image, "darkblue");
    screen.createBold(firstLS[0].getName() + " vs. " + firstLS[1].getName());
    screen.createParagraph("and");
    screen.createImage(secondLS[0].image, "darkred");
    screen.createImage(secondLS[1].image, "darkred");
    screen.createBold(secondLS[0].getName() + " vs. " + secondLS[1].getName());
    episodeChallenges.push("Versus <br> Lipsyncs");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "versusRounds()");
}
function versusRounds() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Let the Lipsyncs Begin");
    screen.createParagraph(firstLS[0].getName() + " and " + firstLS[1].getName() + " lip-sync...");
    lsSong();
    for (let i = 0; i < firstLS.length; i++) {
        firstLS[i].getLipsync();
    }
    if (randomNumber(0, 100 >= 46))
    firstLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    firstLS.sort((a, b) => (b._lipsyncStat - a._lipsyncStat));
    finalLS.push(firstLS[1]);
    screen.createImage(firstLS[0].image, "silver");
    screen.createBold(firstLS[0].getName() + ", shantay you stay.");
    firstLS[0].addToTrackRecord("ADV");
    screen.createImage(firstLS[1].image, "sienna");
    screen.createBold(firstLS[1].getName() + ", you will battle it out on our last lipsync.");
    screen.createHorizontalLine();
    screen.createParagraph(secondLS[0].getName() + " and " + secondLS[1].getName() + " lip-sync...");
    lsSong();
    for (let i = 0; i < secondLS.length; i++) {
        secondLS[i].getASLipsync();
    }
    if (randomNumber(0, 100 >= 46))
    secondLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    secondLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    finalLS.push(secondLS[1]);
    screen.createImage(secondLS[0].image, "silver");
    screen.createBold(secondLS[0].getName() + ", shantay you stay.");
    secondLS[0].addToTrackRecord("ADV");
    screen.createImage(secondLS[1].image, "sienna");
    screen.createBold(secondLS[1].getName() + ", you will battle it out on our last lipsync.");
    screen.createButton("Proceed", "versusFinale()");
}
function versusFinale() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The time has come.");
    screen.createBold(finalLS[0].getName() + " and " + finalLS[1].getName() + " will lip-sync for their lives!");
    lsSong();
    let highlightEp = false;
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision. The queen to make it into the finale is...");
    if (randomNumber(0, 100 >= 46))
    finalLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    finalLS.sort((a, b) => (b._lipsyncStat - a._lipsyncStat));
    screen.createImage(finalLS[0].image, "tomato");
    screen.createBold(finalLS[0].getName() + ", shantay you stay.");
    finalLS[0].addToTrackRecord("STAY");
    if (goldticket == true && ticketSave == false && finalLS[1] == goldenTicket[0]) {
        screen.createHorizontalLine();
        screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.")
        screen.createImage(finalLS[1].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + finalLS[1].getName() + ", condragulations! You are safe to slay another day!");
        finalLS[1].addToTrackRecord("CHOC");
        finalLS[1].favoritism += 3;
        ticketSave = true;
        highlightEp = true;
    }
    else if (goldticket == true && ticketSave == false && finalLS[1] != goldenTicket[0]) {
        screen.createHorizontalLine();
        screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.")
        screen.createImage(finalLS[1].image, "brown");
        screen.createBold("IT'S CHOCOLATE! <br>" + finalLS[1].getName() + ", you are and will always be a Global Star. Now, sashay away.");
        finalLS[1].addToTrackRecord("ELIM");
        finalLS[1].lastEpisode += episodeCount + 1;
        eliminatedCast.unshift(finalLS[1]);
        currentCast.splice(currentCast.indexOf(finalLS[1]), 1);
    }
    else {
        screen.createImage(finalLS[1].image, "darkred");
        screen.createBold(finalLS[1].getName() + ", you are and will always be a Global Star. Now, sashay away.");
        finalLS[1].addToTrackRecord("ELIM");
        finalLS[1].lastEpisode += episodeCount + 1;
        eliminatedCast.unshift(finalLS[1]);
        currentCast.splice(currentCast.indexOf(finalLS[1]), 1);
    }
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].favoritism -= currentCast[i].lipsyncFave;
    }
    if (highlightEp == true) {
        screen.createButton("Proceed", "highlightEpisode()");
    }
    else {
        screen.createButton("Proceed", "newEpisode()");
    }
}
function highlightEpisode() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("In this season's highlights...");
    screen.createBold("In this extra special episode, the queens look back on the gaggiest and most sickening moments of the season.");
    for (let i = 0; i < currentCast.length; i++) {
        screen.createImage(currentCast[i].image, "blue");
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].addToTrackRecord("");
    }
    screen.createBold("The Top 5 will also vote which among them should not make it into the finale!")
    screen.createButton("Proceed", "highlightChop()");
}
function highlightChop() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The queens have spoken...");
    screen.createBold("The votes has been casted and one among the queens would sadly sashay away before the finale.");
    let voteChoice = [];
    for (let i = 0; i < currentCast.length; i++) {
        voteChoice.push(currentCast[i]);
    }
    voteChoice.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.unfavoritism));
    for (let i = 0; i < currentCast.length; i++) {
        currentCast.indexOf(currentCast[i]); {
            voteChoice.splice(voteChoice.indexOf(currentCast[i]), 1);
            if (randomNumber(0, 100) > 40) {
                currentCast[i].lipstick = voteChoice[0];
            }
            else {
                currentCast[i].lipstick = voteChoice[randomNumber(0, voteChoice.length - 1)];
            }
            voteChoice.push(currentCast[i]);
            voteChoice.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.unfavoritism));
            screen.createImage(currentCast[i].image, "hotpink");
            screen.createImage(currentCast[i].lipstick.image, "red");
            screen.createBold(currentCast[i].getName() + " voted for " + currentCast[i].lipstick.getName() + "!");
            currentCast[i].lipstick.votes++;
            }
    }
    voteChoice.sort((a, b) => b.votes - a.votes);
    screen.createHorizontalLine();
    screen.createBold("Based on the final votes. The queen who is getting the chop is...")
    screen.createImage(voteChoice[0].image, "red");
    screen.createBold(voteChoice[0].getName() + ", you are and will always be a Global Star. Now, sashay away.");
    voteChoice[0].addToTrackRecord("ELIM");
    eliminatedCast.unshift(voteChoice[0]);
    currentCast.splice(currentCast.indexOf(voteChoice[0]), 1);
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].addToTrackRecord("STAY");
    }
    episodeChallenges.push("Highlights");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "newEpisode()");
}
function reunionLipsyncs() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Please Welcome Back!");
    screen.createBigText("The eliminated queens of Liam & Vince Drag Race!")
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createImage(eliminatedCast[i].image, "hotpink");
    }
    screen.createHorizontalLine();
    screen.createBold("The queens will vote on who will be this season's Miss Congeniality.");
    let missC = [];
    for (let i = 0; i < eliminatedCast.length; i++) {
        missC.push(eliminatedCast[i]);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].trackRecord.pop();
        eliminatedCast.indexOf(eliminatedCast[i]); {
            missC.splice(missC.indexOf(eliminatedCast[i]), 1);
            eliminatedCast[i].lipstick = missC[randomNumber(0, missC.length - 1)];
            missC.push(eliminatedCast[i]);
            screen.createImage(eliminatedCast[i].image, "hotpink");
            screen.createImage(eliminatedCast[i].lipstick.image, "lime");
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            }
    }
            currentCast[0].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[0].image, "hotpink");
            screen.createImage(currentCast[0].lipstick.image, "lime");
            screen.createBold(currentCast[0].getName() + " voted for " + currentCast[0].lipstick.getName() + "!");
            currentCast[0].lipstick.votes++;
            currentCast[1].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[1].image, "hotpink");
            screen.createImage(currentCast[1].lipstick.image, "lime");
            screen.createBold(currentCast[1].getName() + " voted for " + currentCast[1].lipstick.getName() + "!");
            currentCast[1].lipstick.votes++;
            currentCast[2].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[2].image, "hotpink");
            screen.createImage(currentCast[2].lipstick.image, "lime");
            screen.createBold(currentCast[2].getName() + " voted for " + currentCast[2].lipstick.getName() + "!");
            currentCast[2].lipstick.votes++;
            currentCast[3].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[3].image, "hotpink");
            screen.createImage(currentCast[3].lipstick.image, "lime");
            screen.createBold(currentCast[3].getName() + " voted for " + currentCast[3].lipstick.getName() + "!");
            currentCast[3].lipstick.votes++;
    eliminatedCast.sort((a, b) => b.votes - a.votes);
    screen.createHorizontalLine();
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createParagraph(eliminatedCast[i].getName() + " received " + eliminatedCast[i].votes + " votes!");
    }
    screen.createImage(eliminatedCast[0].image, "darkgreen");
    screen.createBold(eliminatedCast[0].getName() + ", condragulations, you are this season's Miss Congeniality.");
    eliminatedCast[0].addToTrackRecord("MISS C");
    eliminatedCast[0].coinz += 10;
    for (let i = 1; i < eliminatedCast.length; i++) {
    eliminatedCast[i].addToTrackRecord("GUEST");
    }
    screen.createButton("Proceed", "reunionSmackdown()");
}
function reunionSmackdown() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Final Four Smackdown!");
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
    screen.createImage(currentCast[0].image, "royalblue");
    screen.createImage(currentCast[1].image, "royalblue");
    screen.createImage(currentCast[2].image, "royalblue");
    screen.createImage(currentCast[3].image, "royalblue");
    screen.createParagraph("Our Final 4 will participate in a lip-sync smackdown for the finale!");
    screen.createHorizontalLine();
    if (goldticket == false || goldticket == true && ticketSave == true) {
    for (let i = 0; i < 2; i++) {
        let q1 = currentCast[randomNumber(0, currentCast.length - 1)];
        firstLS.push(q1);
        currentCast.splice(currentCast.indexOf(q1), 1);
        let q2 = currentCast[randomNumber(0, currentCast.length - 1)];
        secondLS.push(q2);
        currentCast.splice(currentCast.indexOf(q2), 1);
    }
    }
    else if (goldticket == true && ticketSave == false) {
    screen.createBigText("Unwrap The Chocolate!");
    screen.createImage(goldenTicket[0].image, "gold");
    screen.createBold(goldenTicket[0].getName() + ", you have the golden ticket.<br>You are given the chance to choose which opponent you will go up against.");
    currentCast.sort((a, b) => a.favoritism - b.favoritism);
        if (goldenTicket[0] == currentCast[0]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[1]);
            secondLS.push(currentCast[2]);
            secondLS.push(currentCast[3]);
        }
        else if (goldenTicket[0] == currentCast[1]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[0]);
            secondLS.push(currentCast[2]);
            secondLS.push(currentCast[3]);
        }
        else if (goldenTicket[0] == currentCast[2]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[0]);
            secondLS.push(currentCast[1]);
            secondLS.push(currentCast[3]);
        }
        else if (goldenTicket[0] == currentCast[3]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[0]);
            secondLS.push(currentCast[1]);
            secondLS.push(currentCast[2]);
        }
    screen.createHorizontalLine();
    }
    screen.createBigText("The opponents will be: ");
    screen.createImage(firstLS[0].image, "darkblue");
    screen.createImage(firstLS[1].image, "darkblue");
    screen.createBold(firstLS[0].getName() + " vs. " + firstLS[1].getName());
    screen.createParagraph("and");
    screen.createImage(secondLS[0].image, "darkred");
    screen.createImage(secondLS[1].image, "darkred");
    screen.createBold(secondLS[0].getName() + " vs. " + secondLS[1].getName());
    episodeChallenges.push("Reunion");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "reunionRounds()");
}
function reunionRounds() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Let the Lipsyncs Begin");
    screen.createParagraph(firstLS[0].getName() + " and " + firstLS[1].getName() + " lip-sync...");
    lsSong();
    for (let i = 0; i < firstLS.length; i++) {
        firstLS[i].getLipsync();
    }
    if (randomNumber(0, 100 >= 86))
    firstLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    firstLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    finalLS.push(firstLS[1]);
    screen.createImage(firstLS[0].image, "silver");
    screen.createBold(firstLS[0].getName() + ", shantay you stay.");
    if (goldticket == false || goldticket == true && ticketSave == true) {
    firstLS[0].addToTrackRecord("ADV");
    currentCast.unshift(firstLS[0]);
    }
    else if (goldticket == true && ticketSave == false && firstLS[0] != goldenTicket[0]) {
    firstLS[0].addToTrackRecord("ADV");
    }
    else if (goldticket == true && ticketSave == false && firstLS[0] == goldenTicket[0]) {
    firstLS[0].addToTrackRecord("ADV  ");
    }
    screen.createImage(firstLS[1].image, "sienna");
    screen.createBold(firstLS[1].getName() + ", you will battle it out on our last lipsync.");
    screen.createHorizontalLine();
    screen.createParagraph(secondLS[0].getName() + " and " + secondLS[1].getName() + " lip-sync...");
    lsSong();
    for (let i = 0; i < secondLS.length; i++) {
        secondLS[i].getASLipsync();
    }
    if (randomNumber(0, 100 >= 86))
    secondLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    secondLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    finalLS.push(secondLS[1]);
    screen.createImage(secondLS[0].image, "silver");
    screen.createBold(secondLS[0].getName() + ", shantay you stay.");
    secondLS[0].addToTrackRecord("ADV");
    if (goldticket == false || goldticket == true && ticketSave == true) {
    currentCast.unshift(secondLS[0]);
    }
    screen.createImage(secondLS[1].image, "sienna");
    screen.createBold(secondLS[1].getName() + ", you will battle it out on our last lipsync.");
    screen.createButton("Proceed", "reunionFinalLS()");
}
function reunionFinalLS() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The time has come.");
    screen.createBold(finalLS[0].getName() + " and " + finalLS[1].getName() + " will lip-sync for their lives!");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision. The queen to make it into the finale is...");
    if (randomNumber(0, 100 >= 66))
    finalLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    finalLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    screen.createImage(finalLS[0].image, "tomato");
    screen.createBold(finalLS[0].getName() + ", shantay you stay.");
    if (goldticket == false || goldticket == true && ticketSave == true) {
    finalLS[0].addToTrackRecord("STAY");
    currentCast.unshift(finalLS[0]);
    }
    else if (goldticket == true && ticketSave == false && finalLS[0] != goldenTicket[0]) {
    finalLS[0].addToTrackRecord("STAY");
    }
    else if (goldticket == true && ticketSave == false && finalLS[0] == goldenTicket[0]) {
    finalLS[0].addToTrackRecord("STAY  ");
    }
    screen.createImage(finalLS[1].image, "darkred");
    screen.createBold(finalLS[1].getName() + ", sashay away.");
    if (goldticket == false || goldticket == true && ticketSave == true) {
    finalLS[1].addToTrackRecord("ELIM");
    finalLS[1].lastEpisode += episodeCount + 1;
    eliminatedCast.unshift(finalLS[1]);
    }
    else if (goldticket == true && ticketSave == false && finalLS[1] != goldenTicket[0]) {
    finalLS[1].addToTrackRecord("ELIM");
    finalLS[1].lastEpisode += episodeCount + 1;
    eliminatedCast.unshift(finalLS[1]);
    currentCast.splice(currentCast.indexOf(finalLS[1]), 1);
    }
    else if (goldticket == true && ticketSave == false && finalLS[1] == goldenTicket[0]) {
    finalLS[1].addToTrackRecord("  ELIM  ");
    finalLS[1].lastEpisode += episodeCount + 1;
    eliminatedCast.unshift(finalLS[1]);
    currentCast.splice(currentCast.indexOf(finalLS[1]), 1);
    }
    ticketSave = true;
    screen.createButton("Proceed", "newEpisode()");
}
function finaleShowdown() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Please Welcome Back!");
    screen.createBigText("The eliminated queens of Liam & Vince Drag Race!");
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createImage(eliminatedCast[i].image, "hotpink");
    }
    screen.createHorizontalLine();
    screen.createBold("The queens will vote on who will be this season's Miss Congeniality.");
    let missC = [];
    for (let i = 0; i < eliminatedCast.length; i++) {
        missC.push(eliminatedCast[i]);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].trackRecord.pop();
        eliminatedCast.indexOf(eliminatedCast[i]); {
            missC.splice(missC.indexOf(eliminatedCast[i]), 1);
            eliminatedCast[i].lipstick = missC[randomNumber(0, missC.length - 1)];
            missC.push(eliminatedCast[i]);
            screen.createImage(eliminatedCast[i].image, "hotpink");
            screen.createImage(eliminatedCast[i].lipstick.image, "lime");
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            }
    }
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[i].image, "hotpink");
            screen.createImage(currentCast[i].lipstick.image, "lime");
            screen.createBold(currentCast[i].getName() + " voted for " + currentCast[i].lipstick.getName() + "!");
            currentCast[i].lipstick.votes++;
    }
    eliminatedCast.sort((a, b) => b.votes - a.votes);
    screen.createHorizontalLine();
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createParagraph(eliminatedCast[i].getName() + " received " + eliminatedCast[i].votes + " votes!");
    }
    screen.createImage(eliminatedCast[0].image, "darkgreen");
    screen.createBold(eliminatedCast[0].getName() + ", condragulations, you are this season's Miss Congeniality.");
    eliminatedCast[0].addToTrackRecord("MISS C");
    eliminatedCast[0].coinz += 10;
    for (let i = 1; i < eliminatedCast.length; i++) {
    eliminatedCast[i].addToTrackRecord("GUEST");
    }
    screen.createButton("Proceed", "finaleShowGirls()");
}
class ShowDown {
    rankPerformances() {
        for (let i = 0; i < currentCast.length; i++)
            currentCast[i].getShowdown();
    }
}
function finaleShowGirls() {
    let screen = new Scene();
    screen.clean();
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
    screen.createHeader("Showgirl Showdown!!!");
    if (currentCast.length == 5)
    screen.createBold("Tonight, our Final Five will battle it out on a Showgirl Showdown! <br> In which, it will determine who will be the Top 2 that shall Lipsync for the Crown!");
    else if (currentCast.length == 3)
    screen.createBold("Tonight, our Top Three Queens will battle it out on a Showgirl Showdown! <br> In which, it will determine who will be the Final Two that shall Lipsync for the Crown!");
    for (let i = 0; i < currentCast.length; i++) {
        screen.createImage(currentCast[i].image, "yellow");
    }
    screen.createBold("Who among these queens will advance?");
    screen.createButton("Proceed", "finaleShowGirlsNumbers()", "button2");
}
function finaleShowGirlsNumbers() {
    let screen = new Scene();
    screen.createHorizontalLine();
    screen.createBigText("Let The Showdown Begin!");
    let button2 = document.querySelector("button#button2");
    button2.remove();
    let challenge = new ShowDown();
    challenge.rankPerformances();
    isDesignChallenge = false;
    showdownFinale = true;
    queensPerformances();
    episodeChallenges.push("Finale");
}
function top2Showdown() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The Results!");
    screen.createBigText("Time to Announce our Top 2!");
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].performanceScore += (currentCast[i].runwayScore + currentCast[i].unfavoritism  - currentCast[i].favoritism);
    }
    currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
    if (goldticket == false || goldticket == true && ticketSave == true) {
        screen.createImage(currentCast[0].image, "hotpink");
        screen.createImage(currentCast[1].image, "hotpink");
        screen.createBold(currentCast[0].getName() + ", " + currentCast[1].getName() + ", condragulations! You are both going to advance where you'll be one step closer to the crown!");
        finalLS.push(currentCast[0]);
        finalLS.push(currentCast[1]);
        for (let i = 2; i < currentCast.length; i++) {
            screen.createImage(currentCast[i].image, "brown");
            currentCast[i].addToTrackRecord("ELIMINATED");
            eliminatedCast.unshift(currentCast[i]);
        }
        screen.createBold("", "top2");
        let top2 = document.getElementById("top2");
        for (let i = 2; i < currentCast.length; i++) {
            top2.innerHTML += currentCast[i].getName() + ", ";
        }
        top2.innerHTML += "that means, this is not yet your time. <br> Thank you for a fantastic season. Now, sashay away...";
        currentCast.splice(2, currentCast.length - 1);
    }
    else if (goldticket == true && ticketSave == false) {
        screen.createBold("Ladies, the time has come to find out which among you has the golden bar!");
        for (let i = 0; i < currentCast.length; i++) {
            if (currentCast[i] == goldenTicket[0]) {
                screen.createImage(currentCast[i].image, "gold");
            }
            else {
                screen.createImage(currentCast[i].image, "brown");
            }
        }
        screen.createBold("The Drag Gods has Spoken! <br>" + goldenTicket[0].getName() + ", condragulations! You are one step closer to the crown!");
        finalLS.push(goldenTicket[0]);
        currentCast.splice(currentCast.indexOf(goldenTicket[0]), 1);
        screen.createHorizontalLine();
        screen.createBigText("Based on your Showgirl Showdown Performance...");
        screen.createImage(currentCast[0].image, "royalblue");
        screen.createBold(currentCast[0].getName() + ", condragulations! <br> You are the final queen to advance on our Lipsync for the Crown!");
        finalLS.push(currentCast[0]);
        for (let i = 1; i < currentCast.length; i++) {
            screen.createImage(currentCast[i].image, "brown");
            currentCast[i].addToTrackRecord("ELIMINATED");
            eliminatedCast.unshift(currentCast[i]);
        }
        screen.createBold("", "top2");
        let top2 = document.getElementById("top2");
        for (let i = 1; i < currentCast.length; i++) {
            top2.innerHTML += currentCast[i].getName() + ", ";
        }
        top2.innerHTML += "that means, this is not yet your time. <br> Thank you for a fantastic season. Now, sashay away...";
        currentCast.splice(1, currentCast.length - 1);
        currentCast.push(goldenTicket[0]);
    }
    screen.createHorizontalLine();
    screen.createBigText("One Step Closer");
    screen.createParagraph("Our Top Two Queens will Lipsync their way into the Crown!");
    screen.createImage(finalLS[0].image, "violet");
    screen.createImage(finalLS[1].image, "violet");
    screen.createBold("Are you #Team" + finalLS[0].getName() + "? <br>" + "Are you #Team" + finalLS[1].getName() + "?")
    showdownFinale = false;
    screen.createButton("Proceed", "finalLipSync()");
}
function finaleTop4() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Please Welcome Back!");
    screen.createBigText("The eliminated queens of Liam & Vince Drag Race!")
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createImage(eliminatedCast[i].image, "hotpink");
    }
    screen.createHorizontalLine();
    screen.createBold("The queens will vote on who will be this season's Miss Congeniality.");
    let missC = [];
    for (let i = 0; i < eliminatedCast.length; i++) {
        missC.push(eliminatedCast[i]);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].trackRecord.pop();
        eliminatedCast.indexOf(eliminatedCast[i]); {
            missC.splice(missC.indexOf(eliminatedCast[i]), 1);
            eliminatedCast[i].lipstick = missC[randomNumber(0, missC.length - 1)];
            missC.push(eliminatedCast[i]);
            screen.createImage(eliminatedCast[i].image, "hotpink");
            screen.createImage(eliminatedCast[i].lipstick.image, "lime");
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            }
    }
            currentCast[0].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[0].image, "hotpink");
            screen.createImage(currentCast[0].lipstick.image, "lime");
            screen.createBold(currentCast[0].getName() + " voted for " + currentCast[0].lipstick.getName() + "!");
            currentCast[0].lipstick.votes++;
            currentCast[1].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[1].image, "hotpink");
            screen.createImage(currentCast[1].lipstick.image, "lime");
            screen.createBold(currentCast[1].getName() + " voted for " + currentCast[1].lipstick.getName() + "!");
            currentCast[1].lipstick.votes++;
            currentCast[2].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[2].image, "hotpink");
            screen.createImage(currentCast[2].lipstick.image, "lime");
            screen.createBold(currentCast[2].getName() + " voted for " + currentCast[2].lipstick.getName() + "!");
            currentCast[2].lipstick.votes++;
            currentCast[3].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[3].image, "hotpink");
            screen.createImage(currentCast[3].lipstick.image, "lime");
            screen.createBold(currentCast[3].getName() + " voted for " + currentCast[3].lipstick.getName() + "!");
            currentCast[3].lipstick.votes++;
    eliminatedCast.sort((a, b) => b.votes - a.votes);
    screen.createHorizontalLine();
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createParagraph(eliminatedCast[i].getName() + " received " + eliminatedCast[i].votes + " votes!");
    }
    screen.createImage(eliminatedCast[0].image, "darkgreen");
    screen.createBold(eliminatedCast[0].getName() + ", condragulations, you are this season's Miss Congeniality.");
    eliminatedCast[0].addToTrackRecord("MISS C");
    eliminatedCast[0].coinz += 10;
    for (let i = 1; i < eliminatedCast.length; i++) {
    eliminatedCast[i].addToTrackRecord("GUEST");
    }
    screen.createButton("Proceed", "finaleLS()");
}
function finaleTop3() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Please Welcome Back!");
    screen.createBigText("The eliminated queens of Liam & Vince Drag Race!")
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createImage(eliminatedCast[i].image, "hotpink");
    }
    screen.createHorizontalLine();
    screen.createBold("The queens will vote on who will be this season's Miss Congeniality.");
    let missC = [];
    for (let i = 0; i < eliminatedCast.length; i++) {
        missC.push(eliminatedCast[i]);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].trackRecord.pop();
        eliminatedCast.indexOf(eliminatedCast[i]); {
            missC.splice(missC.indexOf(eliminatedCast[i]), 1);
            eliminatedCast[i].lipstick = missC[randomNumber(0, missC.length - 1)];
            missC.push(eliminatedCast[i]);
            screen.createImage(eliminatedCast[i].image, "hotpink");
            screen.createImage(eliminatedCast[i].lipstick.image, "lime");
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            }
    }
            currentCast[0].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[0].image, "hotpink");
            screen.createImage(currentCast[0].lipstick.image, "lime");
            screen.createBold(currentCast[0].getName() + " voted for " + currentCast[0].lipstick.getName() + "!");
            currentCast[0].lipstick.votes++;
            currentCast[1].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[1].image, "hotpink");
            screen.createImage(currentCast[1].lipstick.image, "lime");
            screen.createBold(currentCast[1].getName() + " voted for " + currentCast[1].lipstick.getName() + "!");
            currentCast[1].lipstick.votes++;
            currentCast[2].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
            screen.createImage(currentCast[2].image, "hotpink");
            screen.createImage(currentCast[2].lipstick.image, "lime");
            screen.createBold(currentCast[2].getName() + " voted for " + currentCast[2].lipstick.getName() + "!");
            currentCast[2].lipstick.votes++;
    eliminatedCast.sort((a, b) => b.votes - a.votes);
    screen.createHorizontalLine();
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createParagraph(eliminatedCast[i].getName() + " received " + eliminatedCast[i].votes + " votes!");
    }
    screen.createImage(eliminatedCast[0].image, "darkgreen");
    screen.createBold(eliminatedCast[0].getName() + ", condragulations, you are this season's Miss Congeniality.");
    eliminatedCast[0].addToTrackRecord("MISS C");
    eliminatedCast[0].coinz += 10;
    for (let i = 1; i < eliminatedCast.length; i++) {
    eliminatedCast[i].addToTrackRecord("GUEST");
    }
    screen.createButton("Proceed", "finaleJudging()");
}
function finaleLS() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The Grand Finale!");
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
    screen.createImage(currentCast[0].image, "royalblue");
    screen.createImage(currentCast[1].image, "royalblue");
    screen.createImage(currentCast[2].image, "royalblue");
    screen.createImage(currentCast[3].image, "royalblue");
    screen.createParagraph("Our Top 4 will participate in a lip-sync smackdown for the crown! The preliminaries will now be decided...");
    screen.createHorizontalLine();
    if (goldticket == true && ticketSave == false) {
    screen.createBigText("Unwrap The Chocolate!");
    screen.createImage(goldenTicket[0].image, "gold");
    screen.createBold(goldenTicket[0].getName() + ", you have the golden ticket.<br>You are given the chance to choose which opponent you will go up against.");
    currentCast.sort((a, b) => a.favoritism - b.favoritism);
        if (goldenTicket[0] == currentCast[0]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[1]);
            secondLS.push(currentCast[2]);
            secondLS.push(currentCast[3]);
        }
        else if (goldenTicket[0] == currentCast[1]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[0]);
            secondLS.push(currentCast[2]);
            secondLS.push(currentCast[3]);
        }
        else if (goldenTicket[0] == currentCast[2]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[0]);
            secondLS.push(currentCast[1]);
            secondLS.push(currentCast[3]);
        }
        else if (goldenTicket[0] == currentCast[3]) {
            firstLS.push(goldenTicket[0]);
            firstLS.push(currentCast[0]);
            secondLS.push(currentCast[1]);
            secondLS.push(currentCast[2]);
        }
    screen.createHorizontalLine();
    }
    else if (goldticket == false || goldticket == true && ticketSave == true) {
    for (let i = 0; i < 2; i++) {
        let q1 = currentCast[randomNumber(0, currentCast.length - 1)];
        firstLS.push(q1);
        currentCast.splice(currentCast.indexOf(q1), 1);
        let q2 = currentCast[randomNumber(0, currentCast.length - 1)];
        secondLS.push(q2);
        currentCast.splice(currentCast.indexOf(q2), 1);
    }
    }
    screen.createBigText("The preliminaries will be: ");
    screen.createImage(firstLS[0].image, "darkblue");
    screen.createImage(firstLS[1].image, "darkblue");
    screen.createBold(firstLS[0].getName() + " vs. " + firstLS[1].getName());
    screen.createParagraph("and");
    screen.createImage(secondLS[0].image, "darkred");
    screen.createImage(secondLS[1].image, "darkred");
    screen.createBold(secondLS[0].getName() + " vs. " + secondLS[1].getName());
    episodeChallenges.push("Finale");
    lsaQueen.push(" ");
    screen.createButton("Proceed", "finaleLipSyncs()");
}
function finaleLipSyncs() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Let the Lipsyncs Begin");
    screen.createParagraph(firstLS[0].getName() + " and " + firstLS[1].getName() + " lip-sync...");
    lsSong();
    for (let i = 0; i < firstLS.length; i++) {
        firstLS[i].getLipsync();
    }
    if (randomNumber(0, 100 >= 86))
    firstLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    firstLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    finalLS.push(firstLS[0]);
    if (goldticket == false || goldticket == true && goldenTicket[0] != firstLS[1]) {
    firstLS[1].addToTrackRecord("ELIMINATED");
    }
    else if (goldenTicket[0] == firstLS[1]) {
    firstLS[1].addToTrackRecord("ELIMINATED  ");
    }
    eliminatedCast.unshift(firstLS[1]);
    screen.createImage(firstLS[0].image, "silver");
    screen.createBold(firstLS[0].getName() + ", shantay you stay.");
    screen.createImage(firstLS[1].image, "sienna");
    screen.createBold(firstLS[1].getName() + ", sashay away...");
    if (superstars) {
        firstLS[1].coinz += 25;
    }
    screen.createHorizontalLine();
    screen.createParagraph(secondLS[0].getName() + " and " + secondLS[1].getName() + " lip-sync...");
    lsSong();
    for (let i = 0; i < secondLS.length; i++) {
        secondLS[i].getASLipsync();
    }
    if (randomNumber(0, 100 >= 86))
    secondLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    secondLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    finalLS.push(secondLS[0]);
    secondLS[1].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(secondLS[1]);
    screen.createImage(secondLS[0].image, "silver");
    screen.createBold(secondLS[0].getName() + ", shantay you stay.");
    screen.createImage(secondLS[1].image, "sienna");
    screen.createBold(secondLS[1].getName() + ", sashay away...");
    if (superstars) {
        secondLS[1].coinz += 25;
    }
    screen.createButton("Proceed", "finalLipSync()");
}
function finalLipSync() {
    onTop4Finale = true;
    onFinale = true;
    let screen = new Scene();
    screen.clean();
    screen.createHeader("We have a winner, baby.");
    screen.createBold(finalLS[0].getName() + " and " + finalLS[1].getName() + " will lip-sync for the crown...!");
    lsSong();
    screen.createHorizontalLine();
    if (superstars) {
        screen.createBold("Ladies, I've made my decision. The Ultimate Queen of Queens is...");
    }
    else {
        screen.createBold("Ladies, I've made my decision. The Next Drag Superstar is...");
    }
    for (let i = 0; i < finalLS.length; i++)
        finalLS[i].getFinale();
    finalLS.sort((a, b) => b.finaleScore - a.finaleScore);
    if (finalLS[0].finaleScore == finalLS[1].finaleScore && goldticket == false && randomNumber(0, 100) >= 50 && superstars == false) {
        screen.createBold("It's a TIE! For the FIRST TIME in Drag Race herstory, you are both winners, baby");
        screen.createImage(finalLS[0].image, "orange");
        screen.createImage(finalLS[1].image, "orange");
        screen.createBigText(finalLS[0].getName() + " and " + finalLS[1].getName() + "!!");
        screen.createBold("Now prance, my queens!");
        finalLS[0].addToTrackRecord("SHARED WIN");
        finalLS[1].addToTrackRecord("SHARED WIN");
        finalLS[0].coinz += 100;
        finalLS[1].coinz += 100;
        if (showgirlShowdown == true && (top4 || savequeen)) {
            finalLS[0].coinz += 50;
            finalLS[1].coinz += 50;
        }
        eliminatedCast.unshift(finalLS[1]);
        finalLS.splice(1, 1);
    }else{
        let winner = 0;
        screen.createImage(finalLS[winner].image, "yellow");
        screen.createBigText(finalLS[winner].getName() + "!!");
        screen.createBold("Now prance, my queen!");
        if (goldticket == false || goldticket == true && goldenTicket[0] != finalLS[winner]) {
        finalLS[winner].addToTrackRecord("WINNER");
        if (superstars == true) {
            finalLS[winner].coinz += 250;
        }
        else if (showgirlShowdown == true && (top4 || savequeen || top3)) {
            finalLS[winner].coinz += 150;
        }
        else {
            finalLS[winner].coinz += 100;
        }
        }
        else if (goldenTicket[0] == finalLS[winner]) {
        finalLS[winner].addToTrackRecord("WINNER  ");
        if (superstars == true) {
            finalLS[winner].coinz += 250;
        }
        else if (showgirlShowdown == true && (top4 || savequeen || top3)) {
            finalLS[winner].coinz += 150;
        }
        else {
            finalLS[winner].coinz += 100;
        }
        }
        for (let i = 0; i < finalLS.length; i++) {
            if (!(finalLS.indexOf(finalLS[i]) == winner)) {
                if (goldticket == false || finalLS[i] != goldenTicket[0]) {
                finalLS[i].addToTrackRecord("RUNNER UP");
                if (superstars) {
                    finalLS[i].coinz += 50;
                }
                else if (showgirlShowdown == true && (top4 || savequeen || top3)) {
                    finalLS[i].coinz += 50;
                }
                }
                else if (finalLS[i] == goldenTicket[0]) {
                finalLS[i].addToTrackRecord("RUNNER UP  ");
                if (superstars) {
                    finalLS[i].coinz += 50;
                }
                else if (showgirlShowdown == true && (top4 || savequeen || top3)) {
                    finalLS[i].coinz += 50;
                }
                }
                eliminatedCast.unshift(finalLS[i]);
                finalLS.splice(i, 1);
            }
        }
    }
    screen.createButton("Proceed", "contestantProgress()");
}
function finale() {
   //sort queens by finale score:
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].getFinale();
    }
    currentCast.sort((a, b) => (b.finaleScore - a.finaleScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The grand finale!");
    for (let i = 0; i < currentCast.length; i++)
        screen.createImage(currentCast[i].image);
    screen.createParagraph("Our Top 3 will participate in a music video for RuPaul's newest single!");
    screen.createButton("Proceed", "runway()", "button2");
}
function finaleTeam() {
    //sort queens by finale score:
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].getFinale();
    }
    currentCast.sort((a, b) => (b.finaleScore - a.finaleScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The grand finale!");
    screen.createParagraph("Our Top 4 will participate in a music video for RuPaul's newest single!");
    screen.createButton("Proceed", "runway()", "button2");
}
function finaleJudging() {
    let screen = new Scene();
    screen.clean();
    if (forFinaleLS == false && goldticket == false || forFinaleLS == false && goldticket == true && ticketSave == true) {
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
    screen.createHeader("I have made my decision...");
    screen.createBold("Ladies, it's time to crown the Next Drag Superstar, and...");
    screen.createImage(currentCast[2].image, "sienna");
    screen.createBold(currentCast[2].getName() + ", I'm sorry my dear but it's not your time. I must ask you to sashay away...");
    currentCast[2].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(currentCast[2]);
    currentCast.splice(2, 1);
    screen.createHorizontalLine();
    screen.createImage(currentCast[0].image, "silver");
    screen.createImage(currentCast[1].image, "silver");
    screen.createBold(currentCast[0].getName() + " and " + currentCast[1].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync.. for the CROWN!!");
    lsSong();
    }
    else if (forFinaleLS == true) {
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
    screen.createHeader("I have made my decision...");
    screen.createBold("Ladies, it's time to crown the Next Drag Superstar, and...");
    screen.createImage(currentCast[0].image, "silver");
    screen.createImage(currentCast[1].image, "silver");
    screen.createImage(currentCast[2].image, "silver");
    screen.createBold(currentCast[0].getName() + ", " + currentCast[1].getName() + ", " + currentCast[2].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync... for the CROWN!!");
    lsSong();
    }
    else if (goldticket == true && ticketSave == false && forFinaleLS == false) {
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
    screen.createHeader("The time has come to crown our queen...");
    screen.createBigText("Ladies, it's time to unwrap your chocolate.");
    screen.createImage(goldenTicket[0].image, "gold");
    screen.createBold(goldenTicket[0].getName() + ", condragulations, my dear. <br> That means you automatically got the opportunity to be at the final lipsync for the crown.");
    if (goldenTicket[0] == currentCast[0]) {
    firstLS.push(currentCast[1], currentCast[2]);
    }
    else if (goldenTicket[0] == currentCast[1]) {
    firstLS.push(currentCast[0], currentCast[2]);
    }
    else if (goldenTicket[0] == currentCast[2]) {
    firstLS.push(currentCast[0], currentCast[1]);
    }
    screen.createImage(firstLS[0].image, "cyan");
    screen.createImage(firstLS[1].image, "cyan");
    screen.createBold(firstLS[0].getName() + ", " + firstLS[1].getName() + ", that means, you are bound to lipsync for your lives first.");
    screen.createHorizontalLine();
    screen.createBigText("The time has come...");
    screen.createBold("For you to lipsync for your life!!!");
    lsSong();
    if (randomNumber(0, 100 >= 66))
    firstLS.sort((a, b) => (b.lipsyncScore + b.favoritism) - (a.lipsyncScore + a.favoritism));
    else
    firstLS.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    screen.createImage(firstLS[1].image, "red");
    screen.createParagraph(firstLS[1].getName() + ", I'm sorry, my dear, but this is not your time. Now, sashay away.")
    firstLS[1].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(firstLS[1]);
    currentCast.splice(currentCast.indexOf(firstLS[1]), 1);
    screen.createImage(firstLS[0].image, "pink");
    screen.createBold(firstLS[0].getName() + ", that means, you're going to lipsync for the crown.")
    screen.createHorizontalLine();
    screen.createImage(currentCast[0].image, "silver");
    screen.createImage(currentCast[1].image, "silver");
    screen.createBold(currentCast[0].getName() + " and " + currentCast[1].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync.. for the CROWN!!");
    lsSong();
    }
    screen.createButton("Proceed", "finaleFinale()");
}
function finaleTeamJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("I have made my decision...");
    screen.createBold("Ladies, it's time to crown the Next Drag Superstar, and...");
    screen.createBold(currentCast[1].getName() + ", I'm sorry my dears but it's not your time. I must ask you both to sashay away...");
    screen.createHorizontalLine();
    currentCast[1].QueenA.addToTrackRecord("ELIMINATED");
    currentCast[1].QueenB.addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(currentCast[1].QueenA);
    eliminatedCast.unshift(currentCast[1].QueenB);
    currentCast.splice(1, 1);
    if (randomNumber(0, 100) <= 50) {
        currentCast.push(currentCast[0].QueenA);
        currentCast.push(currentCast[0].QueenB);
    }
    else {
        currentCast.push(currentCast[0].QueenB);
        currentCast.push(currentCast[0].QueenA);
    }
    if (randomNumber(0, 100) <= 80) {
        currentCast[0].QueenB.finaleScore += 1;
    }
    currentCast.splice(0, 1);
    screen.createBold(currentCast[0].getName() + " and " + currentCast[1].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync.. for the CROWN!!");
    lsSong();
    screen.createButton("Proceed", "finaleFinale()");
}
function finaleFinale() {
    onFinale = true;
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The end.");
    screen.createBold("Ladies, I've made my decision. The Next Drag Superstar is...");
    if (currentCast[0].finaleScore == currentCast[1].finaleScore && randomNumber(0, 1000) >= 995 && forFinaleLS == false && goldticket == false) {
        screen.createBold("It's a TIE! For the FIRST TIME in Drag Race herstory, you are both winners, baby");
        screen.createImage(currentCast[0].image, "orange");
        screen.createImage(currentCast[1].image, "orange");
        screen.createBigText(currentCast[0].getName() + " and " + currentCast[1].getName() + "!!");
        screen.createBold("Now prance, my queens!");
        currentCast[0].addToTrackRecord("SHARED WIN");
        currentCast[1].addToTrackRecord("SHARED WIN");
        if ((all_stars || lipsync_assassin || throwqueen) && juryTwist == false) {
            currentCast[2].addToTrackRecord("RUNNER UP");
            eliminatedCast.unshift(currentCast[2]);
            currentCast.splice(2, 1);
        }
    }
    else{
    screen.createImage(currentCast[0].image, "yellow");
    screen.createBigText(currentCast[0].getName() + "!!");
    screen.createBold("Now prance, my queen!");
    currentCast[0].coinz += 100;
    if (goldticket == false || goldticket == true && ticketSave == true) {
    currentCast[0].addToTrackRecord("WINNER");
    currentCast[1].addToTrackRecord("RUNNER UP");
    }
    else if (goldticket == true && ticketSave == false && currentCast[0] == goldenTicket[0]) {
    currentCast[0].addToTrackRecord("WINNER  ");
    currentCast[1].addToTrackRecord("RUNNER UP");
    }
    else if (goldticket == true && ticketSave == false && currentCast[1] == goldenTicket[0]) {
    currentCast[0].addToTrackRecord("WINNER");
    currentCast[1].addToTrackRecord("RUNNER UP  ");
    }
    eliminatedCast.unshift(currentCast[1]);
    currentCast.splice(1, 1);
    if ((all_stars || lipsync_assassin || throwqueen || vstheworld) && juryTwist == false && (goldticket == false || ticketSave == true) || forFinaleLS == true) {
        currentCast[1].addToTrackRecord("RUNNER UP");
        eliminatedCast.unshift(currentCast[1]);
        currentCast.splice(1, 1);
    }
    }
    episodeChallenges.push("Finale");
    lsaQueen.push("");
    screen.createButton("Proceed", "contestantProgress()");
}
function finaleAS() {
    //sort queens by finale score:
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].getFinale();
    }
    currentCast.sort((a, b) => (b.finaleScore - a.finaleScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("The grand finale!");
    for (let i = 0; i < currentCast.length; i++)
        screen.createImage(currentCast[i].image);
    screen.createParagraph("Our Top 4 will create verses and choreography for a new original song!");
    screen.createButton("Proceed", "runway()", "button2");
}
function finaleASChoc() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time to unwrap...");
    screen.createBold("Ladies, one of you have the golden chocolate bar. <br> And that lucky queen will automatically advance for the final lipsync for the crown!");
    for (let i = 0; i < currentCast.length; i++) {
        if (currentCast[i] != goldenTicket[0]) {
            screen.createImage(currentCast[i].image, "brown");
            screen.createBold("It's chocolate!");
        }
        else if (currentCast[i] == goldenTicket[0]) {
            screen.createImage(currentCast[i].image, "gold");
            screen.createBold("It's golden!");
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("That means...")
    screen.createImage(goldenTicket[0].image, "gold");
    screen.createBold(goldenTicket[0].getName() + ", you may now go backstage and wait until we find out who will be your opponent.")
    if (juryTwist == false) {
        let nonChoc = [];
        nonChoc.push(currentCast[0]);
        nonChoc.push(currentCast[1]);
        nonChoc.push(currentCast[2]);
        nonChoc.push(currentCast[3]);
        nonChoc.splice(nonChoc.indexOf(goldenTicket[0]), 1)
        for (let i = 0; i < nonChoc.length; i++) {
            screen.createImage(nonChoc[i].image, "silver");
        }
        screen.createBold("Ladies, you will have to battle it out on a 3-Way lipsync where only one queen gets to advance.")
        screen.createButton("Proceed", "finaleASChocLS()");
    }
    else if (juryTwist == true) {
        screen.createButton("Proceed", "finaleASChocJury()");
    }
}
function finaleASChocLS() {
    let nonChoc = [];
        nonChoc.push(currentCast[0]);
        nonChoc.push(currentCast[1]);
        nonChoc.push(currentCast[2]);
        nonChoc.push(currentCast[3]);
        nonChoc.splice(nonChoc.indexOf(goldenTicket[0]), 1)
    for (let i = 0; i < nonChoc.length; i++) {
        nonChoc[i].getLipsync();
    }
    nonChoc.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("I've made my decision.");
    screen.createImage(nonChoc[0].image, "gold");
    screen.createBold(nonChoc[0].getName() + ", shantay, you stay. <br> You are one step away from the crown.");
    screen.createImage(nonChoc[1].image, "red");
    screen.createImage(nonChoc[2].image, "red");
    screen.createBold(nonChoc[1].getName() + ", " + nonChoc[2].getName() + ", that means, my dears, this is not yet your time. <br> You are and will always be an All Star, now, sashay away...");
    nonChoc[1].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(nonChoc[1]);
    currentCast.splice(currentCast.indexOf(nonChoc[1]), 1);
    nonChoc[2].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(nonChoc[2]);
    currentCast.splice(currentCast.indexOf(nonChoc[2]), 1);
    screen.createButton("Proceed", "finaleASChocFTC()");
}
function finaleASChocJury() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Please Welcome Back!");
    screen.createBigText("The eliminated All Stars of Liam & Vince Drag Race!")
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createImage(eliminatedCast[i].image, "hotpink");
    }
    let nonChoc = [];
        nonChoc.push(currentCast[0]);
        nonChoc.push(currentCast[1]);
        nonChoc.push(currentCast[2]);
        nonChoc.push(currentCast[3]);
        nonChoc.splice(nonChoc.indexOf(goldenTicket[0]), 1)
    screen.createHorizontalLine();
    screen.createBold("The queens will vote on who will be the last queen that shall lipsync for the crown.");
    let lipstickChoices = [];
    lipstickChoices.push(nonChoc[0]);
    lipstickChoices.push(nonChoc[1]);
    lipstickChoices.push(nonChoc[2]);
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].trackRecord.pop();
        eliminatedCast.indexOf(eliminatedCast[i]); {
            if (randomNumber(0, 100) <= 15) {
                eliminatedCast[i].lipstick = lipstickChoices.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
            }
            else {
                eliminatedCast[i].lipstick = lipstickChoices[randomNumber(0, 2)];
            }
            screen.createImage(eliminatedCast[i].image, "hotpink");
            screen.createImage(eliminatedCast[i].lipstick.image, "lime");
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            }
    }
    nonChoc.sort((a, b) => b.votes - a.votes);
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].addToTrackRecord("GUEST");
    }
    screen.createHorizontalLine();
    screen.createBigText("The jury has spoken...");
    screen.createImage(nonChoc[0].image, "gold");
    screen.createBold(nonChoc[0].getName() + ", that means, you are one step closer from being a part of Drag Race Hall of Fame.");
    screen.createImage(nonChoc[1].image, "darkbrown");
    screen.createImage(nonChoc[2].image, "darkbrown");
    screen.createBold(nonChoc[1].getName() + " and " + nonChoc[2].getName() + ", I'm sorry, my dears, but this is not yet your time. Please step at the back of the stage.");
    nonChoc[1].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(nonChoc[1]);
    currentCast.splice(currentCast.indexOf(nonChoc[1]), 1)
    nonChoc[2].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(nonChoc[2]);
    currentCast.splice(currentCast.indexOf(nonChoc[2]), 1)
    screen.createButton("Proceed", "finaleASChocFTC()");
}
function finaleASChocFTC() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("I have made my decision...");
    screen.createBold("Ladies, it's time to crown the Next Drag Superstar, and...");
    currentCast.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism));
    for (let i = 0; i < currentCast.length; i++)
        screen.createImage(currentCast[i].image, "silver");
    screen.createBold(currentCast[0].getName() + ", " + currentCast[1].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync... for the CROWN!!!");
    lsSong();
    screen.createButton("Proceed", "finaleFinale()");
}
function finaleASJury() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Please Welcome Back!");
    screen.createBigText("The eliminated All Stars of Liam & Vince Drag Race!")
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createImage(eliminatedCast[i].image, "hotpink");
    }
    screen.createHorizontalLine();
    screen.createBold("The queens will vote on who will be the Top 2 queens that shall lipsync for the crown.");
    let lipstickChoices = [];
    lipstickChoices.push(currentCast[0]);
    lipstickChoices.push(currentCast[1]);
    lipstickChoices.push(currentCast[2]);
    lipstickChoices.push(currentCast[3]);
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].trackRecord.pop();
        eliminatedCast.indexOf(eliminatedCast[i]); {
            if (randomNumber(0, 100) <= 15) {
                eliminatedCast[i].lipstick = lipstickChoices.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
                lipstickChoices.splice(lipstickChoices.indexOf(eliminatedCast[i].lipstick), 1);
                eliminatedCast[i].lipstickTwo = lipstickChoices.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
                lipstickChoices.push(eliminatedCast[i].lipstick);
            }
            else {
                eliminatedCast[i].lipstick = lipstickChoices[randomNumber(0, 3)];
                lipstickChoices.splice(lipstickChoices.indexOf(eliminatedCast[i].lipstick), 1);
                eliminatedCast[i].lipstickTwo = lipstickChoices[randomNumber(0, 2)];
                lipstickChoices.push(eliminatedCast[i].lipstick);
            }
            screen.createImage(eliminatedCast[i].image, "hotpink");
            screen.createImage(eliminatedCast[i].lipstick.image, "lime");
            screen.createImage(eliminatedCast[i].lipstickTwo.image, "lime");
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + " and " + eliminatedCast[i].lipstickTwo.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            eliminatedCast[i].lipstickTwo.votes++;
            }
    }
    currentCast.sort((a, b) => b.votes - a.votes);
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].addToTrackRecord("GUEST");
    }
    screen.createHorizontalLine();
    screen.createBigText("The jury has spoken...");
    screen.createImage(currentCast[0].image, "yellow");
    screen.createImage(currentCast[1].image, "yellow");
    screen.createBold(currentCast[0].getName() + " and " + currentCast[1].getName() + ", that means, the two of you are one step closer from being a part of Drag Race Hall of Fame.");
    screen.createImage(currentCast[2].image, "darkbrown");
    screen.createImage(currentCast[3].image, "darkbrown");
    screen.createBold(currentCast[2].getName() + " and " + currentCast[3].getName() + ", I'm sorry, my dears, but this is not yet your time. Please step at the back of the stage.");
    currentCast[2].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(currentCast[2]);
    currentCast.splice(2, 1);
    currentCast[2].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(currentCast[2]);
    currentCast.splice(2, 1);
    screen.createButton("Proceed", "finaleASJudging()");
}
function finaleASJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("I have made my decision...");
    screen.createBold("Ladies, it's time to crown the Next Drag Superstar, and...");
    currentCast.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism));
    if (juryTwist == false) {
    screen.createImage(currentCast[3].image, "sienna");
    screen.createBold(currentCast[3].getName() + ", I'm sorry my dear but it's not your time. I must ask you to sashay away...");
    currentCast[3].addToTrackRecord("ELIMINATED");
    eliminatedCast.unshift(currentCast[3]);
    currentCast.splice(3, 1);
    screen.createHorizontalLine();
    for (let i = 0; i < currentCast.length; i++)
        screen.createImage(currentCast[i].image, "silver");
        screen.createBold(currentCast[0].getName() + ", " + currentCast[1].getName() + ", " + currentCast[2].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync... for the CROWN!!!");
    }
    else if (juryTwist == true) {
        for (let i = 0; i < currentCast.length; i++)
        screen.createImage(currentCast[i].image, "silver");
        screen.createBold(currentCast[0].getName() + ", " + currentCast[1].getName() + ", this is your last chance to prove yourself. It's time for you to lipsync... for the CROWN!!!");
    }
    lsSong();
    screen.createButton("Proceed", "finaleFinale()");
}
function contestantProgress() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Contestant Progress");
    document.body.style.backgroundImage = "linear-gradient(to bottom right, #D4AF37, #4169e1, #a62c2b)";
    let main = document.querySelector("div#MainBlock");
    let centering = document.createElement("center");
    let trackRecords = document.createElement("table");
    trackRecords.setAttribute("id", "trackRecord");
    if (totalCastSize >= 12 && totalCastSize < 15)
        trackRecords.setAttribute("style", "font-size: 85%;");
    if (totalCastSize >= 15)
        trackRecords.setAttribute("style", "font-size: 75%");
    let header = document.createElement("tr");
    trackRecords.appendChild(header);
    let th = document.createElement("th");
    th.innerHTML = "Queen";
    th.setAttribute("style", "background-color: #e9dfe9; font-weight: bold;");
    header.appendChild(th);
    let th_i = document.createElement("th");
    th_i.innerHTML = "Photo";
    th_i.setAttribute("style", "background-color: #e9dfe9; font-weight: bold;");
    header.appendChild(th_i);
    for (let i = 0; i < episodeChallenges.length; i++) {
        let th = document.createElement("th");
        th.innerHTML = episodeChallenges[i];
        th.setAttribute("style", "background-color: #e9dfe9; font-weight: bold;");
        header.appendChild(th);
    }
    let th_2 = document.createElement("th");
    th_2.innerHTML = "PPE";
    th_2.setAttribute("style", "background-color: #904cad; color: white; font-weight: bold;");
    header.appendChild(th_2);
    let th_3 = document.createElement("th");
    th_3.innerHTML = "COINZ";
    th_3.setAttribute("style", "background-color: #904cad; color: white; font-weight: bold;");
    header.appendChild(th_3);
    let winner = document.createElement("tr");
    let name = document.createElement("td");
    name.setAttribute("style", "background-color: #f5ebf5; font-weight: bold; height: 50px;");
    if (onFinale) {
        let winnerQueen;
        if ((savequeen || top4 || superstars) == false)
            winnerQueen = currentCast[0];
        else if (onTop4Finale == true)
            winnerQueen = finalLS[0];
        else
            winnerQueen = currentCast[0];
        name.innerHTML = winnerQueen.getName();
        winner.appendChild(name);
        let photo = document.createElement("td");
        photo.setAttribute("style", "background: url("+ winnerQueen.image +"); background-size: 75px 75px; background-position: center; height: 65px;");
        winner.appendChild(photo);
        for (let i = 0; i < winnerQueen.trackRecord.length + 1; i++) {
            let placement = document.createElement("td");
            placement.innerHTML = winnerQueen.trackRecord[i];
            if (placement.innerHTML == "WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: royalblue; color: white;");
            }
            else if (placement.innerHTML == "TOP2" || placement.innerHTML == "TOP5") {
                placement.setAttribute("style", "background-color: deepskyblue;");
            }
            else if (placement.innerHTML == "TOP3" || placement.innerHTML == "TOP4") {
                placement.setAttribute("style", "background-color: #33cde8;");
            }
            else if (placement.innerHTML == "TOP6" || placement.innerHTML == "TOP7" || placement.innerHTML == "TOP8" || placement.innerHTML == "TOP9" || placement.innerHTML == "TOP10" || placement.innerHTML == "TOP11") {
                placement.setAttribute("style", "background-color: cyan;");
            }
            else if (placement.innerHTML == "LOW") {
                placement.setAttribute("style", "background-color: pink;");
            }
            else if (placement.innerHTML == "HIGH" || placement.innerHTML == "HIGH<br>TEAM") {
                placement.setAttribute("style", "background-color: lightblue;");
            }
            else if (placement.innerHTML == "SAVED") {
                    placement.setAttribute("style", "background-color: lightsalmon;");
                }
            else if (placement.innerHTML == "CHOC") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700;");
                }
            else if (placement.innerHTML == "CHOC ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #5552d9;");
                }
            else if (placement.innerHTML == "CHOC  ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: darkgreen;");
                }
            else if (placement.innerHTML == "CHOC   ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #b5480d;");
                }
            else if (placement.innerHTML == "KEPT") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #96b1ff;");
                }
            else if (placement.innerHTML == " KEPT ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f9b8ff;");
                }
            else if (placement.innerHTML == "STOLEN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f79102;");
                }
            else if (placement.innerHTML == "STOLEN ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f79102; color: purple;");
                }
            else if (placement.innerHTML == "BTM2" || placement.innerHTML == "BTM3" || placement.innerHTML == "BTM4" || placement.innerHTML == "BTM5" || placement.innerHTML == "BTM" || placement.innerHTML == "BTM6" || placement.innerHTML == "BTM7" || placement.innerHTML == "BTM8" || placement.innerHTML == "BTM9" || placement.innerHTML == "BTM10" || placement.innerHTML == "BTM11" || placement.innerHTML == "BTM12" || placement.innerHTML == "BTM13" || placement.innerHTML == "BTM14" || placement.innerHTML == "BTM15" || placement.innerHTML == "BTM16" || placement.innerHTML == "BTM17" || placement.innerHTML == "BTM18" || placement.innerHTML == "BTM19" || placement.innerHTML == "BTM20" || placement.innerHTML == "BTM21") {
                placement.setAttribute("style", "background-color: tomato;");
            }
            else if (placement.innerHTML == " BTM3 " || placement.innerHTML == " BTM4 " || placement.innerHTML == " BTM5 " || placement.innerHTML == " BTM6 ") {
                placement.setAttribute("style", "background-color: orange;");
            }
            else if (placement.innerHTML == "  BTM3  " || placement.innerHTML == "  BTM4  " || placement.innerHTML == "  BTM5  " || placement.innerHTML == "  BTM6  ") {
                placement.setAttribute("style", "background-color: orange; color: blue;");
            }
            else if (placement.innerHTML == "BTM2 " || placement.innerHTML == "BTM6 " || placement.innerHTML == "BTM5 " || placement.innerHTML == "BTM4 " || placement.innerHTML == "BTM ") {
                placement.setAttribute("style", "background-color: tomato; color: cyan;");
            }
            else if (placement.innerHTML == "BTM2  ") {
                placement.setAttribute("style", "background-color: tomato; color: #90EE90;");
            }
            else if (placement.innerHTML == "BTM2   ") {
                placement.setAttribute("style", "background-color: tomato; color: yellow;");
            }
            else if (placement.innerHTML == "ELIM <br> + <br> IN") {
                placement.setAttribute("style", "background-color: hotpink; font-weight: bold;");
            }
            else if (placement.innerHTML == "ELIM <br> + <br> OUT") {
                placement.setAttribute("style", "background-color: red; font-weight: bold;");
            }
            else if (placement.innerHTML == "ELIM") {
                placement.setAttribute("style", "font-weight: bold; background-color: red;");
            }
            else if (placement.innerHTML == "  ELIM  ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; text-decoration: underline;");
            }
            else if (placement.innerHTML == "ELIM ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: cyan;");
            }
            else if (placement.innerHTML == "ELIM  ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: #90EE90;");
            }
            else if (placement.innerHTML == "ELIM   ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: yellow;");
            }
            else if (placement.innerHTML == "WINNER") {
                placement.setAttribute("style", "font-weight: bold; background-color: yellow;");
            }
            else if (placement.innerHTML == "WINNER  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: yellow;");
            }
            else if (placement.innerHTML == "SHARED WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FDFD96;");
            }
            else if (placement.innerHTML == "RUNNER UP") {
                placement.setAttribute("style", "font-weight: bold; background-color: silver;");
            }
            else if (placement.innerHTML == "RUNNER UP  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: silver;");
            }
            else if (placement.innerHTML == "ELIMINATED") {
                placement.setAttribute("style", "font-weight: bold; background-color: sienna;");
            }
            else if (placement.innerHTML == "ELIMINATED  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: sienna;");
            }
            else if (placement.innerHTML == "LOST 1ST ROUND") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FF7C00;");
            }
            else if (placement.innerHTML == "LOST 2ND ROUND") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FFAE00;");
            }
            else if (placement.innerHTML == "") {
                placement.setAttribute("style", "background-color: gray");
            }
            else if (placement.innerHTML == "WIN ") {
                placement.setAttribute("style", "font-weight: bold; background-color: cyan;");
            }
            else if (placement.innerHTML == "SAFE" || placement.innerHTML == "FAIR") {
                placement.setAttribute("style", "background-color: white;");
            }
            else if (placement.innerHTML == "SAFE " || placement.innerHTML == "STAY") {
                    placement.setAttribute("style", "background-color: palegreen; color:#000;");
            }
            else if (placement.innerHTML == " STAY ") {
                    placement.setAttribute("style", "background-color: #5abf5a; color:#000;");
            }
            else if (placement.innerHTML == " STAY") {
                    placement.setAttribute("style", "background-color: #6be36b; color:#000;");
            }
            else if (placement.innerHTML == "STAY ") {
                    placement.setAttribute("style", "background-color: #40ff73; color:#000;");
            }
            else if (placement.innerHTML == "STAY  ") {
                    placement.setAttribute("style", "background-color: palegreen; color:#000; text-decoration: underline;");
            }
            else if (placement.innerHTML == " SAFE ") {
                    placement.setAttribute("style", "background-color: #7D1935; color:#000;");
            }
            else if (placement.innerHTML == "RUN") {
                    placement.setAttribute("style", "background-color: magenta; color:white;");
            }
            else if (placement.innerHTML == "SAFE  " || placement.innerHTML == "ADV") {
                    placement.setAttribute("style", "background-color: #006622; color: white; font-weight: bold;");
            }
            else if (placement.innerHTML == "ADV  ") {
                    placement.setAttribute("style", "background-color: #006622; color: white; text-decoration: underline; font-weight: bold;");
            }
            else if (placement.innerHTML == "OUT ") {
                    placement.setAttribute("style", "background-color: purple; color:white;");
            }
            else if (placement.innerHTML == " WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: darkblue; color: white;");
            }
            else if (placement.innerHTML == "DISQ" || placement.innerHTML == "INJ" || placement.innerHTML == "QUIT") {
                placement.setAttribute("style", "font-weight: bold; background-color: black; color: white;");
            }
            else if (placement.innerHTML == "MISS C") {
                placement.setAttribute("style", "font-weight: bold; background-color: #ac294f; color: white");
            }
            else if (placement.innerHTML == "GUEST") {
                placement.setAttribute("style", "background-color: #c9305c; color: white");
            }
            else if (placement.innerHTML == "DEPT") {
                placement.setAttribute("style", "font-weight: bold; background-color: plum;");
            }
            else if (placement.innerHTML == "WIN+QUIT") {
                placement.setAttribute("style", "font-weight: bold; background-color:#5920d4;");
            }
            else if (placement.innerHTML == "RTRN" || placement.innerHTML == "IN") {
                placement.setAttribute("style", "font-weight: bold; background-color: magenta;");
            }
            else if (placement.innerHTML == "RTRN " || placement.innerHTML == "LOST") {
                placement.setAttribute("style", "font-weight: bold; background-color: orange;");
            }
            else if (placement.innerHTML == " WIN ") {
                placement.setAttribute("style", "background-color: black; color: white;");
            }
            else if (placement.innerHTML == "LOSS") {
                placement.setAttribute("style", "background-color: #4B4848; color: white");
            }
            else if (placement.innerHTML == "undefined") {
                placement.setAttribute("style", "font-weight: bold; background-color: lightgray;");
                placement.innerHTML = (winnerQueen.ppe / (winnerQueen.episodesOn)).toFixed(2);
            }
            winner.appendChild(placement);
        }
        let earnings = document.createElement("td");
        earnings.setAttribute("style", "font-weight: bold; background-color: lightgray;");
        earnings.innerHTML += "$";
        earnings.innerHTML += winnerQueen.coinz;
        earnings.innerHTML += "K";
        winner.appendChild(earnings);
        trackRecords.appendChild(winner);
    }
    if (!onFinale) {
        for (let i = 0; i < currentCast.length; i++) {
            let contestant = document.createElement("tr");
            let name = document.createElement("td");
            name.setAttribute("style", "font-weight: bold;");
            name.innerHTML = currentCast[i].getName();
            name.setAttribute("style", "background-color: #f5ebf5; font-weight: bold; height: 65px;");
            contestant.appendChild(name);
            let photo = document.createElement("td");
            photo.setAttribute("style", "background: url("+ currentCast[i].image +"); background-size: 75px 75px; background-position: center; height: 50px;");
            contestant.appendChild(photo);
            for (let k = 0; k < currentCast[i].trackRecord.length + 1; k++) {
                let placement = document.createElement("td");
                placement.innerHTML = currentCast[i].trackRecord[k];
                if (placement.innerHTML == "WIN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: royalblue; color: white;");
                }
                else if (placement.innerHTML == "TOP2" || placement.innerHTML == "TOP5") {
                    placement.setAttribute("style", "background-color: deepskyblue;");
                }
                else if (placement.innerHTML == "TOP3" || placement.innerHTML == "TOP4") {
                    placement.setAttribute("style", "background-color: #33cde8;");
                }
                else if (placement.innerHTML == "TOP5" || placement.innerHTML == "TOP6" || placement.innerHTML == "TOP7" || placement.innerHTML == "TOP8" || placement.innerHTML == "TOP9" || placement.innerHTML == "TOP10" || placement.innerHTML == "TOP11") {
                    placement.setAttribute("style", "background-color: cyan;");
                }
                else if (placement.innerHTML == "LOW") {
                    placement.setAttribute("style", "background-color: pink;");
                }
                else if (placement.innerHTML == "HIGH" || placement.innerHTML == "HIGH<br>TEAM") {
                    placement.setAttribute("style", "background-color: lightblue;");
                }
                else if (placement.innerHTML == "SAVED") {
                    placement.setAttribute("style", "background-color: lightsalmon;");
                }
                else if (placement.innerHTML == "CHOC") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700;");
                }
                else if (placement.innerHTML == "CHOC ") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #5552d9;");
                    }
                else if (placement.innerHTML == "CHOC  ") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: darkgreen;");
                    }
                else if (placement.innerHTML == "CHOC   ") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #b5480d;");
                    }
                else if (placement.innerHTML == "KEPT") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #96b1ff;");
                    }
                else if (placement.innerHTML == " KEPT ") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #f9b8ff;");
                    }
                else if (placement.innerHTML == "STOLEN") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #f79102;");
                    }
                else if (placement.innerHTML == "STOLEN ") {
                        placement.setAttribute("style", "font-weight: bold; background-color: #f79102; color: purple;");
                    }
                else if (placement.innerHTML == "BTM2" || placement.innerHTML == "BTM3" || placement.innerHTML == "BTM4" || placement.innerHTML == "BTM5" || placement.innerHTML == "BTM" || placement.innerHTML == "BTM6" || placement.innerHTML == "BTM7" || placement.innerHTML == "BTM8" || placement.innerHTML == "BTM9" || placement.innerHTML == "BTM10" || placement.innerHTML == "BTM11" || placement.innerHTML == "BTM12" || placement.innerHTML == "BTM13" || placement.innerHTML == "BTM14" || placement.innerHTML == "BTM15" || placement.innerHTML == "BTM16" || placement.innerHTML == "BTM17" || placement.innerHTML == "BTM18" || placement.innerHTML == "BTM19" || placement.innerHTML == "BTM20" || placement.innerHTML == "BTM21") {
                    placement.setAttribute("style", "background-color: tomato;");
                }
                else if (placement.innerHTML == " BTM3 " || placement.innerHTML == " BTM4 " || placement.innerHTML == " BTM5 " || placement.innerHTML == " BTM6 ") {
                    placement.setAttribute("style", "background-color: orange;");
                }
                else if (placement.innerHTML == "  BTM3  " || placement.innerHTML == "  BTM4  " || placement.innerHTML == "  BTM5  " || placement.innerHTML == "  BTM6  ") {
                    placement.setAttribute("style", "background-color: orange; color: blue;");
                }
                else if (placement.innerHTML == "BTM2 " || placement.innerHTML == "BTM6 " || placement.innerHTML == "BTM5 " || placement.innerHTML == "BTM4 " || placement.innerHTML == "BTM ") {
                    placement.setAttribute("style", "background-color: tomato; color: cyan;");
                }
                else if (placement.innerHTML == "BTM2  ") {
                    placement.setAttribute("style", "background-color: tomato; color: #90EE90;");
                }
                else if (placement.innerHTML == "BTM2   ") {
                    placement.setAttribute("style", "background-color: tomato; color: yellow;");
                }
                else if (placement.innerHTML == "ELIM <br> + <br> IN") {
                    placement.setAttribute("style", "background-color: hotpink; font-weight: bold;");
                }
                else if (placement.innerHTML == "ELIM <br> + <br> OUT") {
                    placement.setAttribute("style", "background-color: red; font-weight: bold;");
                }
                else if (placement.innerHTML == "ELIM") {
                    placement.setAttribute("style", "font-weight: bold; background-color: red;");
                }
                else if (placement.innerHTML == "  ELIM  ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: red; text-decoration: underline;");
                }
                else if (placement.innerHTML == "ELIM ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: red; color: cyan;");
                }
                else if (placement.innerHTML == "ELIM  ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: red; color: #90EE90;");
                }
                else if (placement.innerHTML == "ELIM   ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: red; color: yellow;");
                }
                else if (placement.innerHTML == "WINNER") {
                    placement.setAttribute("style", "font-weight: bold; background-color: yellow;");
                }
                else if (placement.innerHTML == "WINNER  ") {
                    placement.setAttribute("style", "font-weight: bold; text-decoration: underline; background-color: yellow;");
                }
                else if (placement.innerHTML == "SHARED WIN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FDFD96;");
                }
                else if (placement.innerHTML == "RUNNER UP") {
                    placement.setAttribute("style", "font-weight: bold; background-color: silver;");
                }
                else if (placement.innerHTML == "RUNNER UP  ") {
                    placement.setAttribute("style", "font-weight: bold; text-decoration: underline; background-color: silver;");

                }
                else if (placement.innerHTML == "ELIMINATED") {
                    placement.setAttribute("style", "font-weight: bold; background-color: sienna;");
                }
                else if (placement.innerHTML == "ELIMINATED  ") {
                    placement.setAttribute("style", "font-weight: bold; text-decoration: underline; background-color: sienna;");
                }
                else if (placement.innerHTML == "LOST 1ST ROUND") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FF7C00;");
                }
                else if (placement.innerHTML == "LOST 2ND ROUND") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFAE00;");
                }
                else if (placement.innerHTML == "") {
                    placement.setAttribute("style", "background-color: gray");
                }
                else if (placement.innerHTML == "WIN ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: cyan;");
                }
                else if (placement.innerHTML == "SAFE" || placement.innerHTML == "FAIR") {
                    placement.setAttribute("style", "background-color: white;");
                }
                else if (placement.innerHTML == "SAFE " || placement.innerHTML == "STAY") {
                        placement.setAttribute("style", "background-color: palegreen; color:#000;");
                }
                else if (placement.innerHTML == " STAY ") {
                        placement.setAttribute("style", "background-color: #5abf5a; color:#000;");
                }
                 else if (placement.innerHTML == " STAY") {
                        placement.setAttribute("style", "background-color: #6be36b; color:#000;");
                }
                else if (placement.innerHTML == "STAY ") {
                        placement.setAttribute("style", "background-color: #40ff73; color:#000;");
                }
                else if (placement.innerHTML == "STAY  ") {
                        placement.setAttribute("style", "background-color: palegreen; color:#000; text-decoration: underline;");
                }
                else if (placement.innerHTML == " SAFE ") {
                        placement.setAttribute("style", "background-color: #7D1935; color:#000;");
                }
                else if (placement.innerHTML == "RUN") {
                        placement.setAttribute("style", "background-color: magenta; color:white;");
                }
                else if (placement.innerHTML == "SAFE  " || placement.innerHTML == "ADV") {
                        placement.setAttribute("style", "background-color: #006622; color: white; font-weight: bold;");
                }
                else if (placement.innerHTML == "ADV  ") {
                        placement.setAttribute("style", "background-color: #006622; color: white; text-decoration: underline; font-weight: bold;");

                }
                else if (placement.innerHTML == "OUT ") {
                        placement.setAttribute("style", "background-color: purple; color:white;");
                }
                else if (placement.innerHTML == " WIN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: darkblue; color: white;");
                }
                else if (placement.innerHTML == "DISQ" || placement.innerHTML == "INJ" || placement.innerHTML == "QUIT") {
                    placement.setAttribute("style", "font-weight: bold; background-color: black; color: white;");
                }
                    else if (placement.innerHTML == "MISS C") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #ac294f; color: white");
                }
                else if (placement.innerHTML == "GUEST") {
                    placement.setAttribute("style", "background-color: #c9305c; color: white");
                }
                else if (placement.innerHTML == "DEPT") {
                    placement.setAttribute("style", "font-weight: bold; background-color: plum;");
                }
                else if (placement.innerHTML == "WIN+QUIT") {
                    placement.setAttribute("style", "font-weight: bold; background-color:#5920d4;");
                }
                else if (placement.innerHTML == "RTRN" || placement.innerHTML == "IN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: magenta;");
                }
                else if (placement.innerHTML == "RTRN " || placement.innerHTML == "LOST") {
                    placement.setAttribute("style", "font-weight: bold; background-color: orange;");
                }
                else if (placement.innerHTML == " WIN ") {
                    placement.setAttribute("style", "background-color: black; color: white");
                }
                else if (placement.innerHTML == "LOSS") {
                    placement.setAttribute("style", "background-color: #4B4848; color: white;");
                }
                else if (placement.innerHTML == "undefined") {
                    placement.setAttribute("style", "font-weight: bold; background-color: lightgray;");
                    placement.innerHTML = (currentCast[i].ppe / (currentCast[i].episodesOn)).toFixed(2);
                }
                contestant.appendChild(placement);
            }
            let earnings = document.createElement("td");
            earnings.setAttribute("style", "font-weight: bold; background-color: lightgray;");
            earnings.innerHTML += "$";
            earnings.innerHTML += currentCast[i].coinz;
            earnings.innerHTML += "K";
            contestant.appendChild(earnings);
            trackRecords.appendChild(contestant);
        }
    }
    for (let i = 0; i < firstHalfRemain.length; i++) {
        let contestant = document.createElement("tr");
        let name = document.createElement("td");
        name.setAttribute("style", "font-weight: bold;");
        name.innerHTML = firstHalfRemain[i].getName();
        name.setAttribute("style", "background-color: #f5ebf5; font-weight: bold; height: 50px;");
        contestant.appendChild(name);
        let photo = document.createElement("td");
        photo.setAttribute("style", "background: url("+ firstHalfRemain[i].image +"); background-size: 75px 75px; background-position: center; height: 65px;");
        contestant.appendChild(photo);
        for (let k = 0; k < firstHalfRemain[i].trackRecord.length + 1; k++) {
            let placement = document.createElement("td");
            placement.innerHTML = firstHalfRemain[i].trackRecord[k];
            if (placement.innerHTML == "WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: royalblue; color: white;");
            }
            else if (placement.innerHTML == "TOP2" || placement.innerHTML == "TOP5") {
                placement.setAttribute("style", "background-color: deepskyblue;");
            }
            else if (placement.innerHTML == "TOP3" || placement.innerHTML == "TOP4") {
                placement.setAttribute("style", "background-color: #33cde8;");
            }
            else if (placement.innerHTML == "TOP5" || placement.innerHTML == "TOP6" || placement.innerHTML == "TOP7" || placement.innerHTML == "TOP8" || placement.innerHTML == "TOP9" || placement.innerHTML == "TOP10" || placement.innerHTML == "TOP11") {
                placement.setAttribute("style", "background-color: cyan;");
            }
            else if (placement.innerHTML == "LOW") {
                placement.setAttribute("style", "background-color: pink;");
            }
            else if (placement.innerHTML == "HIGH" || placement.innerHTML == "HIGH<br>TEAM") {
                placement.setAttribute("style", "background-color: lightblue;");
            }
            else if (placement.innerHTML == "SAVED") {
                placement.setAttribute("style", "background-color: lightsalmon;");
            }
            else if (placement.innerHTML == "CHOC") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FFD700;");
                }
            else if (placement.innerHTML == "CHOC ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #5552d9;");
                }
            else if (placement.innerHTML == "CHOC  ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: darkgreen;");
                }
            else if (placement.innerHTML == "CHOC   ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #b5480d;");
                }
            else if (placement.innerHTML == "KEPT") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #96b1ff;");
                }
            else if (placement.innerHTML == " KEPT ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f9b8ff;");
                }
            else if (placement.innerHTML == "STOLEN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f79102;");
                }
            else if (placement.innerHTML == "STOLEN ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f79102; color: purple;");
                }
            else if (placement.innerHTML == "BTM2" || placement.innerHTML == "BTM3" || placement.innerHTML == "BTM4" || placement.innerHTML == "BTM5" || placement.innerHTML == "BTM" || placement.innerHTML == "BTM6" || placement.innerHTML == "BTM7" || placement.innerHTML == "BTM8" || placement.innerHTML == "BTM9" || placement.innerHTML == "BTM10" || placement.innerHTML == "BTM11" || placement.innerHTML == "BTM12" || placement.innerHTML == "BTM13" || placement.innerHTML == "BTM14" || placement.innerHTML == "BTM15" || placement.innerHTML == "BTM16" || placement.innerHTML == "BTM17" || placement.innerHTML == "BTM18" || placement.innerHTML == "BTM19" || placement.innerHTML == "BTM20" || placement.innerHTML == "BTM21") {
                placement.setAttribute("style", "background-color: tomato;");
            }
            else if (placement.innerHTML == " BTM3 " || placement.innerHTML == " BTM4 " || placement.innerHTML == " BTM5 " || placement.innerHTML == " BTM6 ") {
                placement.setAttribute("style", "background-color: orange;");
            }
            else if (placement.innerHTML == "  BTM3  " || placement.innerHTML == "  BTM4  " || placement.innerHTML == "  BTM5  " || placement.innerHTML == "  BTM6  ") {
                placement.setAttribute("style", "background-color: orange; color: blue;");
            }
            else if (placement.innerHTML == "BTM2 " || placement.innerHTML == "BTM6 " || placement.innerHTML == "BTM5 " || placement.innerHTML == "BTM4 " || placement.innerHTML == "BTM ") {
                placement.setAttribute("style", "background-color: tomato; color: cyan;");
            }
            else if (placement.innerHTML == "BTM2  ") {
                placement.setAttribute("style", "background-color: tomato; color: #90EE90;");
            }
            else if (placement.innerHTML == "BTM2   ") {
                placement.setAttribute("style", "background-color: tomato; color: yellow;");
            }
            else if (placement.innerHTML == "ELIM <br> + <br> IN") {
                placement.setAttribute("style", "background-color: hotpink; font-weight: bold;");
            }
            else if (placement.innerHTML == "ELIM <br> + <br> OUT") {
                placement.setAttribute("style", "background-color: red; font-weight: bold;");
            }
            else if (placement.innerHTML == "ELIM") {
                placement.setAttribute("style", "font-weight: bold; background-color: red;");
            }
            else if (placement.innerHTML == "  ELIM  ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; text-decoration: underline;");
            }
            else if (placement.innerHTML == "ELIM ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: cyan;");
            }
            else if (placement.innerHTML == "ELIM  ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: #90EE90;");
            }
            else if (placement.innerHTML == "ELIM   ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: yellow;");
            }
            else if (placement.innerHTML == "WINNER") {
                placement.setAttribute("style", "font-weight: bold; background-color: yellow;");
            }
            else if (placement.innerHTML == "WINNER  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: yellow;");
            }
            else if (placement.innerHTML == "SHARED WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FDFD96;");
            }
            else if (placement.innerHTML == "RUNNER UP") {
                placement.setAttribute("style", "font-weight: bold; background-color: silver;");
            }
            else if (placement.innerHTML == "RUNNER UP  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: silver;");
            }
            else if (placement.innerHTML == "ELIMINATED") {
                placement.setAttribute("style", "font-weight: bold; background-color: sienna;");
            }
            else if (placement.innerHTML == "ELIMINATED  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: sienna;");
            }
            else if (placement.innerHTML == "LOST 1ST ROUND") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FF7C00;");
            }
            else if (placement.innerHTML == "LOST 2ND ROUND") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FFAE00;");
            }
            else if (placement.innerHTML == "") {
                placement.setAttribute("style", "background-color: gray");
            }
            else if (placement.innerHTML == "WIN ") {
                placement.setAttribute("style", "font-weight: bold; background-color: cyan;");
            }
            else if (placement.innerHTML == "SAFE" || placement.innerHTML == "FAIR") {
                placement.setAttribute("style", "background-color: white;");
            }
            else if (placement.innerHTML == "SAFE " || placement.innerHTML == "STAY") {
                    placement.setAttribute("style", "background-color: palegreen; color:#000;");
            }
            else if (placement.innerHTML == " STAY ") {
                    placement.setAttribute("style", "background-color: #5abf5a; color:#000;");
            }
            else if (placement.innerHTML == " STAY") {
                    placement.setAttribute("style", "background-color: #6be36b; color:#000;");
            }
            else if (placement.innerHTML == "STAY ") {
                    placement.setAttribute("style", "background-color: #40ff73; color:#000;");
            }
            else if (placement.innerHTML == "STAY  ") {
                    placement.setAttribute("style", "background-color: palegreen; color:#000; text-decoration: underline;");
            }
            else if (placement.innerHTML == " SAFE ") {
                    placement.setAttribute("style", "background-color: #7D1935; color:#000;");
            }
            else if (placement.innerHTML == "RUN") {
                    placement.setAttribute("style", "background-color: magenta; color:white;");
            }
            else if (placement.innerHTML == "SAFE  " || placement.innerHTML == "ADV") {
                    placement.setAttribute("style", "background-color: #006622; color: white; font-weight: bold;");
            }
            else if (placement.innerHTML == "ADV  ") {
                    placement.setAttribute("style", "background-color: #006622; color: white; text-decoration: underline; font-weight: bold;");
            }
            else if (placement.innerHTML == "OUT ") {
                    placement.setAttribute("style", "background-color: purple; color:white;");
            }
            else if (placement.innerHTML == " WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: darkblue; color: white;");
            }
            else if (placement.innerHTML == "DISQ" || placement.innerHTML == "INJ" || placement.innerHTML == "QUIT") {
                placement.setAttribute("style", "font-weight: bold; background-color: black; color: white;");
            }
            else if (placement.innerHTML == "MISS C") {
                placement.setAttribute("style", "font-weight: bold; background-color: #ac294f; color: white");
            }
            else if (placement.innerHTML == "GUEST") {
                placement.setAttribute("style", "background-color: #c9305c; color: white");
            }
            else if (placement.innerHTML == "DEPT") {
                placement.setAttribute("style", "font-weight: bold; background-color: plum;");
            }
            else if (placement.innerHTML == "WIN+QUIT") {
                placement.setAttribute("style", "font-weight: bold; background-color:#5920d4;");
            }
            else if (placement.innerHTML == "RTRN" || placement.innerHTML == "IN") {
                placement.setAttribute("style", "font-weight: bold; background-color: magenta;");
            }
            else if (placement.innerHTML == "RTRN " || placement.innerHTML == "LOST") {
                placement.setAttribute("style", "font-weight: bold; background-color: orange;");
            }
            else if (placement.innerHTML == " WIN ") {
                placement.setAttribute("style", "background-color: black; color: white;");
            }
            else if (placement.innerHTML == "LOSS") {
                placement.setAttribute("style", "background-color: #4B4848; color: white;");
            }
            else if (placement.innerHTML == "undefined") {
                placement.setAttribute("style", "font-weight: bold; background-color: lightgray;");
                placement.innerHTML = (firstHalfRemain[i].ppe / (firstHalfRemain[i].episodesOn)).toFixed(2);
            }
            contestant.appendChild(placement);
        }
        let earnings = document.createElement("td");
        earnings.setAttribute("style", "font-weight: bold; background-color: lightgray;");
        earnings.innerHTML += "$";
        earnings.innerHTML += firstHalfRemain[i].coinz;
        earnings.innerHTML += "K";
        contestant.appendChild(earnings);
        trackRecords.appendChild(contestant);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        let contestant = document.createElement("tr");
        let name = document.createElement("td");
        name.setAttribute("style", "font-weight: bold;");
        name.innerHTML = eliminatedCast[i].getName();
        name.setAttribute("style", "background-color: #f5ebf5; font-weight: bold; height: 50px;");
        contestant.appendChild(name);
        let photo = document.createElement("td");
        photo.setAttribute("style", "background: url("+ eliminatedCast[i].image +"); background-size: 75px 75px; background-position: center; height: 65px;");
        contestant.appendChild(photo);
        for (let k = 0; k < eliminatedCast[i].trackRecord.length + 1; k++) {
            let placement = document.createElement("td");
            placement.innerHTML = eliminatedCast[i].trackRecord[k];
            if (placement.innerHTML == "WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: royalblue; color: white;");
            }
            else if (placement.innerHTML == "TOP2" || placement.innerHTML == "TOP5") {
                placement.setAttribute("style", "background-color: deepskyblue;");
            }
            else if (placement.innerHTML == "TOP3" || placement.innerHTML == "TOP4") {
                placement.setAttribute("style", "background-color: #33cde8;");
            }
            else if (placement.innerHTML == "TOP5" || placement.innerHTML == "TOP6" || placement.innerHTML == "TOP7" || placement.innerHTML == "TOP8" || placement.innerHTML == "TOP9" || placement.innerHTML == "TOP10" || placement.innerHTML == "TOP11") {
                placement.setAttribute("style", "background-color: cyan;");
            }
            else if (placement.innerHTML == "LOW") {
                placement.setAttribute("style", "background-color: pink;");
            }
            else if (placement.innerHTML == "HIGH" || placement.innerHTML == "HIGH<br>TEAM") {
                placement.setAttribute("style", "background-color: lightblue;");
            }
            else if (placement.innerHTML == "SAVED") {
                placement.setAttribute("style", "background-color: lightsalmon;");
            }
            else if (placement.innerHTML == "CHOC") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FFD700;");
                }
            else if (placement.innerHTML == "CHOC ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #5552d9;");
                }
            else if (placement.innerHTML == "CHOC  ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: darkgreen;");
                }
            else if (placement.innerHTML == "CHOC   ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #FFD700; color: #b5480d;");
                }
            else if (placement.innerHTML == "KEPT") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #96b1ff;");
                }
            else if (placement.innerHTML == " KEPT ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f9b8ff;");
                }
            else if (placement.innerHTML == "STOLEN") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f79102;");
                }
            else if (placement.innerHTML == "STOLEN ") {
                    placement.setAttribute("style", "font-weight: bold; background-color: #f79102; color: purple;");
                }
            else if (placement.innerHTML == "BTM2" || placement.innerHTML == "BTM3" || placement.innerHTML == "BTM4" || placement.innerHTML == "BTM5" || placement.innerHTML == "BTM" || placement.innerHTML == "BTM6" || placement.innerHTML == "BTM7" || placement.innerHTML == "BTM8" || placement.innerHTML == "BTM9" || placement.innerHTML == "BTM10" || placement.innerHTML == "BTM11" || placement.innerHTML == "BTM12" || placement.innerHTML == "BTM13" || placement.innerHTML == "BTM14" || placement.innerHTML == "BTM15" || placement.innerHTML == "BTM16" || placement.innerHTML == "BTM17" || placement.innerHTML == "BTM18" || placement.innerHTML == "BTM19" || placement.innerHTML == "BTM20" || placement.innerHTML == "BTM21") {
                placement.setAttribute("style", "background-color: tomato;");
            }
            else if (placement.innerHTML == " BTM3 " || placement.innerHTML == " BTM4 " || placement.innerHTML == " BTM5 " || placement.innerHTML == " BTM6 ") {
                placement.setAttribute("style", "background-color: orange;");
            }
            else if (placement.innerHTML == "  BTM3  " || placement.innerHTML == "  BTM4  " || placement.innerHTML == "  BTM5  " || placement.innerHTML == "  BTM6  ") {
                placement.setAttribute("style", "background-color: orange; color: blue;");
            }
            else if (placement.innerHTML == "BTM2 " || placement.innerHTML == "BTM6 " || placement.innerHTML == "BTM5 " || placement.innerHTML == "BTM4 " || placement.innerHTML == "BTM ") {
                placement.setAttribute("style", "background-color: tomato; color: cyan;");
            }
            else if (placement.innerHTML == "BTM2  ") {
                placement.setAttribute("style", "background-color: tomato; color: #90EE90;");
            }
            else if (placement.innerHTML == "BTM2   ") {
                placement.setAttribute("style", "background-color: tomato; color: yellow;");
            }
            else if (placement.innerHTML == "ELIM <br> + <br> IN") {
                placement.setAttribute("style", "background-color: hotpink; font-weight: bold;");
            }
            else if (placement.innerHTML == "ELIM <br> + <br> OUT") {
                placement.setAttribute("style", "background-color: red; font-weight: bold;");
            }
            else if (placement.innerHTML == "ELIM") {
                placement.setAttribute("style", "font-weight: bold; background-color: red;");
            }
            else if (placement.innerHTML == "  ELIM  ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; text-decoration: underline;");
            }
            else if (placement.innerHTML == "ELIM ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: cyan;");
            }
            else if (placement.innerHTML == "ELIM  ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: #90EE90;");
            }
            else if (placement.innerHTML == "ELIM   ") {
                placement.setAttribute("style", "font-weight: bold; background-color: red; color: yellow;");
            }
            else if (placement.innerHTML == "WINNER") {
                placement.setAttribute("style", "font-weight: bold; background-color: yellow;");
            }
            else if (placement.innerHTML == "WINNER  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: yellow;");
            }
            else if (placement.innerHTML == "SHARED WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FDFD96;");
            }
            else if (placement.innerHTML == "RUNNER UP") {
                placement.setAttribute("style", "font-weight: bold; background-color: silver;");
            }
            else if (placement.innerHTML == "RUNNER UP  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: silver;");
            }
            else if (placement.innerHTML == "ELIMINATED") {
                placement.setAttribute("style", "font-weight: bold; background-color: sienna;");
            }
            else if (placement.innerHTML == "ELIMINATED  ") {
                placement.setAttribute("style", "font-weight: bold; text-decoration: underline;  background-color: sienna;");
            }
            else if (placement.innerHTML == "LOST 1ST ROUND") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FF7C00;");
            }
            else if (placement.innerHTML == "LOST 2ND ROUND") {
                placement.setAttribute("style", "font-weight: bold; background-color: #FFAE00;");
            }
            else if (placement.innerHTML == "") {
                placement.setAttribute("style", "background-color: gray");
            }
            else if (placement.innerHTML == "WIN ") {
                placement.setAttribute("style", "font-weight: bold; background-color: cyan;");
            }
            else if (placement.innerHTML == "SAFE" || placement.innerHTML == "FAIR") {
                placement.setAttribute("style", "background-color: white;");
            }
            else if (placement.innerHTML == "SAFE " || placement.innerHTML == "STAY") {
                    placement.setAttribute("style", "background-color: palegreen; color:#000;");
            }
            else if (placement.innerHTML == " STAY ") {
                    placement.setAttribute("style", "background-color: #5abf5a; color:#000;");
            }
            else if (placement.innerHTML == " STAY") {
                    placement.setAttribute("style", "background-color: #6be36b; color:#000;");
            }
            else if (placement.innerHTML == "STAY ") {
                    placement.setAttribute("style", "background-color: #40ff73; color:#000;");
            }
            else if (placement.innerHTML == "STAY  ") {
                    placement.setAttribute("style", "background-color: palegreen; color:#000; text-decoration: underline;");
            }
            else if (placement.innerHTML == " SAFE ") {
                    placement.setAttribute("style", "background-color: #7D1935; color:#000;");
            }
            else if (placement.innerHTML == "RUN") {
                    placement.setAttribute("style", "background-color: magenta; color:white;");
            }
            else if (placement.innerHTML == "SAFE  " || placement.innerHTML == "ADV") {
                    placement.setAttribute("style", "background-color: #006622; color: white; font-weight: bold;");
            }
            else if (placement.innerHTML == "ADV  ") {
                    placement.setAttribute("style", "background-color: #006622; color: white; text-decoration: underline; font-weight: bold;");
            }
            else if (placement.innerHTML == "OUT ") {
                    placement.setAttribute("style", "background-color: purple; color:white;");
            }
            else if (placement.innerHTML == " WIN") {
                placement.setAttribute("style", "font-weight: bold; background-color: darkblue; color: white;");
            }
            else if (placement.innerHTML == "DISQ" || placement.innerHTML == "INJ" || placement.innerHTML == "QUIT") {
                placement.setAttribute("style", "font-weight: bold; background-color: black; color: white;");
            }
            else if (placement.innerHTML == "MISS C") {
                placement.setAttribute("style", "font-weight: bold; background-color: #ac294f; color: white");
            }
            else if (placement.innerHTML == "GUEST") {
                placement.setAttribute("style", "background-color: #c9305c; color: white");
            }
            else if (placement.innerHTML == "DEPT") {
                placement.setAttribute("style", "font-weight: bold; background-color: plum;");
            }
            else if (placement.innerHTML == "WIN+QUIT") {
                placement.setAttribute("style", "font-weight: bold; background-color:#5920d4;");
            }
            else if (placement.innerHTML == "RTRN" || placement.innerHTML == "IN") {
                placement.setAttribute("style", "font-weight: bold; background-color: magenta;");
            }
            else if (placement.innerHTML == "RTRN " || placement.innerHTML == "LOST") {
                placement.setAttribute("style", "font-weight: bold; background-color: orange;");
            }
            else if (placement.innerHTML == " WIN ") {
                placement.setAttribute("style", "background-color: black; color: white;");
            }
            else if (placement.innerHTML == "LOSS") {
                placement.setAttribute("style", "background-color: #4B4848; color: white;");
            }
            else if (placement.innerHTML == "undefined") {
                placement.setAttribute("style", "font-weight: bold; background-color: lightgray;");
                placement.innerHTML = (eliminatedCast[i].ppe / (eliminatedCast[i].episodesOn)).toFixed(2);
            }
            contestant.appendChild(placement);
        }
        let earnings = document.createElement("td");
        earnings.setAttribute("style", "font-weight: bold; background-color: lightgray;");
        earnings.innerHTML += "$";
        earnings.innerHTML += eliminatedCast[i].coinz;
        earnings.innerHTML += "K";
        contestant.appendChild(earnings);
        trackRecords.appendChild(contestant);
    }
    centering.appendChild(trackRecords);
    if (lipsync_assassin) {
        let lsas = document.createElement("tfoot");
        lsas.setAttribute("id", "ls_assassin");
        lsas.setAttribute("style", "border-color: white;");
        trackRecords.appendChild(lsas);
        let footer = document.createElement("tr");
        lsas.appendChild(footer);
        let td_i = document.createElement("td");
        td_i.innerHTML = "LIPSYNC <br> ASSASSINS";
        td_i.setAttribute('colSpan', '2');
        td_i.setAttribute("style", "background-color: black; font-weight: bold; color: white;");
        footer.appendChild(td_i);
        for (let i = 0; i < episodeChallenges.length; i++) {
        let lsaQueens = document.createElement("td");
        if (lsaQueen[i] == " " || lsaQueen[i] == "") {
            lsaQueens.setAttribute("style", "background-color: black;");
        }
        else {
            lsaQueens.setAttribute("style", "background: url("+ lsaQueen[i].image +"); background-size: 75px 75px; background-position: center; height: 50px;");
        }
        footer.appendChild(lsaQueens);
        let winner = document.createElement("tr");
        let name = document.createElement("td");
        name.setAttribute("style", "background-color: #f5ebf5; font-weight: bold; height: 50px;");
        }
        let td_ii = document.createElement("td");
        td_ii.setAttribute("style", "background-color: black;");
        footer.appendChild(td_ii);
        let td_iii = document.createElement("td");
        td_iii.setAttribute("style", "background-color: black;");
        footer.appendChild(td_iii);
        }
    centering.appendChild(trackRecords);
    let brA = document.createElement("br");
    centering.appendChild(brA);
    let miniCharts = document.createElement("table");
    if (totalCastSize >= 12 && totalCastSize < 15)
        miniCharts.setAttribute("style", "font-size: 90%;");
    if (totalCastSize >= 15)
        miniCharts.setAttribute("style", "font-size: 100%");
    let minisHeader = document.createElement("tr");
    trackRecords.appendChild(minisHeader);
    let miniHeads = document.createElement("tr");
    miniCharts.appendChild(miniHeads);
    let mHead = document.createElement("th");
    mHead.innerHTML = "MINI-CHALLENGES";
    mHead.setAttribute('colSpan', '2');
    mHead.setAttribute("style", "background-color: #e9dfe9; font-weight: bold;");
    miniHeads.appendChild(mHead);
    let mheadera = document.createElement("tr");
    miniCharts.appendChild(mheadera);
    let mha = document.createElement("th");
    mha.innerHTML = "Challenge Type";
    mha.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 300px;");
    mheadera.appendChild(mha);
    let mha2 = document.createElement("th");
    mha2.innerHTML = "Winner";
    mha2.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 300px;");
    mheadera.appendChild(mha2);
    for (let i = 0; i < miniChallenges.length; i++) {
        let mChallenge = document.createElement("tr");
        let minCh = document.createElement("td");
        let minWin = document.createElement("td");
        minCh.setAttribute("style", "background-color: #f5ebf5; font-style: italic;");
        minWin.setAttribute("style", "background-color: #f5ebf5; font-weight: bold;");
        minCh.innerHTML = miniChallenges[i];
        minWin.innerHTML = miniChallenges[i+1];
        i++;
        if (minWin.innerHTML == " "){
            minWin.setAttribute("style", "background-color: gray;");
        }
        mChallenge.appendChild(minCh);
        mChallenge.appendChild(minWin);
        miniCharts.appendChild(mChallenge);
    }
    centering.appendChild(miniCharts);
    if (smackdownCharts == true) {
        let br1 = document.createElement("br");
        centering.appendChild(br1);
        let smackCharts = document.createElement("table");
        if (totalCastSize >= 12 && totalCastSize < 15)
            smackCharts.setAttribute("style", "font-size: 85%;");
        if (totalCastSize >= 15)
            smackCharts.setAttribute("style", "font-size: 75%");
        let smackHeader = document.createElement("tr");
        trackRecords.appendChild(smackHeader);
        var heading = document.createElement("tr");
        smackCharts.appendChild(heading);
        var tHead = document.createElement("th");
        tHead.innerHTML = "SMACKDOWN";
        tHead.setAttribute('colSpan', '2');
        tHead.setAttribute("style", "background-color: #e9dfe9; font-weight: bold;");
        heading.appendChild(tHead);
        var headera = document.createElement("tr");
        smackCharts.appendChild(headera);
        var tha = document.createElement("th");
        tha.innerHTML = "Winner";
        tha.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 200px;");
        headera.appendChild(tha);
        var tha2 = document.createElement("th");
        tha2.innerHTML = "Loser";
        tha2.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 200px;");
        headera.appendChild(tha2);
        for (var i = 0; i < smackdownRounds.length; i++) {
            var contestanta = document.createElement("tr");
            var namea = document.createElement("td");
            var namea1 = document.createElement("td");
            namea.setAttribute("style", "background-color: #f5ebf5; font-weight: bold;");
            namea1.setAttribute("style", "background-color: #f5ebf5;");
            namea.innerHTML = smackdownRounds[i];
            namea1.innerHTML = smackdownRounds[i+1];
            i++;
            if (namea1.innerHTML == " "){
                namea1.setAttribute("style", "background-color: gray;");
            }
            contestanta.appendChild(namea);
            contestanta.appendChild(namea1);
            smackCharts.appendChild(contestanta);

        }
        centering.appendChild(smackCharts);
        }
    if (lipsync_assassin || all_stars) {
        let br = document.createElement("br");
        centering.appendChild(br);
        var lipassa = document.createElement("table");
        if (totalCastSize >= 12 && totalCastSize < 15)
            lipassa.setAttribute("style", "font-size: 85%;");
        if (totalCastSize >= 15)
            lipassa.setAttribute("style", "font-size: 75%");
        var heading = document.createElement("tr");
        lipassa.appendChild(heading);
        var tHead = document.createElement("th");
        tHead.innerHTML = "LIPSTICK CHOICES";
        tHead.setAttribute('colSpan', '4');
        tHead.setAttribute("style", "background-color: #e9dfe9; font-weight: bold;");
        heading.appendChild(tHead);
        var headera = document.createElement("tr");
        lipassa.appendChild(headera);
        var tha = document.createElement("th");
        tha.innerHTML = "Winner";
        tha.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 170px;");
        headera.appendChild(tha);
        var tha1 = document.createElement("th");
        tha1.innerHTML = "Lipstick";
        tha1.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 170px;");
        headera.appendChild(tha1);
        var tha2 = document.createElement("th");
        tha2.innerHTML = "Loser";
        tha2.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 170px;");
        headera.appendChild(tha2);
        var tha3 = document.createElement("th");
        tha3.innerHTML = "Lipstick";
        tha3.setAttribute("style", "background-color: #e9dfe9; font-weight: bold; width: 170px;");
        headera.appendChild(tha3);
        for (var i = 0; i < assasintable.length; i++) {
            var contestanta = document.createElement("tr");
            var namea = document.createElement("td");
            var namea1 = document.createElement("td");
            var lipstickk = document.createElement("td");
            var lipstickkk = document.createElement("td");
            namea.setAttribute("style", "background-color: #f5ebf5; font-weight: bold;");
            namea1.setAttribute("style", "background-color: #f5ebf5;");
            lipstickk.setAttribute("style", "background-color: #f5ebf5; font-weight: bold;");
            lipstickkk.setAttribute("style", "background-color: #f5ebf5;");
            namea.innerHTML = assasintable[i];
            lipstickk.innerHTML = assasinlipstick[i];
            namea1.innerHTML = assasintable[i+1];
            lipstickkk.innerHTML = assasinlipstick[i+1];
            i++;
            if (namea1.innerHTML == " "){
                namea1.setAttribute("style", "background-color: gray;");
                lipstickkk.setAttribute("style", "background-color: gray;");
            }
            contestanta.appendChild(namea);
            contestanta.appendChild(lipstickk);
            contestanta.appendChild(namea1);
            contestanta.appendChild(lipstickkk);
            lipassa.appendChild(contestanta);

        }
        centering.appendChild(lipassa);
        }
    let br2 = document.createElement("br");
    centering.appendChild(br2);
    main.appendChild(centering);

    if (onFinale) {
        screen.createButton("Simulate again!", "reSimulate()");
        screen.createHorizontalLine();
        screen.createButton("Back to main page", "location.reload()");
        screen.createParagraph("");
        screen.createButton("Download", "downloadTR()");
    }
    else if (!onFinale) {
    if (selectOutcome == true && withdrawOut == false && splitpremiere == false && splitCastDuration == false && showgirlShowdown == false && (top4 || savequeen || top3) && currentCast.length > 5 || selectOutcome == true && withdrawOut == false && splitpremiere == false && splitCastDuration == false && showgirlShowdown == true && currentCast.length > 6 && (top4 || savequeen || top3)) {
        screen.createBigText("Select The Outcome");
        let main = document.querySelector("div#MainBlock");
        let centering = document.createElement("center");
        let select = document.createElement("select");
        select.setAttribute("id", "startOutcome");
        let basicoption = document.createElement("option");
        basicoption.innerHTML += "Continue As Usual";
        select.add(basicoption);
        let injuryoption = document.createElement("option");
        injuryoption.innerHTML += "Injured Queen";
        select.add(injuryoption);
        let quitoption = document.createElement("option");
        quitoption.innerHTML += "Queen Quits";
        select.add(quitoption);
        let disqoption = document.createElement("option");
        disqoption.innerHTML += "Disqualification";
        select.add(disqoption);
        centering.appendChild(select);
        main.appendChild(centering);
        screen.createParagraph("");
        screen.createButton("Select", "startChoose()", "chosenOutcome");
    }
    if (randomNumber(0, 500) > 475 && withdrawOut == false && twinstwist == false && comedyRuvenge == false && groupsRuvenge == false && lalaparuza == false && currentCast.length > 7 && superstars == false && splitCastPremiere == false && splitpremiere == false && episodeCount > 3 && selectOutcome == false || randomNumber(0, 500) > 475 && withdrawOut == false && currentCast.length > (totalCastSize / 2) + 1 && splitpremiere == false && episodeCount > 3 && selectOutcome == false && superstars == false && splitCastPremiere == false)
        screen.createButton("Proceed", "queenWithdraw()");
    else if (currentCast.length == 4 && superstars == true)
        screen.createButton("Proceed", "finaleLS()");
    else if (currentCast.length == 5 && (top4 || savequeen) && showgirlShowdown && final5Episode == true && forFinaleLS == false || currentCast.length == 3 && top3 && showgirlShowdown)
        screen.createButton("Proceed", "finaleShowdown()");
    else if (currentCast.length == 3 && (top4 || savequeen) && showgirlShowdown && forFinaleLS == true)
        screen.createButton("Proceed", "finaleShowGirls()");
    else if (currentCast.length == totalCastSize && team == true)
        screen.createButton("Proceed", "teamsScreen()");
    else if (currentCast.length == 5 && vstheworld == true && splitpremiere == false)
        screen.createButton("Proceed", "finalfiveVersus()");
    else if (currentCast.length == 5 && vstheworld == true && splitpremiere == true)
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 4 && vstheworld == true && splitpremiere == false)
        screen.createButton("Proceed", "finaleAS()");
    else if (currentCast.length > 4 && (selectOutcome == false || withdrawOut == true || splitpremiere == true) || currentCast.length == 5 && selectOutcome == true && showgirlShowdown == false || currentCast.length == 4 && selectOutcome == true && showgirlShowdown == false && top3 && forFinaleLS == false || currentCast.length <= 6 && showgirlShowdown == true && selectOutcome == true && (forFinaleLS == false || forFinaleLS == true && currentCast.length > 4))
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 4 && team || currentCast.length == 4 && top3 && splitpremiere == true)
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 4 && top3 && forFinaleLS == false)
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 4 && top3 && forFinaleLS == true && splitpremiere == false)
        screen.createButton("Proceed", "reunionLipsyncs()");
    else if (currentCast.length == 4 && (top4 || savequeen) && splitpremiere == false && forFinaleLS == true)
        screen.createButton("Proceed", "reunionLipsyncs()");
    else if (currentCast.length == 4 && savequeen)
        screen.createButton("Proceed", "finaleTop4()");
    else if (currentCast.length == 4 && top4 && splitpremiere == true)
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 4 && top4 && splitpremiere == false && forFinaleLS == false)
        screen.createButton("Proceed", "finaleTop4()");
    else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen) && splitpremiere == true)
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 4 && (all_stars || lipsync_assassin || throwqueen) && splitpremiere == false)
        screen.createButton("Proceed", "finaleAS()");
    else if (currentCast.length == 3 && team)
        screen.createButton("Proceed", "miniChallenge()");
    else if (currentCast.length == 2 && team)
        screen.createButton("Proceed", "finaleTeam()");
    else if (selectOutcome == false || selectOutcome == true && currentCast.length < 4)
        screen.createButton("Proceed", "finale()");
    screen.createParagraph("");
    screen.createButton("Download", "downloadTR()");
    }
    //add an empty placement on eliminated queen's track records
    if (s6Premiere && episodeCount == 3 && goldticket) {
        currentCast.unshift(eliminatedCast[0]);
        eliminatedCast[0].lastEpisode = 0;
        currentCast.unshift(eliminatedCast[1]);
        eliminatedCast[1].lastEpisode = 0;
        eliminatedCast = [];
    }
    for (let i = 0; i < eliminatedCast.length; i++)
        eliminatedCast[i].addToTrackRecord('');
}
let totalCastSize;
function randomNumber(min, max) {
    let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;
    return randomNumber;
}
function sortPerformances(cast) {
    if (ruvengeEpisode == false) {
    cast.sort((a, b) => (a.performanceScore - b.performanceScore));
    }
    else if (ruvengeEpisode == true) {
    remainingQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    ruvengeQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    }
}
//download track record:
function downloadTR() {
    let table = document.getElementById("trackRecord");
    html2canvas(table).then((canvas) => {
        let img = canvas.toDataURL("image/png");
        let a = document.createElement('a');
        a.setAttribute("href", img);
        a.setAttribute("download","TrackRecord.png");
        a.click();
        a.remove();
    });
}
//generate spaces to insert cast:
function generateSpace() {
    let castSize = document.querySelector("input#castSize").valueAsNumber;
    totalCastSize = castSize;
    let castSelection = document.querySelector("p#castSelection");
    castSelection.innerHTML = '';
    if (totalCastSize < 3)
        window.alert("Please, use at least 3 queens on your cast!");
    else if (totalCastSize > 22 && !superstars)
        window.alert("Please, use less than 22 queens in your cast!");
    else
        for (let i = 0; i < castSize; i++) {
            let select = document.createElement("select");
            select.setAttribute("class", "queenList");
            select.setAttribute("id", i.toString());
            select.setAttribute("onchange", "setImage()");
            let img = document.createElement("img");
            img.setAttribute("class", "images");
            img.setAttribute("id", "image" + i.toString());
            let p = document.createElement("p");
            p.appendChild(img);
            if (document.getElementById("onlyCustomQueens").checked == true){
                let customy = allQueens.filter(function (queen) { return queen.image == "image/queens/noimage.jpg"; });
                for (let k = 0; k < customy.length; k++) {
                    let option = document.createElement("option");
                    option.innerHTML = customy[k].getName();
                    option.value = customy[k].image;
                    select.add(option);
                }
                select.selectedIndex = randomNumber(0, customy.length - 1);
            }
            else{
                for (let k = 0; k < allQueens.length; k++) {
                    let option = document.createElement("option");
                    option.innerHTML = allQueens[k].getName();
                    option.value = allQueens[k].image;
                    select.add(option);
                }
                select.selectedIndex = randomNumber(0, allQueens.length - 1);
            }
            let br = document.createElement("br");
            castSelection.appendChild(p);
            castSelection.appendChild(select);
            castSelection.appendChild(br);
        }
    setImage();
}
function setImage() {
    let images = document.getElementsByClassName("images");
    for (let i = 0; i < images.length; i++) {
        let img = document.getElementById("image" + i.toString());
        let select = document.getElementById(i.toString());
        img.src = select.options[select.selectedIndex].value;
    }
}
let top3 = false;
let savequeen = false;
let top4 = false;
let all_stars = false;
let lipsync_assassin = false;
let throwqueen = false;
let vstheworld = false;
let superstars = false;
let team = false;
function predefCast(cast, format, premiere, returning) {
    currentCast = cast;
    totalCastSize = cast.length;
    if (format == "top3")
        top3 = true;
    else if (format == "savequeen")
        savequeen = true;
    else if (format == "top4")
        top4 = true;
    else if (format == "all-stars")
        all_stars = true;
    else if (format == "throwqueen")
        throwqueen = true;
    else if (format == "vstheworld")
        vstheworld = true;
    else if (format == "superstars")
        superstars = true;
    else if (format == "team")
        team = true;
    else if (format == "lipsync-assassin") {
        lipsync_assassin = true;
        allQueens = allQueens.filter(function (queen) { return queen.getLipSyncStat() >= 9; });
        allQueens = allQueens.filter(function (queen) { return currentCast.indexOf(queen) == -1; });
    }
    if (premiere == "s6-premiere")
        s6Premiere = true;
    else if (premiere == "s9-premiere")
        s9Premiere = true;
    else if (premiere == "pageantPremiere")
        pageantPremiere = true;
    else if (premiere == "extraPremiere")
        extraPremiere = true;
    else if (premiere == "s12-premiere")
        s12Premiere = true;
    else if (premiere == "s14-premiere")
        s14Premiere = true;
    else if (premiere == "porkelim")
        porkelimPremiere = true;
    else if (premiere == "porkchop")
        porkchopPremiere = true;
    else if (premiere == "triple-premiere")
        triplePremiere = true;
    else if (premiere == "splitCast-premiere")
        splitCastPremiere = true;
    else if (premiere == " ") {
        s6Premiere = false;
        s9Premiere = false;
        pageantPremiere = false;
        extraPremiere = false;
        s12Premiere = false;
        s14Premiere = false;
        porkelimPremiere = false;
        porkchopPremiere = false;
        triplePremiere = false;
        splitCastPremiere = false;
    }
    if (returning == " ") {
        twinstwist = false;
        comedyRuvenge = false;
        groupsRuvenge = false;
        lalaparuza = false;
        voteReturn = false;
        randomReturn = false;
        pickReturn = false;
        smackdown = false;
        lscombats = false;
        lsbattles = false;
        secretPageant = false;
        secretDanceOffs = false;
        secretSitcoms = false;
    }
    else if (returning == "twinstwist")
        twinstwist = true;
    else if (returning == "comedyRuvenge")
        comedyRuvenge = true;
    else if (returning == "groupsRuvenge")
        groupsRuvenge = true;
    else if (returning == "lalaparuza")
        lalaparuza = true;
    else if (returning == "vote")
        voteReturn = true;
    else if (returning = "random")
        randomReturn = true;
    else if (returning = "ownpick")
        pickReturn = true;
    else if (returning == "smackdown")
        smackdown = true;
    else if (returning == "lscombats")
        lscombats = true;
    else if (returning == "lsbattles")
        lsbattles = true;
    else if (returning == "secretPageant")
        secretPageant = true;
    else if (returning == "secretDanceOffs")
        secretDanceOffs = true;
    else if (returning == "secretSitcoms")
        secretSitcoms = true;
    if (document.getElementById("selectChallenge").checked == true)
        selectChallenge = true;
    if (document.getElementById("selectOutcome").checked == true)
        selectOutcome = true;
    if (document.getElementById("disableDouble").checked == true)
        noDouble = true;
    if (document.getElementById("showgirlShowdown").checked == true)
        showgirlShowdown = true;
    if (document.getElementById("forFinaleLS").checked == true)
        forFinaleLS = true;
    if (document.getElementById("GagEpisodes").checked == true)
        gagRate = true;
    if (document.getElementById("dragParty").checked == true)
        dragParty = true;
    if (document.getElementById("goldBar").checked == true) {
        goldBar = true;
        goldticket = true;
    }
    if (document.getElementById("randomChoc").checked == true) {
        goldticket = true;
        randomChoc = true;
    }
    if (document.getElementById("juryTwist").checked == true)
        juryTwist = true;
    if (document.getElementById("elimLipsync").checked == true)
        elimLipsync = true;
    if (s6Premiere || s12Premiere || s14Premiere || triplePremiere)
        doublePremiere();
    else if (porkchopPremiere || porkelimPremiere)
        porkchopLipsyncs();
    else
        newEpisode();
}
let castbyCat = [];
let pickedCast = [];
let selectedCast = false;
let selectbyCat = false;
let selectFormat = false;
let castLockedIn = false;
let krS1 = false;
let krS2 = false;
let krS3 = false;
let krS4 = false;
let krS5 = false;
let krS6 = false;
let krS7 = false;
let krS8 = false;
let krS9 = false;
let krS10 = false;
let krS11 = false;
let krS12 = false;
let krS13 = false;
let krS14 = false;
let krS15 = false;
let krS16 = false;
let krS17 = false;
let krS18 = false;
let krS19 = false;
let krS20 = false;
let krS21 = false;
let krS22 = false;
let krS23 = false;
let krS24 = false;
let krS25 = false;
let krS26 = false;
let krS27 = false;
let krS28 = false;
let krS29 = false;
let krS30 = false;
let krS31 = false;
let krS32 = false;
let krS33 = false;
let krS34 = false;
let krS35 = false;
let krS36 = false;
let krS37 = false;
let asS1 = false;
let asS2 = false;
let asS3 = false;
let asS4 = false;
let asS5 = false;
let asS6 = false;
let asS7 = false;
let asS8 = false;
let asS9 = false;
let asS10 = false;
let asS11 = false;
let asS12 = false;
let asS13 = false;
let iasS1 = false;
let ssS1 = false;
let ssS2 = false;
let pcS1 = false;
let namS1 = false;
let namS2 = false;
let namS3 = false;
let namS4 = false;
let euS1 = false;
let euS2 = false;
let euS3 = false;
let phS1 = false;
let phS2 = false;
let phS3 = false;
let ooS1 = false;
let ooS2 = false;
function lockedIn() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Pick Your Cast!");
    if (castLockedIn == false) {
    screen.createBigText("<h2> LVDR KOREA </h2>");
    screen.createButton("Season 1", "krS1choose()");
    screen.createButton("Season 2", "krS2choose()");
    screen.createButton("Season 3", "krS3choose()");
    screen.createButton("Season 4", "krS4choose()");
    screen.createButton("Season 5", "krS5choose()");
    screen.createButton("Season 6", "krS6choose()");
    screen.createButton("Season 7", "krS7choose()");
    screen.createButton("Season 8", "krS8choose()");
    screen.createButton("Season 9", "krS9choose()");
    screen.createButton("Season 10", "krS10choose()");
    screen.createParagraph("");
    screen.createButton("Season 11", "krS11choose()");
    screen.createButton("Season 12", "krS12choose()");
    screen.createButton("Season 13", "krS13choose()");
    screen.createButton("Season 14", "krS14choose()");
    screen.createButton("Season 15", "krS15choose()");
    screen.createButton("Season 16", "krS16choose()");
    screen.createButton("Season 17", "krS17choose()");
    screen.createButton("Season 18", "krS18choose()");
    screen.createButton("Season 19", "krS19choose()");
    screen.createButton("Season 20", "krS20choose()");
    screen.createParagraph("");
    screen.createButton("Season 21", "krS21choose()");
    screen.createButton("Season 22", "krS22choose()");
    screen.createButton("Season 23", "krS23choose()");
    screen.createButton("Season 24", "krS24choose()");
    screen.createButton("Season 25", "krS25choose()");
    screen.createButton("Season 26", "krS26choose()");
    screen.createButton("Season 27", "krS27choose()");
    screen.createButton("Season 28", "krS28choose()");
    screen.createButton("Season 29", "krS29choose()");
    screen.createButton("Season 30", "krS30choose()");
    screen.createParagraph("");
    screen.createButton("Season 31", "krS31choose()");
    screen.createButton("Season 32", "krS32choose()");
    screen.createButton("Season 33", "krS33choose()");
    screen.createButton("Season 34", "krS34choose()");
    screen.createButton("Season 35", "krS35choose()");
    screen.createButton("Season 36", "krS36choose()");
    screen.createButton("Season 37", "krS37choose()");
    screen.createParagraph("");
    for (let i = 0; i < krCast.length; i++) {
        krCast[i].krID = 1;
    }
    if (krS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season1[k].getName();
            option.value = us_season1[k].image;
            select.add(option);
            castbyCat.push(us_season1[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season2[k].getName();
            option.value = us_season2[k].image;
            select.add(option);
            castbyCat.push(us_season2[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS3 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season3.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season3[k].getName();
            option.value = us_season3[k].image;
            select.add(option);
            castbyCat.push(us_season3[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS3 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS4 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season4.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season4[k].getName();
            option.value = us_season4[k].image;
            select.add(option);
            castbyCat.push(us_season4[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS4 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS5 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season5.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season5[k].getName();
            option.value = us_season5[k].image;
            select.add(option);
            castbyCat.push(us_season5[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS5 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS6 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season6.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season6[k].getName();
            option.value = us_season6[k].image;
            select.add(option);
            castbyCat.push(us_season6[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS6 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS7 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season7.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season7[k].getName();
            option.value = us_season7[k].image;
            select.add(option);
            castbyCat.push(us_season7[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS7 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS8 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season8.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season8[k].getName();
            option.value = us_season8[k].image;
            select.add(option);
            castbyCat.push(us_season8[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS8 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS9 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season9.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season9[k].getName();
            option.value = us_season9[k].image;
            select.add(option);
            castbyCat.push(us_season9[k]);
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS9 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS10 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season10.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season10[k].getName();
            option.value = us_season10[k].image;
            select.add(option);
            castbyCat.push(us_season10[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS10 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS11 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season11.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season11[k].getName();
            option.value = us_season11[k].image;
            select.add(option);
            castbyCat.push(us_season11[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS11 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS12 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season12.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season12[k].getName();
            option.value = us_season12[k].image;
            select.add(option);
            castbyCat.push(us_season12[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS12 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS13 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season13.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season13[k].getName();
            option.value = us_season13[k].image;
            select.add(option);
            castbyCat.push(us_season13[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS13 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS14 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season14.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season14[k].getName();
            option.value = us_season14[k].image;
            select.add(option);
            castbyCat.push(us_season14[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS14 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS15 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season15.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season15[k].getName();
            option.value = us_season15[k].image;
            select.add(option);
            castbyCat.push(us_season15[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS15 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS16 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season16.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season16[k].getName();
            option.value = us_season16[k].image;
            select.add(option);
            castbyCat.push(us_season16[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS16 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS17 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season17.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season17[k].getName();
            option.value = us_season17[k].image;
            select.add(option);
            castbyCat.push(us_season17[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS17 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS18 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season18.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season18[k].getName();
            option.value = us_season18[k].image;
            select.add(option);
            castbyCat.push(us_season18[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS18 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS19 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season19.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season19[k].getName();
            option.value = us_season19[k].image;
            select.add(option);
            castbyCat.push(us_season19[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS19 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS20 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season20.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season20[k].getName();
            option.value = us_season20[k].image;
            select.add(option);
            castbyCat.push(us_season20[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS20 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS21 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season21.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season21[k].getName();
            option.value = us_season21[k].image;
            select.add(option);
            castbyCat.push(us_season21[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS21 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS22 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season22.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season22[k].getName();
            option.value = us_season22[k].image;
            select.add(option);
            castbyCat.push(us_season22[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS22 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS23 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season23.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season23[k].getName();
            option.value = us_season23[k].image;
            select.add(option);
            castbyCat.push(us_season23[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS23 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS24 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season24.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season24[k].getName();
            option.value = us_season24[k].image;
            select.add(option);
            castbyCat.push(us_season24[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS24 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS25 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season25.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season25[k].getName();
            option.value = us_season25[k].image;
            select.add(option);
            castbyCat.push(us_season25[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS25 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS26 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season26.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season26[k].getName();
            option.value = us_season26[k].image;
            select.add(option);
            castbyCat.push(us_season26[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS26 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS27 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season27.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season27[k].getName();
            option.value = us_season27[k].image;
            select.add(option);
            castbyCat.push(us_season27[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS27 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS28 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season28.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season28[k].getName();
            option.value = us_season28[k].image;
            select.add(option);
            castbyCat.push(us_season28[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS28 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS29 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season29.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season29[k].getName();
            option.value = us_season29[k].image;
            select.add(option);
            castbyCat.push(us_season29[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS29 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS30 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season30.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season30[k].getName();
            option.value = us_season30[k].image;
            select.add(option);
            castbyCat.push(us_season30[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS30 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS31 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season31.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season31[k].getName();
            option.value = us_season31[k].image;
            select.add(option);
            castbyCat.push(us_season31[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS31 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS32 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season32.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season32[k].getName();
            option.value = us_season32[k].image;
            select.add(option);
            castbyCat.push(us_season32[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS32 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS33 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season33.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season33[k].getName();
            option.value = us_season33[k].image;
            select.add(option);
            castbyCat.push(us_season33[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS33 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS34 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season34.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season34[k].getName();
            option.value = us_season34[k].image;
            select.add(option);
            castbyCat.push(us_season34[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS34 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS35 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season35.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season35[k].getName();
            option.value = us_season35[k].image;
            select.add(option);
            castbyCat.push(us_season35[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS35 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS36 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season36.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season36[k].getName();
            option.value = us_season36[k].image;
            select.add(option);
            castbyCat.push(us_season36[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS36 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (krS37 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < us_season37.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = us_season37[k].getName();
            option.value = us_season37[k].image;
            select.add(option);
            castbyCat.push(us_season37[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        krS37 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR ALL STARS </h2>");
    screen.createButton("Season 1", "asS1choose()");
    screen.createButton("Season 2", "asS2choose()");
    screen.createButton("Season 3", "asS3choose()");
    screen.createButton("Season 4", "asS4choose()");
    screen.createButton("Season 5", "asS5choose()");
    screen.createButton("Season 6", "asS6choose()");
    screen.createButton("Season 7", "asS7choose()");
    screen.createButton("Season 8", "asS8choose()");
    screen.createButton("Season 9", "asS9choose()");
    screen.createButton("Season 10", "asS10choose()");
    screen.createParagraph("");
    screen.createButton("Season 11", "asS11choose()");
    screen.createButton("Season 12", "asS12choose()");
    screen.createButton("Season 13", "asS13choose()");
    screen.createParagraph("");
    if (asS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_1[k].getName();
            option.value = allstars_1[k].image;
            select.add(option);
            castbyCat.push(allstars_1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_2[k].getName();
            option.value = allstars_2[k].image;
            select.add(option);
            castbyCat.push(allstars_2[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS3 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_3.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_1[k].getName();
            option.value = allstars_3[k].image;
            select.add(option);
            castbyCat.push(allstars_3[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS3 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS4 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_4.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_4[k].getName();
            option.value = allstars_4[k].image;
            select.add(option);
            castbyCat.push(allstars_4[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS4 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS5 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_5.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_5[k].getName();
            option.value = allstars_5[k].image;
            select.add(option);
            castbyCat.push(allstars_5[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS5 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS6 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_6.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_6[k].getName();
            option.value = allstars_6[k].image;
            select.add(option);
            castbyCat.push(allstars_6[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS6 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS7 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_7.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_7[k].getName();
            option.value = allstars_7[k].image;
            select.add(option);
            castbyCat.push(allstars_7[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS7 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS8 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_8.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_8[k].getName();
            option.value = allstars_8[k].image;
            select.add(option);
            castbyCat.push(allstars_8[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS8 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS9 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_9.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_9[k].getName();
            option.value = allstars_9[k].image;
            select.add(option);
            castbyCat.push(allstars_9[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS9 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS10 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_10.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_10[k].getName();
            option.value = allstars_10[k].image;
            select.add(option);
            castbyCat.push(allstars_10[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS10 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS11 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_11.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_11[k].getName();
            option.value = allstars_11[k].image;
            select.add(option);
            castbyCat.push(allstars_11[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS11 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS12 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_12.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_12[k].getName();
            option.value = allstars_12[k].image;
            select.add(option);
            castbyCat.push(allstars_12[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS12 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (asS13 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < allstars_13.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = allstars_13[k].getName();
            option.value = allstars_13[k].image;
            select.add(option);
            castbyCat.push(allstars_13[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        asS13 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR INTERNATIONAL ALL STARS </h2>");
    screen.createButton("Season 1", "iasS1choose()");
    screen.createParagraph("");
    if (iasS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < ias_season1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = ias_season1[k].getName();
            option.value = ias_season1[k].image;
            select.add(option);
            castbyCat.push(ias_season1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        iasS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR SUPERSTARS </h2>");
    screen.createButton("Season 1", "ssS1choose()");
    screen.createButton("Season 2", "ssS2choose()");
    screen.createParagraph("");
    if (ssS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < superstars_1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = superstars_1[k].getName();
            option.value = superstars_1[k].image;
            select.add(option);
            castbyCat.push(superstars_1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        ssS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (ssS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < superstars_2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = superstars_2[k].getName();
            option.value = superstars_2[k].image;
            select.add(option);
            castbyCat.push(superstars_2[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        ssS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR PORKCHOPS </h2>");
    screen.createButton("Season 1", "pcS1choose()");
    screen.createParagraph("");
    if (pcS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < porkchops_1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = porkchops_1[k].getName();
            option.value = porkchops_1[k].image;
            select.add(option);
            castbyCat.push(porkchops_1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        pcS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR NORTH AMERICA </h2>");
    screen.createButton("Season 1", "namS1choose()");
    screen.createButton("Season 2", "namS2choose()");
    screen.createButton("Season 3", "namS3choose()");
    screen.createButton("Season 4", "namS4choose()");
    screen.createParagraph("");
    for (let i = 0; i < namCast.length; i++) {
        namCast[i].namID = 1;
    }
    if (namS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < nam_season1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = nam_season1[k].getName();
            option.value = nam_season1[k].image;
            select.add(option);
            castbyCat.push(nam_season1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        namS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (namS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < nam_season2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = nam_season2[k].getName();
            option.value = nam_season2[k].image;
            select.add(option);
            castbyCat.push(nam_season2[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        namS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (namS3 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < nam_season3.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = nam_season3[k].getName();
            option.value = nam_season3[k].image;
            select.add(option);
            castbyCat.push(nam_season3[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        namS3 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (namS4 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < nam_season4.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = nam_season4[k].getName();
            option.value = nam_season4[k].image;
            select.add(option);
            castbyCat.push(nam_season4[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        namS4 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR EUROPE </h2>");
    screen.createButton("Season 1", "euS1choose()");
    screen.createButton("Season 2", "euS2choose()");
    screen.createButton("Season 3", "euS3choose()");
    screen.createParagraph("");
    for (let i = 0; i < euCast.length; i++) {
        euCast[i].euID = 1;
    }
    if (euS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < uk_season1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = uk_season1[k].getName();
            option.value = uk_season1[k].image;
            select.add(option);
            castbyCat.push(uk_season1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        euS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (euS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < uk_season2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = uk_season2[k].getName();
            option.value = uk_season2[k].image;
            select.add(option);
            castbyCat.push(uk_season2[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        euS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (euS3 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < uk_season3.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = uk_season3[k].getName();
            option.value = uk_season3[k].image;
            select.add(option);
            castbyCat.push(uk_season3[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        euS3 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR PHILIPPINES </h2>");
    screen.createButton("Season 1", "phS1choose()");
    screen.createButton("Season 2", "phS2choose()");
    screen.createButton("Season 3", "phS3choose()");
    screen.createParagraph("");
    for (let i = 0; i < phCast.length; i++) {
        phCast[i].phID = 1;
    }
    if (phS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < can_season1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = can_season1[k].getName();
            option.value = can_season1[k].image;
            select.add(option);
            castbyCat.push(can_season1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        phS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (phS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < can_season2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = can_season2[k].getName();
            option.value = can_season2[k].image;
            select.add(option);
            castbyCat.push(can_season2[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        phS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (phS3 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < can_season3.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = can_season3[k].getName();
            option.value = can_season3[k].image;
            select.add(option);
            castbyCat.push(can_season3[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        phS3 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    screen.createHorizontalLine();
    screen.createParagraph("");
    screen.createBigText("<h2> LVDR OTHER ORIENTS </h2>");
    screen.createButton("Season 1", "ooS1choose()");
    screen.createButton("Season 2", "ooS2choose()");
    screen.createParagraph("");
    for (let i = 0; i < ooCast.length; i++) {
        ooCast[i].ooID = 1;
    }
    if (ooS1 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < hol_season1.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = hol_season1[k].getName();
            option.value = hol_season1[k].image;
            select.add(option);
            castbyCat.push(hol_season1[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        ooS1 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    else if (ooS2 == true) {
        screen.createHorizontalLine();
        let main = document.querySelector("div#MainBlock");
        let castSelection = document.createElement("p");
        castSelection.setAttribute("id", "castSelection");
        castSelection.innerHTML = '';
        let select = document.createElement("select");
        select.setAttribute("id", "queenList");
        select.setAttribute("onchange", "returnImg()");
        let img = document.createElement("img");
        img.setAttribute("id", "images");
        img.setAttribute("style", "width: 105px; height: 105px;");
        let p = document.createElement("p");
        p.appendChild(img);
        for (let k = 0; k < hol_season2.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = hol_season2[k].getName();
            option.value = hol_season2[k].image;
            select.add(option);
            castbyCat.push(hol_season2[k])
        }
        select.selectedIndex = randomNumber(0, currentCast.length - 1);
        let br = document.createElement("br");
        castSelection.appendChild(p);
        castSelection.appendChild(select);
        castSelection.appendChild(br);
        main.appendChild(castSelection);
        ooS2 = false;
        returnImg();
        screen.createButton("Add To Cast", "castPick()", "chosenCast");
        screen.createParagraph("");
    }
    if (selectedCast == true) {
        screen.createHorizontalLine();
        let krQueen = [];
        let namQueen = [];
        let euQueen = [];
        let phQueen = [];
        let ooQueen = [];
        screen.createParagraph("");
        screen.createBigText("Review Your Selected Cast");
        screen.createBold("You currently have " + pickedCast.length + " queen/s in your selection.");
        screen.createParagraph("", "franchise");
        let untuck = document.getElementById("franchise");
        for (let i = 0; i < pickedCast.length; i++) {
            if (pickedCast[i].krID == 1) {
                krQueen.push(pickedCast[i]);
            }
            if (pickedCast[i].namID == 1) {
                namQueen.push(pickedCast[i]);
            }
            if (pickedCast[i].euID == 1) {
                euQueen.push(pickedCast[i]);
            }
            if (pickedCast[i].phID == 1) {
                phQueen.push(pickedCast[i]);
            }
            if (pickedCast[i].ooID == 1) {
                ooQueen.push(pickedCast[i]);
            }
        }
        if (krQueen.length > 0) {
            franchise.innerHTML += "<i> You currently have " + krQueen.length + " queen/s from the Korean Franchise. </i>";
        }
        if (namQueen.length > 0) {
            franchise.innerHTML += " <br><i> You currently have " + namQueen.length + " queen/s from the North American Franchise. </i>"
        }
        if (euQueen.length > 0) {
            franchise.innerHTML += " <br><i> You currently have " + euQueen.length + " queen/s from the European Franchise. </i>"
        }
        if (phQueen.length > 0) {
            franchise.innerHTML += " <br><i> You currently have " + phQueen.length + " queen/s from the Philippine Franchise. </i>"
        }
        if (ooQueen.length > 0) {
            franchise.innerHTML += " <br><i> You currently have " + ooQueen.length + " queen/s from the Other Orients Franchise. </i>"
        }
        krQueen = [];
        namQueen = [];
        euQueen = [];
        phQueen = [];
        ooQueen = [];
        if (duplicateQueens(pickedCast)) {
            screen.createBold("You have a duplicate queen in your cast!");
            window.alert("Please remove the duplicate queen into your cast!");
        }
        let mainCast = document.querySelector("div#MainBlock");
        let castSelected = document.createElement("p");
        castSelected.setAttribute("id", "castSelected");
        castSelected.innerHTML = '';
        let selected = document.createElement("select");
        selected.setAttribute("id", "castList");
        selected.setAttribute("onchange", "castImg()");
        let imgCast = document.createElement("img");
        imgCast.setAttribute("id", "imagesCast");
        imgCast.setAttribute("style", "width: 105px; height: 105px;");
        let text = document.createElement("p");
        text.appendChild(imgCast);
        for (let k = 0; k < pickedCast.length; k++) {
            let option = document.createElement("option");
            option.innerHTML = pickedCast[k].getName();
            option.value = pickedCast[k].image;
            selected.add(option);
        }
        selected.selectedIndex = randomNumber(0, currentCast.length - 1);
        let spare = document.createElement("br");
        castSelected.appendChild(text);
        castSelected.appendChild(selected);
        castSelected.appendChild(spare);
        mainCast.appendChild(castSelected);
        castImg();
        screen.createButton("Remove From Cast", "castVoid()", "voidedCast");
        screen.createParagraph('');
    }
    }
    if (castLockedIn == true && currentCast.length == 0) {
    screen.createBigText("<h2> YOUR CAST IS EMPTY! </h2>")
    }
    else if (castLockedIn == true && currentCast.length > 0) {
    screen.createBigText("<h2> Your Selected Cast </h2>");
    let mainCast = document.querySelector("div#MainBlock");
    let castSelected = document.createElement("p");
    castSelected.setAttribute("id", "castSelected");
    castSelected.innerHTML = '';
    let selected = document.createElement("select");
    selected.setAttribute("id", "castList");
    selected.setAttribute("onchange", "castImg()");
    let imgCast = document.createElement("img");
    imgCast.setAttribute("id", "imagesCast");
    imgCast.setAttribute("style", "width: 105px; height: 105px;");
    let text = document.createElement("p");
    text.appendChild(imgCast);
    for (let k = 0; k < currentCast.length; k++) {
        let option = document.createElement("option");
        option.innerHTML = currentCast[k].getName();
        option.value = currentCast[k].image;
        selected.add(option);
    }
    selected.selectedIndex = randomNumber(0, currentCast.length - 1);
    let spare = document.createElement("br");
    let spare1 = document.createElement("br");
    castSelected.appendChild(text);
    castSelected.appendChild(text);
    castSelected.appendChild(selected);
    castSelected.appendChild(spare);
    castSelected.appendChild(spare1);
    mainCast.appendChild(castSelected);
    castImg();
    }
    if (selectFormat == true) {
    screen.createParagraph('');
    screen.createHorizontalLine();
    let seasonFormats = document.querySelector("div#MainBlock");
    screen.createParagraph ("Select Your Premiere:");
    let premselect = document.createElement("select");
    premselect.setAttribute("id", "premiere-format");
    let normal_premiere = document.createElement("option");
    let normalpremText = document.createElement("p");
    normalpremText.innerHTML += "Normal Premiere";
    normal_premiere.appendChild(normalpremText);
    let s6_premiere = document.createElement("option");
    s6_premiere.setAttribute("value", "s6-premiere");
    let s6premText = document.createElement("p");
    s6premText.innerHTML += "Double Premiere";
    s6_premiere.appendChild(s6premText);
    let pageant_premiere = document.createElement("option");
    pageant_premiere.setAttribute("value", "pageantPremiere");
    let pageantpremText = document.createElement("p");
    pageantpremText.innerHTML += "Pageant Premiere";
    pageant_premiere.appendChild(pageantpremText);
    let s9_premiere = document.createElement("option");
    s9_premiere.setAttribute("value", "s9-premiere");
    let s9premText = document.createElement("p");
    s9premText.innerHTML += "Pageant Premiere (Surprise Queen)";
    s9_premiere.appendChild(s9premText);
    let extra_premiere = document.createElement("option");
    extra_premiere.setAttribute("value", "extraPremiere");
    let extrapremText = document.createElement("p");
    extrapremText.innerHTML += "Pageant Premiere (Extravaganza)";
    extra_premiere.appendChild(extrapremText);
    let s12_premiere = document.createElement("option");
    s12_premiere.setAttribute("value", "s12-premiere");
    let s12premText = document.createElement("p");
    s12premText.innerHTML += "Double Premiere (No Elimination)";
    s12_premiere.appendChild(s12premText);
    let porkelim_premiere = document.createElement("option");
    porkelim_premiere.setAttribute("value", "porkelim");
    let porkelimpremText = document.createElement("p");
    porkelimpremText.innerHTML += "Porkchop Premiere";
    porkelim_premiere.appendChild(porkelimpremText);
    let porkchop_premiere = document.createElement("option");
    porkchop_premiere.setAttribute("value", "porkchop");
    let porkchoppremText = document.createElement("p");
    porkchoppremText.innerHTML += "Porkchop Premiere (No Elimination)";
    porkchop_premiere.appendChild(porkchoppremText);
    let s14_premiere = document.createElement("option");
    s14_premiere.setAttribute("value", "s14-premiere");
    let s14premText = document.createElement("p");
    s14premText.innerHTML += "Double Premiere (Fake Elimination)";
    s14_premiere.appendChild(s14premText);
    let triple_premiere = document.createElement("option");
    triple_premiere.setAttribute("value", "triple-premiere");
    let triplepremText = document.createElement("p");
    triplepremText.innerHTML += "Triple Premiere (No Elimination)";
    triple_premiere.appendChild(triplepremText);
    let splitcast_premiere = document.createElement("option");
    splitcast_premiere.setAttribute("value", "splitCast-premiere");
    let splitcastpremText = document.createElement("p");
    splitcastpremText.innerHTML += "Splitted Cast Premiere";
    splitcast_premiere.appendChild(splitcastpremText);
    premselect.appendChild(normal_premiere);
    premselect.appendChild(s6_premiere);
    premselect.appendChild(pageant_premiere);
    premselect.appendChild(s9_premiere);
    premselect.appendChild(extra_premiere);
    premselect.appendChild(s12_premiere);
    premselect.appendChild(porkelim_premiere);
    premselect.appendChild(porkchop_premiere);
    premselect.appendChild(s14_premiere);
    premselect.appendChild(triple_premiere);
    premselect.appendChild(splitcast_premiere);
    seasonFormats.appendChild(premselect);
    screen.createParagraph ("Select Your Returning Twist:");
    let twistselect = document.createElement("select");
    twistselect.setAttribute("id", "returning");
    let notwist = document.createElement("option");
    let notwisttext = document.createElement("p");
    notwisttext.innerHTML += "None";
    notwist.appendChild(notwisttext);
    twistselect.appendChild(notwist);
    let randomtwist = document.createElement("option");
    randomtwist.setAttribute("value", "random");
    let randomTtext = document.createElement("p");
    randomTtext.innerHTML += "Mystery Queen";
    randomtwist.appendChild(randomTtext);
    twistselect.appendChild(randomtwist);
    let owntwist = document.createElement("option");
    owntwist.setAttribute("value", "ownpick");
    let owntext = document.createElement("p");
    owntext.innerHTML += "Pick-A-Queen";
    owntwist.appendChild(owntext);
    twistselect.appendChild(owntwist);
    let votetwist = document.createElement("option");
    votetwist.setAttribute("value", "votes");
    let votetext = document.createElement("p");
    votetext.innerHTML += "The Queens' Choice";
    votetwist.appendChild(votetext);
    twistselect.appendChild(votetwist);
    let smackdowntwist = document.createElement("option");
    smackdowntwist.setAttribute("value", "smackdown");
    let smackdowntext = document.createElement("p");
    smackdowntext.innerHTML += "Lipsync Smackdown";
    smackdowntwist.appendChild(smackdowntext);
    twistselect.appendChild(smackdowntwist);
    let lalaparuzatwist = document.createElement("option");
    lalaparuzatwist.setAttribute("value", "lalaparuza");
    let lalaparuzatext = document.createElement("p");
    lalaparuzatext.innerHTML += "LaLaPaRUZa";
    lalaparuzatwist.appendChild(lalaparuzatext);
    twistselect.appendChild(lalaparuzatwist);
    let twintwist = document.createElement("option");
    twintwist.setAttribute("value", "twinstwist");
    let twintext = document.createElement("p");
    twintext.innerHTML += "Twins Of Fate";
    twintwist.appendChild(twintext);
    twistselect.appendChild(twintwist);
    let comedytwist = document.createElement("option");
    comedytwist.setAttribute("value", "comedyRuvenge");
    let comedytext = document.createElement("p");
    comedytext.innerHTML += "The Last Laugh";
    comedytwist.appendChild(comedytext);
    twistselect.appendChild(comedytwist);
    let groupstwist = document.createElement("option");
    groupstwist.setAttribute("value", "groupsRuvenge");
    let groupstext = document.createElement("p");
    groupstext.innerHTML += "Girl Groups Showdown";
    groupstwist.appendChild(groupstext);
    twistselect.appendChild(groupstwist);
    let combatstwist = document.createElement("option");
    combatstwist.setAttribute("value", "lscombats");
    let combatstext = document.createElement("p");
    combatstext.innerHTML += "Lipsync Combats";
    combatstwist.appendChild(combatstext);
    twistselect.appendChild(combatstwist);
    let battlestwist = document.createElement("option");
    battlestwist.setAttribute("value", "twinstwist");
    let battlestext = document.createElement("p");
    battlestext.innerHTML += "Lipsync Battles";
    battlestwist.appendChild(battlestext);
    twistselect.appendChild(battlestwist);
    let pageanttwist = document.createElement("option");
    pageanttwist.setAttribute("value", "secretPageant");
    let pageanttext = document.createElement("p");
    pageanttext.innerHTML += "Extra Secret Pageant";
    pageanttwist.appendChild(pageanttext);
    twistselect.appendChild(pageanttwist);
    let dancetwist = document.createElement("option");
    dancetwist.setAttribute("value", "secretDanceOffs");
    let dancetext = document.createElement("p");
    dancetext.innerHTML += "Extra Secret Showdowns";
    dancetwist.appendChild(dancetext);
    twistselect.appendChild(dancetwist);
    let sitcomtwist = document.createElement("option");
    sitcomtwist.setAttribute("value", "secretSitcoms");
    let sitcomtext = document.createElement("p");
    sitcomtext.innerHTML += "Extra Secret Sitcoms";
    sitcomtwist.appendChild(sitcomtext);
    twistselect.appendChild(sitcomtwist);
    seasonFormats.appendChild(twistselect);
    screen.createParagraph ("Select Your Format:");
    let finaleselect = document.createElement("select");
    finaleselect.setAttribute("id", "format");
    let top3format = document.createElement("option");
    top3format.setAttribute("value", "top3");
    let top3text = document.createElement("p");
    top3text.innerHTML += "Top 3 Format";
    top3format.appendChild(top3text);
    finaleselect.appendChild(top3format);
    let top4format = document.createElement("option");
    top4format.setAttribute("value", "top4");
    let top4Text = document.createElement("p");
    top4Text.innerHTML += "Lipsync For The Crown";
    top4format.appendChild(top4Text);
    finaleselect.appendChild(top4format);
    let savequeenformat = document.createElement("option");
    savequeenformat.setAttribute("value", "savequeen");
    let savequeenText = document.createElement("p");
    savequeenText.innerHTML += "Save A Queen";
    savequeenformat.appendChild(savequeenText);
    finaleselect.appendChild(savequeenformat);
    let teamformat = document.createElement("option");
    teamformat.setAttribute("value", "team");
    let teamText = document.createElement("p");
    teamText.innerHTML += "Teams Format";
    teamformat.appendChild(teamText);
    finaleselect.appendChild(teamformat);
    let asformat = document.createElement("option");
    asformat.setAttribute("value", "all-stars");
    let asText = document.createElement("p");
    asText.innerHTML += "Lipsync For Your Legacy";
    asformat.appendChild(asText);
    finaleselect.appendChild(asformat);
    let lsaformat = document.createElement("option");
    lsaformat.setAttribute("value", "lipsync-assassin");
    let lsaText = document.createElement("p");
    lsaText.innerHTML += "Lipsync Assassin Format";
    lsaformat.appendChild(lsaText);
    finaleselect.appendChild(lsaformat);
    let throwformat = document.createElement("option");
    throwformat.setAttribute("value", "throwqueen");
    let throwText = document.createElement("p");
    throwText.innerHTML += "Throw A Queen";
    throwformat.appendChild(throwText);
    finaleselect.appendChild(throwformat);
    let vstwformat = document.createElement("option");
    vstwformat.setAttribute("value", "vstheworld");
    let vstwText = document.createElement("p");
    vstwText.innerHTML += "Lipsync For Your Fate";
    vstwformat.appendChild(vstwText);
    finaleselect.appendChild(vstwformat);
    let ssformat = document.createElement("option");
    ssformat.setAttribute("value", "superstars");
    let ssText = document.createElement("p");
    ssText.innerHTML += "Lipsync For The Stars";
    ssformat.appendChild(ssText);
    finaleselect.appendChild(ssformat);
    seasonFormats.appendChild(finaleselect);
    screen.createParagraph('');
    let challengeselect = document.createElement("input");
    challengeselect.setAttribute("type", "checkbox");
    challengeselect.setAttribute("id", "selectChallenge");
    challengeselect.setAttribute("class", "boxcheck");
    let challengeText = document.createElement("i");
    challengeText.innerHTML += "Make challenges selectable";
    let br1 = document.createElement("br");
    seasonFormats.appendChild(challengeselect);
    seasonFormats.appendChild(challengeText);
    seasonFormats.appendChild(br1);
    let outcomeselect = document.createElement("input");
    outcomeselect.setAttribute("type", "checkbox");
    outcomeselect.setAttribute("id", "selectOutcome");
    outcomeselect.setAttribute("class", "boxcheck");
    let outcomeText = document.createElement("i");
    outcomeText.innerHTML += "Make outcomes selectable";
    let br2 = document.createElement("br");
    seasonFormats.appendChild(outcomeselect);
    seasonFormats.appendChild(outcomeText);
    seasonFormats.appendChild(br2);
    let doubleselect = document.createElement("input");
    doubleselect.setAttribute("type", "checkbox");
    doubleselect.setAttribute("id", "disableDouble");
    doubleselect.setAttribute("class", "boxcheck");
    let doubleText = document.createElement("i");
    doubleText.innerHTML += "Disable double shantays and sashays";
    let br3 = document.createElement("br");
    seasonFormats.appendChild(doubleselect);
    seasonFormats.appendChild(doubleText);
    seasonFormats.appendChild(br3);
    let showdownselect = document.createElement("input");
    showdownselect.setAttribute("type", "checkbox");
    showdownselect.setAttribute("id", "showgirlShowdown");
    showdownselect.setAttribute("class", "boxcheck");
    let showdownText = document.createElement("i");
    showdownText.innerHTML += "Enable Showgirl Showdown Finale";
    let br4 = document.createElement("br");
    seasonFormats.appendChild(showdownselect);
    seasonFormats.appendChild(showdownText);
    seasonFormats.appendChild(br4);
    let elipsyncselect = document.createElement("input");
    elipsyncselect.setAttribute("type", "checkbox");
    elipsyncselect.setAttribute("id", "elimLipsync");
    elipsyncselect.setAttribute("class", "boxcheck");
    let elipsyncText = document.createElement("i");
    elipsyncText.innerHTML += "Enable Split Premiere Porkchops Lipsync";
    let br5 = document.createElement("br");
    seasonFormats.appendChild(elipsyncselect);
    seasonFormats.appendChild(elipsyncText);
    seasonFormats.appendChild(br5);
    let forfinaleselect = document.createElement("input");
    forfinaleselect.setAttribute("type", "checkbox");
    forfinaleselect.setAttribute("id", "forFinaleLS");
    forfinaleselect.setAttribute("class", "boxcheck");
    let forfinaleText = document.createElement("i");
    forfinaleText.innerHTML += "Enable Lipsync for the Finale (for Regular Seasons Only)";
    let br6 = document.createElement("br");
    seasonFormats.appendChild(forfinaleselect);
    seasonFormats.appendChild(forfinaleText);
    seasonFormats.appendChild(br6);
    let juryselect = document.createElement("input");
    juryselect.setAttribute("type", "checkbox");
    juryselect.setAttribute("id", "juryTwist");
    juryselect.setAttribute("class", "boxcheck");
    let juryText = document.createElement("i");
    juryText.innerHTML += "Enable Jury Twist for the Finale (for All Stars Only)";
    let br7 = document.createElement("br");
    seasonFormats.appendChild(juryselect);
    seasonFormats.appendChild(juryText);
    seasonFormats.appendChild(br7);
    let gagselect = document.createElement("input");
    gagselect.setAttribute("type", "checkbox");
    gagselect.setAttribute("id", "GagEpisodes");
    gagselect.setAttribute("class", "boxcheck");
    let gagText = document.createElement("i");
    gagText.innerHTML += "Make gag-worthy episodes more probable to happen";
    let br8 = document.createElement("br");
    seasonFormats.appendChild(gagselect);
    seasonFormats.appendChild(gagText);
    seasonFormats.appendChild(br8);
    let goldbarselect = document.createElement("input");
    goldbarselect.setAttribute("type", "checkbox");
    goldbarselect.setAttribute("id", "goldBar");
    goldbarselect.setAttribute("class", "boxcheck");
    let goldbarText = document.createElement("i");
    goldbarText.innerHTML += "Choose The Golden Bar Recipient";
    let br9 = document.createElement("br");
    seasonFormats.appendChild(goldbarselect);
    seasonFormats.appendChild(goldbarText);
    seasonFormats.appendChild(br9);
    let randomselect = document.createElement("input");
    randomselect.setAttribute("type", "checkbox");
    randomselect.setAttribute("id", "randomChoc");
    randomselect.setAttribute("class", "boxcheck");
    let randomText = document.createElement("i");
    randomText.innerHTML += "Random Golden Bar Recipient";
    let br10 = document.createElement("br");
    seasonFormats.appendChild(randomselect);
    seasonFormats.appendChild(randomText);
    seasonFormats.appendChild(br10);
    let partyselect = document.createElement("input");
    partyselect.setAttribute("type", "checkbox");
    partyselect.setAttribute("id", "dragParty");
    partyselect.setAttribute("class", "boxcheck");
    let partyText = document.createElement("i");
    partyText.innerHTML += "Enable Drag Party Twist";
    let br11 = document.createElement("br");
    seasonFormats.appendChild(partyselect);
    seasonFormats.appendChild(partyText);
    seasonFormats.appendChild(br11);
    screen.createParagraph("");
    }
    screen.createHorizontalLine();
    if (selectbyCat == false) {
        screen.createParagraph("");
        screen.createButton("Enter Your Cast", "castLock()", "castIn");
        screen.createParagraph("");
    }
    else if (selectbyCat == true) {
        totalCastSize = currentCast.length;
        screen.createBold("Your cast has been successfully selected!");
        screen.createButton("Simulate Now!", "startSimulation()");
        screen.createParagraph('');
    }
    screen.createButton("Back to main page", "location.reload()");
    screen.createParagraph("");
}
function krS1choose() {
    krS1 = true;
    lockedIn();
}
function krS2choose() {
    krS2 = true;
    lockedIn();
}
function krS3choose() {
    krS3 = true;
    lockedIn();
}
function krS4choose() {
    krS4 = true;
    lockedIn();
}
function krS5choose() {
    krS5 = true;
    lockedIn();
}
function krS6choose() {
    krS6 = true;
    lockedIn();
}
function krS7choose() {
    krS7 = true;
    lockedIn();
}
function krS8choose() {
    krS8 = true;
    lockedIn();
}
function krS9choose() {
    krS9 = true;
    lockedIn();
}
function krS10choose() {
    krS10 = true;
    lockedIn();
}
function krS11choose() {
    krS11 = true;
    lockedIn();
}
function krS12choose() {
    krS12 = true;
    lockedIn();
}
function krS13choose() {
    krS13 = true;
    lockedIn();
}
function krS14choose() {
    krS14 = true;
    lockedIn();
}
function krS15choose() {
    krS15 = true;
    lockedIn();
}
function krS16choose() {
    krS16 = true;
    lockedIn();
}
function krS17choose() {
    krS17 = true;
    lockedIn();
}
function krS18choose() {
    krS18 = true;
    lockedIn();
}
function krS19choose() {
    krS19 = true;
    lockedIn();
}
function krS20choose() {
    krS20 = true;
    lockedIn();
}
function krS21choose() {
    krS21 = true;
    lockedIn();
}
function krS22choose() {
    krS22 = true;
    lockedIn();
}
function krS23choose() {
    krS23 = true;
    lockedIn();
}
function krS24choose() {
    krS24 = true;
    lockedIn();
}
function krS25choose() {
    krS25 = true;
    lockedIn();
}
function krS26choose() {
    krS26 = true;
    lockedIn();
}
function krS27choose() {
    krS27 = true;
    lockedIn();
}
function krS28choose() {
    krS28 = true;
    lockedIn();
}
function krS29choose() {
    krS29 = true;
    lockedIn();
}
function krS30choose() {
    krS30 = true;
    lockedIn();
}
function krS31choose() {
    krS31 = true;
    lockedIn();
}
function krS32choose() {
    krS32 = true;
    lockedIn();
}
function krS33choose() {
    krS33 = true;
    lockedIn();
}
function krS34choose() {
    krS34 = true;
    lockedIn();
}
function krS35choose() {
    krS35 = true;
    lockedIn();
}
function krS36choose() {
    krS36 = true;
    lockedIn();
}
function krS37choose() {
    krS37 = true;
    lockedIn();
}
function asS1choose() {
    asS1 = true;
    lockedIn();
}
function asS2choose() {
    asS2 = true;
    lockedIn();
}
function asS3choose() {
    asS3 = true;
    lockedIn();
}
function asS4choose() {
    asS4 = true;
    lockedIn();
}
function asS5choose() {
    asS5 = true;
    lockedIn();
}
function asS6choose() {
    asS6 = true;
    lockedIn();
}
function asS7choose() {
    asS7 = true;
    lockedIn();
}
function asS8choose() {
    asS8 = true;
    lockedIn();
}
function asS9choose() {
    asS9 = true;
    lockedIn();
}
function asS10choose() {
    asS10 = true;
    lockedIn();
}
function asS11choose() {
    asS11 = true;
    lockedIn();
}
function asS12choose() {
    asS12 = true;
    lockedIn();
}
function asS13choose() {
    asS13 = true;
    lockedIn();
}
function iasS1choose() {
    iasS1 = true;
    lockedIn();
}
function ssS1choose() {
    ssS1 = true;
    lockedIn();
}
function ssS2choose() {
    ssS2 = true;
    lockedIn();
}
function pcS1choose() {
    pcS1 = true;
    lockedIn();
}
function namS1choose() {
    namS1 = true;
    lockedIn();
}
function namS2choose() {
    namS2 = true;
    lockedIn();
}
function namS3choose() {
    namS3 = true;
    lockedIn();
}
function namS4choose() {
    namS4 = true;
    lockedIn();
}
function euS1choose() {
    euS1 = true;
    lockedIn();
}
function euS2choose() {
    euS2 = true;
    lockedIn();
}
function euS3choose() {
    euS3 = true;
    lockedIn();
}
function phS1choose() {
    phS1 = true;
    lockedIn();
}
function phS2choose() {
    phS2 = true;
    lockedIn();
}
function phS3choose() {
    phS3 = true;
    lockedIn();
}
function ooS1choose() {
    ooS1 = true;
    lockedIn();
}
function ooS2choose() {
    ooS2 = true;
    lockedIn();
}
function castLock() {
    let screen = new Scene();
    for (let i = 0; i < pickedCast.length; i++) {
        currentCast.push(pickedCast[i]);
    }
    pickedCast = [];
    selectbyCat = true;
    selectedCast = false;
    selectFormat = true;
    castLockedIn = true;
    lockedIn();
}
function castVoid() {
    let screen = new Scene();
    let select = document.getElementById("castList");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("chosenCast");
    let queen;
    for (let k = 0; k < pickedCast.length; k++) {
        if (value == pickedCast[k].getName()) {
            queen = pickedCast[k];
        }
    }
    screen.createBold(queen.getName() + " was removed from the cast!");
    pickedCast.splice(pickedCast.indexOf(queen), 1);
    if (pickedCast.length == 0) {
        selectedCast = false;
    }
    else {
        selectedCast = true;
    }
    lockedIn()
}
function castPick() {
    let screen = new Scene();
    let select = document.getElementById("queenList");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("voidedCast");
    let queen;
    for (let k = 0; k < castbyCat.length; k++) {
        if (value == castbyCat[k].getName()) {
            queen = castbyCat[k];
        }
    }
    screen.createBold(queen.getName() + " was added to the cast!");
    pickedCast.push(queen);
    selectedCast = true;
    lockedIn()
}
function castImg() {
    let images = document.getElementById("imagesCast");
    //let img = document.getElementById("image" + i.toString());
    let select = document.getElementById("castList");
    images.src = select.options[select.selectedIndex].value;
}
function startSimulation(challenge = "") {
    //get selected names and compare them to the all queens list:
    if (selectbyCat == false) {
    for (let i = 0; i < document.getElementsByClassName("queenList").length; i++) {
        let select = document.getElementById(i.toString());
        let value = select.options[select.selectedIndex].text;
        for (let k = 0; k < allQueens.length; k++) {
            if (value == allQueens[k].getName())
                currentCast.push(allQueens[k]);
        }
    }
    }
    else if (selectbyCat == true) {
        if (totalCastSize < 3) {
        window.alert("Please, use at least 3 queens on your cast!");
        currentCast = [];
        }
        else if (totalCastSize > 22 && !superstars) {
        window.alert("Please, use less than 22 queens in your cast!");
        currentCast = [];
        }
    }
    if (currentCast.length == 0)
        window.alert("Your cast is empty!");
    else if (duplicateQueens(currentCast))
        window.alert("Please, only use one of each queen on your cast!");
    else {
        let select = document.getElementById("format");
        let select2 = document.getElementById("premiere-format");
        let select3 = document.getElementById("returning");
        if (select.options[select.selectedIndex].value == "top3")
            top3 = true;
        else if (select.options[select.selectedIndex].value == "savequeen")
            savequeen = true;
        else if (select.options[select.selectedIndex].value == "top4")
            top4 = true;
        else if (select.options[select.selectedIndex].value == "all-stars")
            all_stars = true;
        else if (select.options[select.selectedIndex].value == "throwqueen")
            throwqueen = true;
        else if (select.options[select.selectedIndex].value == "vstheworld")
            vstheworld = true;
        else if (select.options[select.selectedIndex].value == "superstars")
            superstars = true;
        else if (select.options[select.selectedIndex].value == "team")
            team = true;
        else if (select.options[select.selectedIndex].value == "lipsync-assassin") {
            lipsync_assassin = true;
            allQueens = allQueens.filter(function (queen) { return queen.getLipSyncStat() >= 8; });
            allQueens = allQueens.filter(function (queen) { return currentCast.indexOf(queen) == -1; });
            allQueensCopy = [...allQueens];
        }
        if (select2.options[select2.selectedIndex].value == "s6-premiere")
            s6Premiere = true;
        else if (select2.options[select2.selectedIndex].value == "s9-premiere")
            s9Premiere = true;
        else if (select2.options[select2.selectedIndex].value == "pageantPremiere")
            pageantPremiere = true;
        else if (select2.options[select2.selectedIndex].value == "extraPremiere")
            extraPremiere = true;
        else if (select2.options[select2.selectedIndex].value == "s12-premiere")
            s12Premiere = true;
        else if (select2.options[select2.selectedIndex].value == "s14-premiere")
            s14Premiere = true;
        else if (select2.options[select2.selectedIndex].value == "porkelim")
            porkelimPremiere = true;
        else if (select2.options[select2.selectedIndex].value == "porkchop")
            porkchopPremiere = true;
        else if (select2.options[select2.selectedIndex].value == "triple-premiere")
            triplePremiere = true;
        else if (select2.options[select2.selectedIndex].value == "splitCast-premiere")
            splitCastPremiere = true;
        if (select3.options[select3.selectedIndex].value == "twinstwist")
            twinstwist = true;
        else if (select3.options[select3.selectedIndex].value == "comedyRuvenge")
            comedyRuvenge = true;
        else if (select3.options[select3.selectedIndex].value == "groupsRuvenge")
            groupsRuvenge = true;
        else if (select3.options[select3.selectedIndex].value == "lalaparuza")
            lalaparuza = true;
        else if (select3.options[select3.selectedIndex].value == "votes")
            voteReturn = true;
        else if (select3.options[select3.selectedIndex].value == "random")
            randomReturn = true;
        else if (select3.options[select3.selectedIndex].value == "ownpick")
            pickReturn = true;
        else if (select3.options[select3.selectedIndex].value == "rurupalooza")
            rurupalooza = true;
        else if (select3.options[select3.selectedIndex].value == "smackdown")
            smackdown = true;
        else if (select3.options[select3.selectedIndex].value == "lscombats")
            lscombats = true;
        else if (select3.options[select3.selectedIndex].value == "lsbattles")
            lsbattles = true;
        else if (select3.options[select3.selectedIndex].value == "secretPageant")
            secretPageant = true;
        else if (select3.options[select3.selectedIndex].value == "secretDanceOffs")
            secretDanceOffs = true;
        else if (select3.options[select3.selectedIndex].value == "secretSitcoms")
            secretSitcoms = true;
        if (document.getElementById("selectChallenge").checked == true)
            selectChallenge = true;
        if (document.getElementById("selectOutcome").checked == true)
            selectOutcome = true;
        if (document.getElementById("disableDouble").checked == true)
            noDouble = true;
        if (document.getElementById("showgirlShowdown").checked == true)
            showgirlShowdown = true;
        if (document.getElementById("GagEpisodes").checked == true)
            gagRate = true;
        if (document.getElementById("dragParty").checked == true)
            dragParty = true;
        if (document.getElementById("elimLipsync").checked == true)
            elimLipsync = true;
        if (document.getElementById("goldBar").checked == true) {
            goldBar = true;
            goldticket = true;
        }
        if (document.getElementById("randomChoc").checked == true) {
            goldticket = true;
            randomChoc = true;
        }
        if (document.getElementById("juryTwist").checked == true)
            juryTwist = true;
        if (document.getElementById("forFinaleLS").checked == true)
            forFinaleLS = true;
        if (currentCast.length == 3 && savequeen || currentCast.length == 3 && top4 || currentCast.length == 3 && all_stars || currentCast.length == 3 && throwqueen || currentCast.length == 3 && vstheworld) {
            window.alert("Lip-Sync For The Crown and All Star formats needs at least 4 queens!");
            savequeen = false;
            top4 = false;
            all_stars = false;
            throwqueen = false;
            vstheworld = false;
            superstars = false;
            currentCast = [];
        }
        else if (elimLipsync == true && !s6Premiere) {
            window.alert("The eliminated queens lipsync is only available for Double Premiere with Elimination!");
            elimLipsync = false;
            s12Premiere = false;
            porkchopPremiere = false;
            porkelimPremiere = false;
            pageantPremiere = false;
            extraPremiere = false;
            s9Premiere = false;
            splitCastPremiere = false;
            currentCast = [];
        }
        else if (superstars && totalCastSize > 16) {
            window.alert("Please use less than 16 queens for this format!");
            superstars = false;
            s12Premiere = false;
            triplePremiere = false;
            porkchopPremiere = false;
            pageantPremiere = false;
            extraPremiere = false;
            s9Premiere = false;
            currentCast = [];
        }
        else if (superstars && goldticket) {
            window.alert("The chocolate bar twist is not necessary for Superstars format!");
            superstars = false;
            goldticket = false;
            currentCast = [];
        }
        else if (superstars && (s14Premiere || porkelimPremiere || s6Premiere || splitCastPremiere)) {
            window.alert("Superstars Format does not support premieres with elimination!");
            superstars = false;
            s14Premiere = false;
            porkelimPremiere = false;
            s6Premiere = false;
            splitCastPremiere = false;
            currentCast = [];
        }
        else if (superstars && (randomReturn || voteReturn || ownpick || lalaparuza || smackdown || comedyRuvenge || groupsRuvenge || twinstwist || lsbattles || lscombats || secretPageant || secretDanceOffs || secretSitcoms)) {
            window.alert("Superstars Format does not support any returning twist!");
            superstars = false;
            smackdown = false;
            lalaparuza = false;
            voteReturn = false;
            randomReturn = false;
            pickReturn = false;
            ownpick = false;
            groupsRuvenge = false;
            twinstwist = false;
            comedyRuvenge = false;
            lsbattles = false;
            lscombats = false;
            secretPageant = false;
            secretDanceOffs = false;
            secretSitcoms = false;
            currentCast = [];
        }
        else if (top4 == false && savequeen == false && top3 == false && showgirlShowdown == true) {
            window.alert("Showgirl Showdown is only available for Regular Season Format!");
            team = false;
            all_stars = false;
            lipsync_assassin = false;
            throwqueen = false;
            superstars = false;
            vstheworld = false;
            showgirlShowdown = false;
            currentCast = [];
        }
        else if (dragParty == true && !s12Premiere) {
            window.alert("The Drag Party Twist is only available for Double Non-Elimination Premiere!");
            dragParty == false;
            s12Premiere = false;
            porkchopPremiere = false;
            pageantPremiere = false;
            extraPremiere = false;
            s9Premiere = false;
            s14Premiere = false;
            porkelimPremiere = false;
            triplePremiere = false;
            s6Premiere = false;
            splitCastPremiere = false;
            currentCast = [];
        }
        else if (dragParty == true && top4 == false && top3 == false && savequeen == false) {
            window.alert("The Drag Party Twist is only available for Regular Season Formats!");
            dragParty == false;
            team = false;
            all_stars = false;
            lipsync_assassin = false;
            throwqueen = false;
            superstars = false;
            vstheworld = false;
            currentCast = [];
        }
        else if (team == true && currentCast.length % 2 !== 0) {
            window.alert("The team format needs an even amout of queens!");
            currentCast = [];
            team = false;
        }
        else if (splitCastPremiere && currentCast.length % 2 !== 0) {
            window.alert("Splitted Cast Premiere needs an even amout of queens!");
            currentCast = [];
            splitCastPremiere = false;
        }
        else if (splitCastPremiere && currentCast.length < 14) {
            window.alert("Splitted Cast Premiere needs at least 14 queens!");
            currentCast = [];
            splitCastPremiere = false;
        }
        else if (splitCastPremiere && vstheworld) {
            window.alert("Splitted Cast Premiere does not support this format yet!");
            currentCast = [];
            splitCastPremiere = false;
            vstheworld = false;
        }
        else if (splitCastPremiere && (randomReturn || voteReturn || ownpick || lalaparuza || smackdown || comedyRuvenge || groupsRuvenge || twinstwist)) {
            window.alert("Splitted Cast Premiere only supports Lipsync Combats & Battles, and Secret Challenges as its returning twist!");
            splitCastPremiere = false;
            smackdown = false;
            lalaparuza = false;
            voteReturn = false;
            randomReturn = false;
            pickReturn = false;
            ownpick = false;
            groupsRuvenge = false;
            twinstwist = false;
            comedyRuvenge = false;
            currentCast = [];
        }
        else if ((lsbattles || lscombats || secretPageant || secretDanceOffs || secretSitcoms) && !splitCastPremiere) {
            window.alert("This returning twist is exclusive for the Splitted Cast Premiere!");
            lsbattles = false;
            lscombats = false;
            secretPageant = false;
            secretDanceOffs = false;
            secretSitcoms = false;
            currentCast = [];
        }
        else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || s9Premiere || pageantPremiere || extraPremiere) && currentCast.length < 10) {
            window.alert("Special Premiere formats needs at least 10 queens!");
            s6Premiere = false;
            s9Premiere = false;
            s12Premiere = false;
            s14Premiere = false;
            porkelimPremiere = false;
            porkchopPremiere = false;
            s9Premiere = false;
            pageantPremiere = false;
            extraPremiere = false;
            savequeen = false;
            top4 = false;
            top3 = false;
            lipsync_assassin = false;
            all_stars = false;
            throwqueen = false;
            vstheworld = false;
            currentCast = [];
        }
        else if (extraPremiere == true && currentCast.length < 15) {
            window.alert("Extravaganza Premiere needs at least 15 queens!");
            extraPremiere = false;
            savequeen = false;
            top4 = false;
            top3 = false;
            lipsync_assassin = false;
            all_stars = false;
            throwqueen = false;
            vstheworld = false;
            currentCast = [];
        }
        else if (triplePremiere && currentCast.length < 15) {
            window.alert("Triple Premiere format needs at least 15 queens!");
            triplePremiere = false;
            savequeen = false;
            top4 = false;
            top3 = false;
            lipsync_assassin = false;
            all_stars = false;
            throwqueen = false;
            vstheworld = false;
            currentCast = [];
        }
        else if ((twinstwist || comedyRuvenge || groupsRuvenge) && vstheworld) {
            window.alert("The ruvenge twist is not yet supported for VS The World!");
            vstheworld = false;
            twinstwist = false;
            comedyRuvenge = false;
            groupsRuvenge = false;
            currentCast = [];
        }
        else if ((twinstwist || comedyRuvenge || groupsRuvenge) && currentCast.length <= 10 && savequeen) {
            window.alert("The ruvenge twist needs at least 12 queens on Save A Queen Format");
            twinstwist = false;
            comedyRuvenge = false;
            groupsRuvenge = false;
            currentCast = [];
        }
        else if ((twinstwist || comedyRuvenge || groupsRuvenge) && currentCast.length <= 9) {
            window.alert("The ruvenge twist needs at least 10 queens");
            twinstwist = false;
            comedyRuvenge = false;
            groupsRuvenge = false;
            currentCast = [];
        }
        else if ((twinstwist || comedyRuvenge || groupsRuvenge) && (s6Premiere || porkelimPremiere)) {
            window.alert("The ruvenge twist is not supported with split premieres with elimination");
            twinstwist = false;
            comedyRuvenge = false;
            groupsRuvenge = false;
            currentCast = [];
        }
        else if (team && (goldticket || smackdown || groupsRuvenge || lalaparuza || voteReturn || randomReturn || ownpick || twinstwist || comedyRuvenge || s6Premiere || s9Premiere || pageantPremiere || extraPremiere || rurupalooza || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere || triplePremiere || splitCastPremiere)) {
            window.alert("The team format isn't supported with any special premiere or returning formats, sorry!");
            team = false;
            goldticket = false;
            smackdown = false;
            lalaparuza = false;
            voteReturn = false;
            randomReturn = false;
            pickReturn = false;
            groupsRuvenge = false;
            twinstwist = false;
            comedyRuvenge = false;
            rurupalooza = false;
            s6Premiere = false;
            s9Premiere = false;
            pageantPremiere = false;
            extraPremiere = false;
            s12Premiere = false;
            s14Premiere = false;
            porkelimPremiere = false;
            porkchopPremiere = false;
            triplePremiere = false;
            splitCastPremiere = false;
        }
        else if (forFinaleLS == true && (all_stars || throwqueen || lipsync_assassin || team || vstheworld)) {
            window.alert("The lipsync for the finale feature is only available for the Regular Season Format!");
        forFinaleLS = false;
        all_stars = false;
        savequeen = false;
        top4 = false;
        throwqueen = false;
        lipsync_assassin = false;
        team = false;
        vstheworld = false;
        currentCast = [];
        }
        else if (forFinaleLS == true && (top4 || savequeen) && showgirlShowdown == false) {
            window.alert("The lipsync for the finale feature needs to have a Showgirl Showdown Finale for this format!");
        forFinaleLS = false;
        top4 = false;
        savequeen = false;
        currentCast = [];
        }
        else if (goldBar == true && randomChoc == true) {
            window.alert("You cannot choose these boxes at the same time!");
        goldBar = false;
        randomChoc = false;
        goldticket = false;
        currentCast = [];
        }
        else if (selectOutcome == true && savequeen == false && top4 == false && top3 == false) {
            window.alert("Selectable Outcomes is only available for Regular Season Formats");
        selectOutcome = false;
        top3 = false;
        all_stars = false;
        savequeen = false;
        top4 = false;
        throwqueen = false;
        lipsync_assassin = false;
        team = false;
        vstheworld = false;
        currentCast = [];
        }
        else if (selectOutcome == true && gagRate == true) {
            window.alert("Making the episodes more probable to be Gag-Worthy would defeat the purpose of making the Outcomes Selectable!");
        selectOutcome = false;
        gagRate = false;
        currentCast = [];
        }
        else if (s6Premiere || s12Premiere || s14Premiere || triplePremiere) {
            doublePremiere();
        }
        else if (porkchopPremiere || porkelimPremiere) {
            porkchopLipsyncs();
        }
        else {
            newEpisode();
        }
    }
}
//see if there is two of the same queens:
function duplicateQueens(cast) {
    let valuesAlreadySeen = [];
    for (let i = 0; i < cast.length; i++) {
        let value = cast[i];
        if (valuesAlreadySeen.indexOf(value) !== -1) {
            currentCast = [];
            return true;
        }
        valuesAlreadySeen.push(value);
    }
    return false;
}
function shuffle(array) {
    let currentIndex = array.length, randomIndex;
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;
        // And swap it with the current element.
        [array[currentIndex], array[randomIndex]] = [
            array[randomIndex], array[currentIndex]
        ];
    }
    return array;
}
function top2Choice() {
    currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
    let sizeIdentifier = 0;
    if (currentCast.length > 10 && currentCast.length % 2 == 0) {
        sizeIdentifier += currentCast.length / 2;
    }
    else if (currentCast.length > 10 && currentCast.length % 2 == 1) {
        sizeIdentifier += (currentCast.length + 1) / 2;
    }
    else if (currentCast.length <= 10 && currentCast.length >= 6) {
        sizeIdentifier += 6;
    }
    else if (currentCast.length < 6) {
        sizeIdentifier += currentCast.length;
    }
        for (let i = 0; i < sizeIdentifier; i++) {
        topQueens.push(currentCast[i]);
        }
        for (let i = sizeIdentifier; i < currentCast.length; i++) {
            currentCast[i].addToTrackRecord("SAFE");
            currentCast[i].ppe += 3;
        }
        top2nonElimJudging();
}
function halfWayElimChoice() {
    let sizeIdentifier = 0;
    if (currentCast.length % 2 == 0) {
        sizeIdentifier += currentCast.length / 2;
    }
    else if (currentCast.length % 2 == 1) {
        sizeIdentifier += (currentCast.length + 1) / 2;
    }
    if (currentCast.length > 7) {
        //add half of the queens at the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        topQueens.push(currentCast[2]);
        if (currentCast.length > 12) {
        topQueens.push(currentCast[3]);
        }
        for (let i = sizeIdentifier; i < currentCast.length; i++) {
        bottomQueens.push(currentCast[i]);
        }
        halfWayElimJudging();
    }
    else if (currentCast.length == 7) {
        //add 3 of the queens at the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        topQueens.push(currentCast[2]);
        topQueens.push(currentCast[3]);
        for (let i = 4; i < 7; i++) {
        bottomQueens.push(currentCast[i]);
        }
        halfWayDecisions();
    }
}
function floppedChoice() {
    currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
    topQueens.push(currentCast[0]);
    for (let i = 1; i < currentCast.length; i++) {
    bottomQueens.push(currentCast[i]);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
    eliminatedCast[i].addToTrackRecord('');
    }
    survivalEpisode = true;
    if (gagRate == false) {
    halfWayEpisode = true;
    }
    floppedJudging();
}
function judging() {
    currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
    if ((s12Premiere || porkchopPremiere || porkelimPremiere) && premiereCounter <= 2 || triplePremiere && premiereCounter <= 3) {
        //add 2 queens to the top and the rest is safe
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        for (let i = 0; i < currentCast.length; i++) {
            if (topQueens.indexOf(currentCast[i]) == -1)
                currentCast[i].addToTrackRecord("SAFE");
                currentCast[i].ppe += 3;
        }
        doublePremiereJudging();
    }
    else if (superstars) {
        //add half of the queens to the top and the rest is safe
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        if (totalCastSize % 2 == 0) {
            for (let i = 0; i < currentCast.length / 2; i++) {
                topQueens.push(currentCast[i]);
            }
            for (let i = currentCast.length / 2; i < currentCast.length; i++) {
                safeQueens.push(currentCast[i]);
                currentCast[i].ppe += 3;
                currentCast[i].favoritism += 1;
                currentCast[i].addToTrackRecord("FAIR");
            }
        }
        else if (totalCastSize % 2 == 1) {
            for (let i = 0; i < (currentCast.length + 1) / 2; i++) {
                topQueens.push(currentCast[i]);
            }
            for (let i = (currentCast.length + 1) / 2; i < currentCast.length; i++) {
                safeQueens.push(currentCast[i]);
                currentCast[i].ppe += 3;
                currentCast[i].favoritism += 1;
                currentCast[i].addToTrackRecord("FAIR");
            }
        }
        superstarsJudging();
    }
    else if (splitCastPremiere == true && episodeCount == 1) {
        //split the cast based on performance
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < currentCast.length / 2; i++) {
        topQueens.push(currentCast[i]);
        }
        for (let i = currentCast.length / 2; i < currentCast.length; i++) {
        bottomQueens.push(currentCast[i]);
        }
        splitCastJudging();
    }
    else if ((top4 || savequeen || top3) && currentCast.length >= 8 && (currentCast.length <= totalCastSize - 4 && splitCastPremiere == false || splitCastDuration == false && splitCastPremiere == true) && splitpremiere == false && top2Episode == false && (gagRate == false && currentCast[currentCast.length - 1].performanceScore < 16 || gagRate == true && currentCast[currentCast.length - 1].performanceScore < 26) && selectOutcome == false || showgirlShowdown && (top4 || savequeen) && currentCast.length == 5 && final5Episode == false && forFinaleLS == false && randomNumber(0, 100) > 50) {
        //add 6 queens at the top and the rest is safe
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        topQueens.push(currentCast[2]);
        topQueens.push(currentCast[3]);
        topQueens.push(currentCast[4]);
        if (currentCast.length != 5) {
            topQueens.push(currentCast[5]);
        }
        for (let i = 0; i < currentCast.length; i++) {
            if (topQueens.indexOf(currentCast[i]) == -1)
                currentCast[i].addToTrackRecord("SAFE");
                currentCast[i].ppe += 3;
        }
        top2Episode = true;
        if (showgirlShowdown && (top4 || savequeen) && currentCast.length == 5 && final5Episode == false) {
            final5Episode = true;
        }
        top2nonElimJudging();
    }
    else if ((top4 || savequeen || top3) && currentCast.length >= 8 && splitpremiere == false && survivalEpisode == false && (gagRate == false && currentCast[0].performanceScore < 6 && currentCast[1].performanceScore > 16 || gagRate == true && currentCast[0].performanceScore < 6 && currentCast[1].performanceScore > 5) && splitCastDuration == false && selectOutcome == false) {
        //add one winner and the rest are up for elimination
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        for (let i = 1; i < currentCast.length; i++) {
        bottomQueens.push(currentCast[i]);
        }
        for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].addToTrackRecord('');
        }
        survivalEpisode = true;
        if (gagRate == false) {
        halfWayEpisode = true;
        }
        floppedJudging();
    }
    else if ((top4 || savequeen || top3) && currentCast.length % 2 !== 1 && currentCast.length >= 6 && currentCast.length <= 13 && splitpremiere == false && halfWayEpisode == false && (gagRate == false && currentCast[currentCast.length / 2].performanceScore >= 26 || gagRate == true && currentCast[currentCast.length / 2].performanceScore >= 14) && splitCastDuration == false) {
        //add half of the queens at the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        topQueens.push(currentCast[2]);
        for (let i = currentCast.length / 2; i < currentCast.length; i++) {
        bottomQueens.push(currentCast[i]);
        }
        halfWayEpisode = true;
        if (gagRate == false) {
        survivalEpisode = true;
        }
        if (currentCast.length > 6)
        halfWayElimJudging();
        else if (currentCast.length == 6)
        halfWayDecisions();
    }
    else if ((top4 || savequeen || top3) && currentCast.length == 7 && splitpremiere == false && (gagRate == false && currentCast[3].performanceScore >= 24 || gagRate == true && currentCast[3].performanceScore >= 14) && (goldticket == true || randomNumber(0, 100) >= 50) && splitCastDuration == false) {
        //add 3 of the queens at the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        topQueens.push(currentCast[2]);
        topQueens.push(currentCast[3]);
        for (let i = 4; i < 7; i++) {
        bottomQueens.push(currentCast[i]);
        }
        halfWayDecisions();
    }
    else if ((s9Premiere || pageantPremiere) && episodeCount == 1) {
        //add 5 queens to the top and the rest is safe
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        topQueens.push(currentCast[2]);
        topQueens.push(currentCast[3]);
        topQueens.push(currentCast[4]);
        for (let i = 0; i < currentCast.length; i++) {
            if (topQueens.indexOf(currentCast[i]) == -1)
                currentCast[i].addToTrackRecord("SAFE");
                currentCast[i].ppe += 3;
        }
        nonElimJudging();
    }
    else if (currentCast.length > 5 && team) {
        //add 2 teams to the top and 3 teams to the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].QueenB.episodesOn++;
            currentCast[i].QueenA.episodesOn++;
        }
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        bottomQueens.push(currentCast[currentCast.length - 1]);
        bottomQueens.push(currentCast[currentCast.length - 2]);
        bottomQueens.push(currentCast[currentCast.length - 3]);
        judgingScreen();
    }
    else if (currentCast.length == 5 && team) {
        //add 2 teams to the top and 3 teams to the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].QueenB.episodesOn++;
            currentCast[i].QueenA.episodesOn++;
        }
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        bottomQueens.push(currentCast[currentCast.length - 1]);
        bottomQueens.push(currentCast[currentCast.length - 2]);
        bottomQueens.push(currentCast[currentCast.length - 3]);
        teamWinAndBtm2();
    }
    else if (currentCast.length == 4 && team) {
        //add 2 teams to the top and 2 teams to the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].QueenB.episodesOn++;
            currentCast[i].QueenA.episodesOn++;
        }
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        bottomQueens.push(currentCast[currentCast.length - 1]);
        bottomQueens.push(currentCast[currentCast.length - 2]);
        teamWinAndBtm2();
    }
    else if (currentCast.length == 3 && team) {
        //add 1 team to the top and 2 teams to the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < currentCast.length; i++) {
            currentCast[i].QueenB.episodesOn++;
            currentCast[i].QueenA.episodesOn++;
        }
        topQueens.push(currentCast[0]);
        bottomQueens.push(currentCast[currentCast.length - 1]);
        bottomQueens.push(currentCast[currentCast.length - 2]);
        teamWinAndBtm2();
    }
    else if (vstheworld == true && currentCast.length > 7) {
        // add 4 queens at the top and 4 queens at the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < currentCast.length; i++) {
            nonImmune.push(currentCast[i]);
        }
        if (immuneQueen.length == 1) {
        nonImmune.splice(nonImmune.indexOf(immuneQueen[0]), 1);
        }
        else if (immuneQueen.length > 1) {
        nonImmune.splice(nonImmune.indexOf(immuneQueen[0]), 1);
        nonImmune.splice(nonImmune.indexOf(immuneQueen[1]), 1);
        }
        nonImmune.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 4; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = currentCast.length - 4; i < currentCast.length; i++) {
            bottomQueens.push(currentCast[i]);
        }
        let lowImmuneCounter = false;
        for (let i = 0; i < bottomQueens.length; i++) {
            if (bottomQueens[i] == immuneQueen[0] && lowImmuneCounter == false || bottomQueens[i] == immuneQueen[1] && lowImmuneCounter == false) {
                soloImmune.push(bottomQueens[i]);
                lowImmuneCounter = true;
                immuneLow = true;
            }
            else if (bottomQueens[i] == immuneQueen[0] && lowImmuneCounter == true || bottomQueens[i] == immuneQueen[1] && lowImmuneCounter == true) {
                immuneLow = false;
                doubleImmune = true;
            }
        }
        if (immuneLow == true && doubleImmune == false) {
            bottomQueens.splice(bottomQueens.indexOf(soloImmune[0]), 1);
                bottomQueens.push(nonImmune[nonImmune.length - 4]);
        }
        else if (immuneLow == false && doubleImmune == true) {
            bottomQueens.splice(bottomQueens.indexOf(immuneQueen[0]), 1);
            bottomQueens.push(nonImmune[nonImmune.length - 3]);
            bottomQueens.splice(bottomQueens.indexOf(immuneQueen[1]), 1);
            bottomQueens.push(nonImmune[nonImmune.length - 4]);
        }
        if (immuneLow == true && doubleImmune == false && currentCast.length == 8) {
            if (immuneQueen[0] == topQueens[3] || immuneQueen[1] == topQueens[3]) {
                topQueens.splice(topQueens.indexOf(topQueens[2]), 1);
            }
            else {
                topQueens.splice(topQueens.indexOf(topQueens[3]), 1);
            }
        }
        else if (immuneLow == false && doubleImmune == true && currentCast.length == 8) {
            topQueens.splice(topQueens.indexOf(topQueens[2]), 1);
            topQueens.splice(topQueens.indexOf(topQueens[3]), 1);
        }
        vstheworldJudging();
    }
    else if (vstheworld == true && currentCast.length > 6 && splitpremiere == false) {
        // add 3 win candidates at the top and the rest at the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 3; i < currentCast.length; i++) {
            if (currentCast[i] != immuneQueen[0]) {
                bottomQueens.push(currentCast[i]);
            }
            else if (currentCast[i] == immuneQueen[0]) {
                immuneQueen[0].addToTrackRecord("SAFE  ");
                immuneQueen[0].ppe += 3;
            }
        }
        winnerAndBtms();
    }
    else if (vstheworld == true && currentCast.length == 6 && splitpremiere == false || vstheworld == true && currentCast.length == 5 && splitpremiere == true || vstheworld == true && currentCast.length == 6 && splitpremiere == true || vstheworld == true && currentCast.length == 7 && splitpremiere == true) {
        //add a top 2 and the rest is in the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 2; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 2; i < currentCast.length; i++) {
            bottomQueens.push(currentCast[i]);
            if (currentCast[i] == immuneQueen[0]) {
                bottomQueens.splice(bottomQueens.indexOf(immuneQueen[0]), 1);
            immuneQueen[0].addToTrackRecord("SAFE  ");
            immuneQueen[0].ppe += 3;
            }
        }
        top2AndBtm();
    }
    else if (ruvengeEpisode == true && throwqueen && totalCastSize >= 12) {
        //add 4 pairs at the top
        remainingQueens.performanceScore -= remainingQueens.favoritism + remainingQueens.unfavoritism - remainingQueens.runwayScore;
        remainingQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        ruvengeQueens.performanceScore -= ruvengeQueens.favoritism + ruvengeQueens.unfavoritism - ruvengeQueens.runwayScore;
        ruvengeQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 4; i++) {
            topQueens.push(remainingQueens[i]);
            topQueens.push(ruvengeQueens[i]);
        }
        for (let i = 4; i < remainingQueens.length; i++) {
            fairQueens.push(remainingQueens[i]);
        }
        for (let i = 4; i < ruvengeQueens.length; i++) {
            let lostRuvenge = ruvengeQueens[i];
            outRuvenge.push(lostRuvenge);
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
        }
        judgingScreen();
    }
    else if (ruvengeEpisode == true && throwqueen && totalCastSize == 10) {
        //add 3 pairs at the top
        remainingQueens.performanceScore -= remainingQueens.favoritism + remainingQueens.unfavoritism - remainingQueens.runwayScore;
        remainingQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        ruvengeQueens.performanceScore -= ruvengeQueens.favoritism + ruvengeQueens.unfavoritism - ruvengeQueens.runwayScore;
        ruvengeQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(remainingQueens[i]);
            topQueens.push(ruvengeQueens[i]);
        }
        for (let i = 3; i < remainingQueens.length; i++) {
            fairQueens.push(remainingQueens[i]);
        }
        for (let i = 3; i < ruvengeQueens.length; i++) {
            let lostRuvenge = ruvengeQueens[i];
            outRuvenge.push(lostRuvenge);
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
        }
        judgingScreen();
    }
    else if (ruvengeEpisode == true && totalCastSize >= 12) {
        //add 3 pairs at the top and 3 remaining queens at the bottom
        remainingQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        ruvengeQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(remainingQueens[i]);
            topQueens.push(ruvengeQueens[i]);
        }
        for (let i = 3; i < ruvengeQueens.length; i++) {
            let lostRuvenge = ruvengeQueens[i];
            outRuvenge.push(lostRuvenge);
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
        }
        for (let i = remainingQueens.length - 3; i < remainingQueens.length; i++) {
            bottomQueens.push(remainingQueens[i]);
        }
        judgingScreen();
    }
    else if (ruvengeEpisode == true && totalCastSize == 10) {
        //add 3 pairs at the top and 2 remaining queens at the bottom
        remainingQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        ruvengeQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(remainingQueens[i]);
            topQueens.push(ruvengeQueens[i]);
        }
        for (let i = 3; i < ruvengeQueens.length; i++) {
            let lostRuvenge = ruvengeQueens[i];
            outRuvenge.push(lostRuvenge);
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
        }
        for (let i = remainingQueens.length - 2; i < remainingQueens.length; i++) {
            bottomQueens.push(remainingQueens[i]);
        }
        judgingScreen();
    }
    else if (currentCast.length >= 13 && throwqueen) {
        //add 5 win candidates and 1 sure bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 5; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 5; i < currentCast.length - 4; i++) {
            fairQueens.push(currentCast[i]);
        }
        for (let i = currentCast.length - 4; i < currentCast.length - 1; i++) {
            lowQueens.push(currentCast[i]);
        }
        for (let i = currentCast.length - 1; i < currentCast.length; i++) {
            bottomQueens.push(currentCast[i]);
            let trueBottom = bottomQueens[0];
        }
        judgingScreen();
    }
    else if (currentCast.length >= 8 && throwqueen) {
        //add 4 win candidates and 1 sure bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 4; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 4; i < currentCast.length - 3; i++) {
            fairQueens.push(currentCast[i]);
        }
        for (let i = currentCast.length - 3; i < currentCast.length - 1; i++) {
            lowQueens.push(currentCast[i]);
        }
        for (let i = currentCast.length - 1; i < currentCast.length; i++) {
            bottomQueens.push(currentCast[i]);
            let trueBottom = bottomQueens[0];
        }
        judgingScreen();
    }
    else if (currentCast.length >= 6 && throwqueen) {
        //add 3 win candidates and 1 sure bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 3; i < currentCast.length - 1; i++) {
            lowQueens.push(currentCast[i]);
            currentCast[i].ppe += 2;
            currentCast[i].unfavoritism += 1;
        }
        for (let i = currentCast.length - 1; i < currentCast.length; i++) {
            bottomQueens.push(currentCast[i]);
            currentCast[i].unfavoritism += 2;
            let trueBottom = bottomQueens[0];
        }
        winAndChoose();
    }
    else if (currentCast.length == 5 && throwqueen && splitpremiere == true) {
        //add 2 win candidates and 1 sure bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 2; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 2; i < currentCast.length - 1; i++) {
            lowQueens.push(currentCast[i]);
            currentCast[i].ppe += 2;
            currentCast[i].unfavoritism += 1;
        }
        for (let i = currentCast.length - 1; i < currentCast.length; i++) {
            bottomQueens.push(currentCast[i]);
            currentCast[i].unfavoritism += 2;
            let trueBottom = bottomQueens[0];
        }
        winAndChoose();
    }
    else if (currentCast.length == 5 && throwqueen) {
        //add 1 winner and the rest at the verge of elimination
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 1; i++) {
            topQueens.push(currentCast[i]);
        }
        for (let i = 1; i < currentCast.length; i++) {
            safeQueens.push(currentCast[i]);
            currentCast[i].ppe += 3;
        }
        winAndChosen();
    }
    else if (currentCast.length > 13) {
        //add 4 queens to the top and 4 queens to the bottom
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 4; i++) {
            topQueens.push(currentCast[i]);
            bottomQueens.push(currentCast[currentCast.length - (i + 1)]);
        }
        judgingScreen();
    }
    else if (currentCast.length > 6) {
        //add first 3 queens to the top and last 3 queens to the bottom:
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(currentCast[i]);
            bottomQueens.push(currentCast[currentCast.length - (i + 1)]);
        }
        judgingScreen();
    }
    else if (currentCast.length <= 6 && lipsync_assassin) {
        //add 1 queen to the top and the rest to the btm
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        for (let i = 0; i < currentCast.length; i++) {
            if (topQueens.indexOf(currentCast[i]) == -1) {
                bottomQueens.push(currentCast[i]);
            }
        }
        topAndBtm();
    }
    else if (currentCast.length == 5 && savequeen && (!smackdown || returningQueen == true) && splitCastDuration == false) {
        //add 1 queen to the top and the rest to the btm
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        for (let i = 0; i < currentCast.length; i++) {
            if (topQueens.indexOf(currentCast[i]) == -1) {
                bottomQueens.push(currentCast[i]);
            }
        }
        winAndBtm();
    }
    else if (currentCast.length == 5 && savequeen && (premiereCounter <= 2 || splitCastDuration == true)) {
        //add 1 queen to the top and the rest to the btm
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        for (let i = 0; i < currentCast.length; i++) {
            if (topQueens.indexOf(currentCast[i]) == -1) {
                bottomQueens.push(currentCast[i]);
            }
        }
        winAndBtm3();
    }
    else if (currentCast.length == 6) {
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        for (let i = 0; i < 3; i++) {
            topQueens.push(currentCast[i]);
            bottomQueens.push(currentCast[currentCast.length - (i + 1)]);
        }
        if (top3 || top4)
            winAndBtm2();
        else if (savequeen)
            winAndBtm3();
        else if (all_stars)
            top2AndBtm();
        else if (lipsync_assassin)
            topAndBtm();
    }
    else if (currentCast.length == 5) {
        //add first 2 queens to the top and last 3 queens to the bottom:
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        if (currentCast[2].performanceScore >= 6 && currentCast[2].performanceScore < 16 && !all_stars && !savequeen)
            topQueens.push(currentCast[2]);
        else
            bottomQueens.push(currentCast[2]);
        bottomQueens.push(currentCast[3]);
        bottomQueens.push(currentCast[4]);
        if (top3 || top4)
            winAndBtm2();
        else if (savequeen)
            winAndBtm3();
        else if (all_stars)
            top2AndBtm();
        else if (lipsync_assassin)
            topAndBtm();
        else if (throwqueen && splitpremiere == false)
            winAndChosen();
        else if (throwqueen && splitpremiere == true)
            winAndChoose();
    }
    else if (currentCast.length == 4) {
        //add first 2 queens to the top and last 2 queens to the bottom:
        currentCast.sort((a, b) => (a.performanceScore - b.performanceScore));
        topQueens.push(currentCast[0]);
        topQueens.push(currentCast[1]);
        bottomQueens.push(currentCast[2]);
        bottomQueens.push(currentCast[3]);
        if (top3 || top4)
            winAndBtm2();
        else if (all_stars)
            top2AndBtm();
        else if (lipsync_assassin)
            topAndBtm();
    }
}
function superstarsJudging() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Judging!");
    screen.createBold("Based on tonight's performances...");
    for (let i = 0; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image, "yellow");
    }
    screen.createBold("", "judged");
    let judged = document.getElementById("judged");
    for (let i = 0; i < topQueens.length; i++) {
        judged.innerHTML += `${topQueens[i].getName()}, `;
    }
    judged.innerHTML += "you are the queens of queens for this week's challenge.";
    screen.createHorizontalLine();
    screen.createParagraph("", "untuck");
    let untuck = document.getElementById("untuck");
    for (let i = 0; i < safeQueens.length; i++) {
        untuck.innerHTML += `${safeQueens[i].getName()}, `;
    }
    untuck.innerHTML += "great job this week. You may now untuck backstage.";
    screen.createButton("Proceed", "top2Winner()");
}
function vstheworldJudging() {
    if (currentCast.length == 8) {
        for (let i = 0; i < currentCast.length; i++) {
            safeQueens.push(currentCast[i]);
        }
        for (let i = 0; i < topQueens.length; i++) {
            safeQueens.splice(safeQueens.indexOf(topQueens[i]), 1);
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            safeQueens.splice(safeQueens.indexOf(bottomQueens[i]), 1);
        }
        if (immuneLow == true) {
            for (let i = 0; i < safeQueens.length; i++) {
                safeQueens[i].addToTrackRecord("SAFE");
                if (safeQueens[i] == soloImmune[0]) {
                    safeQueens[i].trackRecord.pop();
                    safeQueens[i].addToTrackRecord("SAFE  ");
                }
                safeQueens[i].ppe += 3;
            }
            immuneLow = false;
        }
        else if (doubleImmune == true) {
            for (let i = 0; i < safeQueens.length; i++) {
                safeQueens[i].addToTrackRecord("SAFE");
                if (safeQueens[i] == immuneQueen[0] || safeQueens[i] == immuneQueen[1]) {
                    safeQueens[i].trackRecord.pop();
                    safeQueens[i].addToTrackRecord("SAFE  ");
                }
                safeQueens[i].ppe += 3;
            }
            immuneLow = false;
        }
        else {
            for (let i = 0; i < safeQueens.length; i++) {
                safeQueens[i].addToTrackRecord("SAFE");
                safeQueens[i].ppe += 3;
            }
        }
        winnerAndBtm3();
    }
    else {
        let screen = new Scene();
        screen.clean();
        screen.createHeader("Judging!");
        screen.createBold("Based on tonight's performances...");
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "cyan");
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            screen.createImage(bottomQueens[i].image, "cyan");
        }
        screen.createBold("", "judged");
        let judged = document.getElementById("judged");
        for (let i = 0; i < topQueens.length; i++) {
            judged.innerHTML += `${topQueens[i].getName()}, `;
            judged.innerHTML += `${bottomQueens[i].getName()}, `;
        }
        judged.innerHTML += "you represent the tops and bottoms of the week.";
        screen.createHorizontalLine();
        for (let i = 0; i < currentCast.length; i++) {
            safeQueens.push(currentCast[i]);
        }
        for (let i = 0; i < topQueens.length; i++) {
            safeQueens.splice(safeQueens.indexOf(topQueens[i]), 1);
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            safeQueens.splice(safeQueens.indexOf(bottomQueens[i]), 1);
        }
        screen.createParagraph("", "untuck");
        let untuck = document.getElementById("untuck");
        for (let i = 0; i < safeQueens.length; i++) {
            untuck.innerHTML += `${safeQueens[i].getName()}, `;
        }
        untuck.innerHTML += "you are safe.";
        if (immuneLow == true) {
            screen.createParagraph(soloImmune[0].getName() + ", immunity came in real handy for you this week.");
            for (let i = 0; i < safeQueens.length; i++) {
                safeQueens[i].addToTrackRecord("SAFE");
                if (safeQueens[i] == soloImmune[0]) {
                    safeQueens[i].trackRecord.pop();
                    safeQueens[i].addToTrackRecord("SAFE  ");
                }
                safeQueens[i].ppe += 3;
            }
            immuneLow = false;
            doubleImmune = false;
        }
        else if (doubleImmune == true) {
            screen.createParagraph(immuneQueen[0].getName() + ", " + immuneQueen[1].getName() + ", immunity came in real handy for both of you this week.");
            for (let i = 0; i < safeQueens.length; i++) {
                safeQueens[i].addToTrackRecord("SAFE");
                if (safeQueens[i] == immuneQueen[0] || safeQueens[i] == immuneQueen[1]) {
                    safeQueens[i].trackRecord.pop();
                    safeQueens[i].addToTrackRecord("SAFE  ");
                }
                safeQueens[i].ppe += 3;
            }
            immuneLow = false;
            doubleImmune = false;
        }
        else {
            for (let i = 0; i < safeQueens.length; i++) {
                safeQueens[i].addToTrackRecord("SAFE");
                safeQueens[i].ppe += 3;
            }
        }
        screen.createButton("Proceed", "winnerAndBtm3()");
    }
}
function judgingScreen() {
    let judgingScreen = new Scene();
    judgingScreen.clean();
    judgingScreen.createHeader("Judging!");
    judgingScreen.createBold("Based on tonight's performances...");
    if (team == true) {
        judgingScreen.createImage(topQueens[0].QueenA.image, "cyan");
        judgingScreen.createImage(topQueens[1].QueenA.image, "cyan");
        judgingScreen.createImage(topQueens[0].QueenB.image, "cyan");
        judgingScreen.createImage(topQueens[1].QueenB.image, "cyan");
        judgingScreen.createImage(bottomQueens[0].QueenB.image, "cyan");
        judgingScreen.createImage(bottomQueens[1].QueenB.image, "cyan");
        judgingScreen.createImage(bottomQueens[2].QueenB.image, "cyan");
        judgingScreen.createImage(bottomQueens[0].QueenA.image, "cyan");
        judgingScreen.createImage(bottomQueens[1].QueenA.image, "cyan");
        judgingScreen.createImage(bottomQueens[2].QueenA.image, "cyan");
        judgingScreen.createBold(`${topQueens[0].getName()}, ${topQueens[1].getName()}, ${bottomQueens[0].getName()}, ${bottomQueens[1].getName()}, ${bottomQueens[2].getName()}, you represent the tops and bottoms of the week.`);
        judgingScreen.createHorizontalLine();
    }
    else if (ruvengeEpisode == true && throwqueen == false) {
        for (let i = 0; i < topQueens.length; i++) {
            judgingScreen.createImage(topQueens[i].image, "cyan");
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            judgingScreen.createImage(bottomQueens[i].image, "cyan");
        }
        judgingScreen.createBold("", "judged");
        let judged = document.getElementById("judged");
        for (let i = 0; i < topQueens.length; i++) {
            judged.innerHTML += `${topQueens[i].getName()}, `;
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            judged.innerHTML += `${bottomQueens[i].getName()}, `;
        }
        judged.innerHTML += "you represent the tops and bottoms of the week.";
        judgingScreen.createHorizontalLine();
    }
    else if (ruvengeEpisode == true && throwqueen == true) {
        for (let i = 0; i < topQueens.length; i++) {
            judgingScreen.createImage(topQueens[i].image, "cyan");
        }
        judgingScreen.createBold("", "judged");
        let judged = document.getElementById("judged");
        for (let i = 0; i < topQueens.length; i++) {
            judged.innerHTML += `${topQueens[i].getName()}, `;
        }
        judged.innerHTML += "you are all candidates for the win.";
        judgingScreen.createHorizontalLine();
    }
    else if (throwqueen == true && ruvengeEpisode == false) {
        for (let i = 0; i < topQueens.length; i++) {
            judgingScreen.createImage(topQueens[i].image, "cyan");
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            judgingScreen.createImage(bottomQueens[i].image, "cyan");
        }
        judgingScreen.createBold("", "judged");
        let judged = document.getElementById("judged");
        for (let i = 0; i < topQueens.length; i++) {
            judged.innerHTML += `${topQueens[i].getName()}, `;
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            judged.innerHTML += `${bottomQueens[i].getName()}, `;
        }
        judged.innerHTML += "one of you did the worst this week and the rest are candidates for the win.";
        judgingScreen.createHorizontalLine();
        judgingScreen.createParagraph("", "fairJudged");
        let fairJudged = document.getElementById("fairJudged");
        judgingScreen.createParagraph("", "lowJudged");
        let lowJudged = document.getElementById("lowJudged");
        for (let i = 0; i < fairQueens.length; i++) {
            fairJudged.innerHTML += `${fairQueens[i].getName()}, `;
            fairQueens[i].ppe += 3;
        }
        for (let i = 0; i < lowQueens.length; i++) {
            lowJudged.innerHTML += `${lowQueens[i].getName()}, `;
            lowQueens[i].ppe += 2
            lowQueens[i].unfavoritism += 1;
        }
        fairJudged.innerHTML += "you better step your pussy up.";
        lowJudged.innerHTML += "you better light a fire in your ass";
    }
    else {
        for (let i = 0; i < topQueens.length; i++) {
            judgingScreen.createImage(topQueens[i].image, "cyan");
        }
        for (let i = 0; i < bottomQueens.length; i++) {
            judgingScreen.createImage(bottomQueens[i].image, "cyan");
        }
        judgingScreen.createBold("", "judged");
        let judged = document.getElementById("judged");
        for (let i = 0; i < topQueens.length; i++) {
            judged.innerHTML += `${topQueens[i].getName()}, `;
            judged.innerHTML += `${bottomQueens[i].getName()}, `;
        }
        judged.innerHTML += "you represent the tops and bottoms of the week.";
        judgingScreen.createHorizontalLine();
    }
    if (!throwqueen)
    judgingScreen.createParagraph("", "safeQueens");
    let safeQueens = document.getElementById("safeQueens");
        if (ruvengeEpisode == true) {
        judgingScreen.createParagraph("", "outQueens");
        let outQueens = document.getElementById("outQueens");
    }
    //check if the queen is in the top or in the bottom, and if not put her as safe:
    for (let i = 0; i < currentCast.length; i++) {
        if (topQueens.indexOf(currentCast[i]) == -1 && bottomQueens.indexOf(currentCast[i]) == -1 && ruvengeEpisode == false && !throwqueen) {
            safeQueens.innerHTML += `${currentCast[i].getName()}, `;
            if (team == false)
                currentCast[i].addToTrackRecord("SAFE");
                currentCast[i].ppe += 3;
            if (team == true) {
                currentCast[i].addToTrackRecord("SAFE");
                currentCast[i].QueenA.addToTrackRecord("SAFE");
                currentCast[i].QueenA.ppe += 3;
                currentCast[i].QueenB.addToTrackRecord("SAFE");
                currentCast[i].QueenB.ppe += 3;
            }
        }
    }
    if (ruvengeEpisode == false && !throwqueen) {
            safeQueens.innerHTML += "you are safe.";
    }
    if (ruvengeEpisode == true && !throwqueen) {
        if (remainingQueens.length >= 7) {
            for (let i = 3; i < remainingQueens.length - 3; i++) {
            safeQueens.innerHTML += `${remainingQueens[i].getName()}, `;
                remainingQueens[i].addToTrackRecord("SAFE");
                remainingQueens[i].ppe += 3;
            }
        }
    for (let i = 3; i < ruvengeQueens.length; i++) {
            outQueens.innerHTML += ruvengeQueens[i].getName() + ", ";
    }
    }
    if (ruvengeEpisode == true && throwqueen) {
        if (ruvengeQueens.length <= 6) {
        for (let i = 3; i < ruvengeQueens.length; i++) {
            outQueens.innerHTML += ruvengeQueens[i].getName() + ", ";
        }
        }
        else if (ruvengeQueens.length >= 7) {
        for (let i = 4; i < ruvengeQueens.length; i++) {
            outQueens.innerHTML += ruvengeQueens[i].getName() + ", ";
        }
        }
    }
    if (ruvengeEpisode == true && throwqueen) {
            outQueens.innerHTML += "that means, my dears, you have failed to reach the top."
    }
    else if (ruvengeEpisode == true && remainingQueens.length >= 7 && (!all_stars || !lipsync_assassin)) {
            safeQueens.innerHTML += "you are safe.";
            outQueens.innerHTML += "that means, my dears, you have failed to reach the top."
    }
    else if (ruvengeEpisode == true && remainingQueens.length >= 7 && (all_stars || lipsync_assassin)) {
            safeQueens.innerHTML += "you are safe.";
    }
    else if (ruvengeEpisode == true && remainingQueens.length <= 6 && (!all_stars || !lipsync_assassin)) {
            outQueens.innerHTML += "that means, my dears, you have failed to reach the top."
    }
    if (top3 || top4)
        judgingScreen.createButton("Proceed", "winAndBtm2()");
    else if (savequeen)
        judgingScreen.createButton("Proceed", "winAndBtm3()");
    else if (all_stars)
        judgingScreen.createButton("Proceed", "top2AndBtm()");
    else if (lipsync_assassin)
        judgingScreen.createButton("Proceed", "topAndBtm()");
    else if (throwqueen)
        judgingScreen.createButton("Proceed", "winAndChoose()");
    else if (team)
        judgingScreen.createButton("Proceed", "teamWinAndBtm2()");
}
function top2Winner() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    screen.createImage(topQueens[0].image, "darkviolet");
    screen.createImage(topQueens[1].image, "darkviolet");
    screen.createBold(topQueens[0].getName() + ", " + topQueens[1].getName() + ", condragulations! You are the top two superstars of the week. <br> You will both have the chance to lipsync for the stars.");
    topQueens[0].favoritism += 5;
    topQueens[0].ppe += 5;
    top2.push(topQueens[0]);
    topQueens[1].favoritism += 5;
    topQueens[1].ppe += 5;
    if (totalCastSize % 2 == 0 && superstarsEpisode <= totalCastSize / 2 || totalCastSize % 2 != 0 && superstarsEpisode <= (totalCastSize + 1) / 2) {
        topQueens[0].starpoints += 1;
        topQueens[1].starpoints += 1;
    }
    top2.push(topQueens[1]);
    for (let i = 2; i < topQueens.length; i++) {
        screen.createImage(topQueens[i].image, "hotpink");
        topQueens[i].addToTrackRecord("HIGH");
        topQueens[i].favoritism += 1;
        topQueens[i].ppe += 4;
    }
    screen.createParagraph("", "highs");
    let highs = document.getElementById("highs");
    for (let i = 2; i < topQueens.length; i++)
        highs.innerHTML += `${topQueens[i].getName()}, `;
    highs.innerHTML += "fantastic job this week, you may now step at the back of the stage.";
    screen.createHorizontalLine();
    screen.createBigText("STARBOARD");
    currentCast.sort((a, b) => (b.starpoints - a.starpoints));
    for (let i = 0; i < currentCast.length; i++) {
        screen.createBold(currentCast[i].getName() + ": " + currentCast[i].starpoints + " Stars");
        if (currentCast[i].starpoints > 0) {
            stealProne.push(currentCast[i]);
        }
    }
    screen.createHorizontalLine();
    if (totalCastSize % 2 == 0 && superstarsEpisode <= totalCastSize / 2 || totalCastSize % 2 != 0 && superstarsEpisode <= (totalCastSize + 1) / 2) {
        screen.createBigText("2 Superstars stand before us...");
        screen.createImage(topQueens[0].image, "yellow");
        screen.createImage(topQueens[1].image, "yellow");
        screen.createBold("Ladies, I am both giving you a star for your amazing work this week. <br> But only one of you will have the honor of being rewarded with an extra one.");
        screen.createButton("Proceed", "ssLegacy()");
    }
    else if (totalCastSize % 2 == 0 && superstarsEpisode > totalCastSize / 2 && superstarsEpisode != totalCastSize + 3 || totalCastSize % 2 != 0 && superstarsEpisode > totalCastSize / 2 && superstarsEpisode != totalCastSize + 4) {
        screen.createBigText("2 Superstars stand before us...");
        screen.createImage(topQueens[0].image, "yellow");
        screen.createImage(topQueens[1].image, "yellow");
        screen.createBold("Ladies, I do not have anymore stars to give and that means only one thing. <br> You are bound to steal a star from your fellow queens who are not in the Top 2 this week!");
        screen.createButton("Proceed", "ssSteal()");
    }
    else if (totalCastSize % 2 == 0 && superstarsEpisode == totalCastSize + 3 || totalCastSize % 2 != 0 && superstarsEpisode == totalCastSize + 4) {
        screen.createBigText("2 Superstars stand before us...");
        screen.createImage(topQueens[0].image, "yellow");
        screen.createImage(topQueens[1].image, "yellow");
        screen.createBold("Ladies, we are coming closer to the end of the competition. <br> That's why, this week the winner of lipsync gets the chance to steal two stars from their fellow queens!");
        screen.createButton("Proceed", "ssFinal()");
    }
}
function ssLegacy() {
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for the stars! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(top2[0].image, "gold");
    top2[0].addToTrackRecord("WIN");
    top2[0].coinz += 15;
    top2[0].starpoints += 1;
    screen.createBold(top2[0].getName() + ", you're a winner baby! You've earned an extra star! <br> Current Amount: " + top2[0].starpoints + " Stars");
    screen.createImage(top2[1].image, "darkgray");
    screen.createBold(`${top2[1].getName()}, you are a superstar, keep it up!`);
    top2[1].addToTrackRecord("WIN ");
    screen.createButton("Proceed", "newEpisode()");
}
function ssSteal() {
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    stealProne.splice(stealProne.indexOf(top2[0]), 1);
    stealProne.splice(stealProne.indexOf(top2[1]), 1);
    if (randomNumber(0, 100) <= 65)
        top2[0].lipstick = stealProne.sort((a, b) => (b.starpoints - a.starpoints))[0];
    else
        top2[0].lipstick = stealProne[randomNumber(0, stealProne.length - 1)];
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for the stars! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(top2[0].image, "gold");
    screen.createBold(`${top2[0].getName()}, you're a winner baby! <br> That means you can steal a star from a fellow queen!`);
    top2[0].addToTrackRecord("WIN");
    top2[0].coinz += 15;
    top2[0].starpoints += 1;
    screen.createImage(top2[1].image, "white");
    screen.createBold(`${top2[1].getName()}, you are a superstar, keep it up!`);
    top2[1].addToTrackRecord("WIN ");
    screen.createHorizontalLine();
    screen.createBold(top2[0].getName() + " chose to steal " + top2[0].lipstick.getName() + "'s star.");
    screen.createImage(top2[0].image, "yellow");
    screen.createImage(top2[0].lipstick.image, "red");
    top2[0].lipstick.starpoints -= 1;
    screen.createBold(top2[0].getName() + "'s Stars: " + top2[0].starpoints + " Stars");
    screen.createBold(top2[0].lipstick.getName() + "'s Stars: " + top2[0].lipstick.starpoints + " Stars");
    if (top2[0].lipstick == topQueens[2] || top2[0].lipstick == topQueens[3] || top2[0].lipstick == topQueens[4] || top2[0].lipstick == topQueens[5] || top2[0].lipstick == topQueens[6] || top2[0].lipstick == topQueens[7] || top2[0].lipstick == topQueens[8] || top2[0].lipstick == topQueens[9] || top2[0].lipstick == topQueens[10]) {
        top2[0].lipstick.trackRecord.pop();
        top2[0].lipstick.addToTrackRecord("STOLEN ");
    }
    else {
        top2[0].lipstick.trackRecord.pop();
        top2[0].lipstick.addToTrackRecord("STOLEN");
    }
    screen.createButton("Proceed", "newEpisode()");
}
function ssFinal() {
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    stealProne.splice(stealProne.indexOf(top2[0]), 1);
    stealProne.splice(stealProne.indexOf(top2[1]), 1);
    if (randomNumber(0, 100) <= 65)
        top2[0].lipstick = stealProne.sort((a, b) => (b.starpoints - a.starpoints))[0];
    else
        top2[0].lipstick = stealProne[randomNumber(0, stealProne.length - 1)];
    top2[0].lipstick.starpoints -= 1;
    if (randomNumber(0, 100) <= 65)
        top2[0].lipstickTwo = stealProne.sort((a, b) => (b.starpoints - a.starpoints))[0];
    else
        top2[0].lipstickTwo = stealProne[randomNumber(0, stealProne.length - 1)];
    top2[0].lipstickTwo.starpoints -= 1;
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for the stars! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(top2[0].image, "gold");
    screen.createBold(`${top2[0].getName()}, you're a winner baby! <br> That means you can steal two stars from a fellow queen!`);
    top2[0].addToTrackRecord("WIN");
    top2[0].coinz += 15;
    top2[0].starpoints += 2;
    screen.createImage(top2[1].image, "white");
    screen.createBold(`${top2[1].getName()}, you are a superstar, keep it up!`);
    top2[1].addToTrackRecord("WIN ");
    screen.createHorizontalLine();
    if (top2[0].lipstick == top2[0].lipstickTwo) {
        screen.createBold(top2[0].getName() + " chose to steal " + top2[0].lipstick.getName() + "'s stars.");
        screen.createImage(top2[0].image, "yellow");
        screen.createImage(top2[0].lipstick.image, "red");
        screen.createBold(top2[0].getName() + "'s Stars: " + top2[0].starpoints + " Stars");
        screen.createBold(top2[0].lipstick.getName() + "'s Stars: " + top2[0].lipstick.starpoints + " Stars");
    }
    else {
        screen.createBold(top2[0].getName() + " chose to steal " + top2[0].lipstick.getName() + " & " + top2[0].lipstickTwo.getName() + "'s star.");
        screen.createImage(top2[0].image, "yellow");
        screen.createImage(top2[0].lipstick.image, "red");
        screen.createImage(top2[0].lipstickTwo.image, "red");
        screen.createBold(top2[0].getName() + "'s Stars: " + top2[0].starpoints + " Stars");
        screen.createBold(top2[0].lipstick.getName() + "'s Stars: " + top2[0].lipstick.starpoints + " Stars");
        screen.createBold(top2[0].lipstickTwo.getName() + "'s Stars: " + top2[0].lipstickTwo.starpoints + " Stars");
    }
    if (top2[0].lipstick == topQueens[2] || top2[0].lipstick == topQueens[3] || top2[0].lipstick == topQueens[4] || top2[0].lipstick == topQueens[5] || top2[0].lipstick == topQueens[6] || top2[0].lipstick == topQueens[7] || top2[0].lipstick == topQueens[8] || top2[0].lipstick == topQueens[9] || top2[0].lipstick == topQueens[10]) {
        top2[0].lipstick.trackRecord.pop();
        top2[0].lipstick.addToTrackRecord("STOLEN ");
    }
    else {
        top2[0].lipstick.trackRecord.pop();
        top2[0].lipstick.addToTrackRecord("STOLEN");
    }
    if (top2[0].lipstickTwo == topQueens[2] || top2[0].lipstickTwo == topQueens[3] || top2[0].lipstickTwo == topQueens[4] || top2[0].lipstickTwo == topQueens[5] || top2[0].lipstickTwo == topQueens[6] || top2[0].lipstickTwo == topQueens[7] || top2[0].lipstickTwo == topQueens[8] || top2[0].lipstickTwo == topQueens[9] || top2[0].lipstickTwo == topQueens[10]) {
        top2[0].lipstickTwo.trackRecord.pop();
        top2[0].lipstickTwo.addToTrackRecord("STOLEN ");
    }
    else {
        top2[0].lipstickTwo.trackRecord.pop();
        top2[0].lipstickTwo.addToTrackRecord("STOLEN");
    }
    screen.createButton("Proceed", "ssDeliberations()");
}
let finalFourSS = [];
let tieQueens = [];
function ssDeliberations() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("One Step Closer To The Finale!");
    screen.createBold("Ladies, the time has come to rely on your stars.");
    for (let i = 0; i < currentCast.length; i++) {
        screen.createImage(currentCast[i].image, "cyan");
    }
    screen.createParagraph("This is the moment that we determine which of you will advance to the finale.");
    screen.createHorizontalLine();
    screen.createBigText("STARBOARD");
    currentCast.sort((a, b) => (b.starpoints - a.starpoints));
    for (let i = 0; i < currentCast.length; i++) {
        screen.createBold(currentCast[i].getName() + ": " + currentCast[i].starpoints + " Stars");
        currentCast[i].votes = 0;
    }
    screen.createHorizontalLine();
    if (currentCast[3].starpoints > currentCast[4].starpoints) {
        //Normal
        finalFourSS.push(currentCast[0]);
        finalFourSS.push(currentCast[1]);
        finalFourSS.push(currentCast[2]);
        finalFourSS.push(currentCast[3]);
        for (let i = 0; i < finalFourSS.length; i++) {
            screen.createImage(finalFourSS[i].image, "gold");
        }
        screen.createBold("Condragulations, ladies! <br> The four of you will battle it out on our finale where we will crown the queen of all queens!");
    }
    else if (currentCast[3].starpoints == currentCast[4].starpoints && currentCast[2].starpoints > currentCast[3].starpoints) {
        //Top Superstar Decides Who will Advance
        finalFourSS.push(currentCast[0]);
        finalFourSS.push(currentCast[1]);
        finalFourSS.push(currentCast[2]);
        for (let i = 0; i < currentCast.length; i++) {
            if (currentCast[i].starpoints == currentCast[3].starpoints) {
                tieQueens.push(currentCast[i]);
                screen.createImage(currentCast[i].image, "pink");
            }
        }
        screen.createBold("Ladies, you have the same amount of stars. <br> To break the tie, the queen with the most stars gets to decide which one of you shall move forward!");
        screen.createHorizontalLine();
        if (randomNumber(0, 100) <= 50)
            currentCast[0].lipstick = tieQueens.sort((a, b) => (b.favoritism - a.favoritism))[0];
        else
            currentCast[0].lipstick = tieQueens[randomNumber(0, tieQueens.length - 1)];
        screen.createBigText("The Queen of the Stars has Spoken");
        if (currentCast[0].starpoints > currentCast[1].starpoints) {
            screen.createImage(currentCast[0].image, "gold");
            screen.createImage(currentCast[0].lipstick.image, "yellow");
            screen.createBold(currentCast[0].getName() + " chose " + currentCast[0].lipstick.getName() + "'s lipstick!");
        }
        else if (currentCast[0].starpoints == currentCast[1].starpoints && currentCast[0].starpoints > currentCast[2].starpoints) {
            screen.createImage(currentCast[0].image, "gold");
            screen.createImage(currentCast[1].image, "gold");
            screen.createImage(currentCast[0].lipstick.image, "yellow");
            screen.createBold(currentCast[0].getName() + " & " + currentCast[1].getName() + " chose " + currentCast[0].lipstick.getName() + "'s lipstick!");
        }
        else if (currentCast[0].starpoints == currentCast[2].starpoints) {
            screen.createImage(currentCast[0].image, "gold");
            screen.createImage(currentCast[1].image, "gold");
            screen.createImage(currentCast[2].image, "gold");
            screen.createImage(currentCast[0].lipstick.image, "yellow");
            screen.createBold("The queens have chosen " + currentCast[0].lipstick.getName() + "'s lipstick!");
        }
        finalFourSS.push(currentCast[0].lipstick);
        screen.createHorizontalLine();
        screen.createBigText("That means.. ");
        for (let i = 0; i < finalFourSS.length; i++) {
            screen.createImage(finalFourSS[i].image, "gold");
        }
        screen.createBold("We have a Final Four!");
    }
    else if (currentCast[2].starpoints == currentCast[4].starpoints && currentCast[1].starpoints > currentCast[2].starpoints) {
        //Top Superstar Picks One To Advance and the Cast for the other one
        finalFourSS.push(currentCast[0]);
        finalFourSS.push(currentCast[1]);
        for (let i = 0; i < currentCast.length; i++) {
            if (currentCast[i].starpoints == currentCast[2].starpoints) {
                tieQueens.push(currentCast[i]);
                screen.createImage(currentCast[i].image, "pink");
            }
        }
        screen.createBold("Ladies, you have the same amount of stars. <br> To break the tie, the queen with the most stars gets to decide which one of you shall move forward! <br> While the whole cast votes for the last one that shall advance!");
        screen.createHorizontalLine();
        if (randomNumber(0, 100) <= 50)
            currentCast[0].lipstick = tieQueens.sort((a, b) => (b.favoritism - a.favoritism))[0];
        else
            currentCast[0].lipstick = tieQueens[randomNumber(0, tieQueens.length - 1)];
        screen.createBigText("The Queen of the Stars has Spoken");
        screen.createImage(currentCast[0].image, "gold");
        screen.createImage(currentCast[0].lipstick.image, "yellow");
        screen.createBold(currentCast[0].getName() + " chose " + currentCast[0].lipstick.getName() + "'s lipstick!");
        finalFourSS.push(currentCast[0].lipstick);
        tieQueens.splice(tieQueens.indexOf(currentCast[0].lipstick), 1);
        screen.createHorizontalLine();
        screen.createBigText("The Superstars Votes!");
        for (let i = 1; i < currentCast.length; i++) {
            currentCast.indexOf(currentCast[i]); {
            if (currentCast[i] == tieQueens[0] || currentCast[i] == tieQueens[1] || currentCast[i] == tieQueens[2] || currentCast[i] == tieQueens[3] || currentCast[i] == tieQueens[4] || currentCast[i] == tieQueens[5] || currentCast[i] == tieQueens[6]) {
                currentCast[i].lipstick = currentCast[i];
            }
            else {
                tieQueens.sort((a, b) => b.favoritism - a.favoritism);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstick = tieQueens[0];
                else
                    currentCast[i].lipstick = tieQueens[randomNumber(0, tieQueens.length - 1)];
            }
            screen.createImage(currentCast[i].image, "hotpink");
            screen.createImage(currentCast[i].lipstick.image, "yellow");
            screen.createBold(currentCast[i].getName() + " chose " + currentCast[i].lipstick.getName() + "'s lipstick!");
            currentCast[i].lipstick.votes++;
            }
        }
        screen.createHorizontalLine();
        screen.createBigText("The Superstars has Spoken");
        tieQueens.sort((a, b) => b.votes - a.votes);
        screen.createImage(tieQueens[0].image, "gold");
        screen.createBold("The superstars voted for " + tieQueens[0].getName() + " to advance!");
        finalFourSS.push(tieQueens[0]);
        screen.createHorizontalLine();
        screen.createBigText("That means.. ");
        for (let i = 0; i < finalFourSS.length; i++) {
            screen.createImage(finalFourSS[i].image, "gold");
        }
        screen.createBold("We have a Final Four!");
    }
    else if (currentCast[0].starpoints > currentCast[1].starpoints && currentCast[1].starpoints == currentCast[4].starpoints) {
        //Top Superstar Picks One To Advance and the Cast for the other two
        finalFourSS.push(currentCast[0]);
        for (let i = 0; i < currentCast.length; i++) {
            if (currentCast[i].starpoints == currentCast[1].starpoints) {
                tieQueens.push(currentCast[i]);
                screen.createImage(currentCast[i].image, "pink");
            }
        }
        screen.createBold("Ladies, you have the same amount of stars. <br> To break the tie, the queen with the most stars gets to decide which one of you shall move forward! <br> While the whole cast votes for the last one that shall advance!");
        screen.createHorizontalLine();
        if (randomNumber(0, 100) <= 50)
            currentCast[0].lipstick = tieQueens.sort((a, b) => (b.favoritism - a.favoritism))[0];
        else
            currentCast[0].lipstick = tieQueens[randomNumber(0, tieQueens.length - 1)];
        screen.createBigText("The Queen of the Stars has Spoken");
        screen.createImage(currentCast[0].image, "gold");
        screen.createImage(currentCast[0].lipstick.image, "yellow");
        screen.createBold(currentCast[0].getName() + " chose " + currentCast[0].lipstick.getName() + "'s lipstick!");
        finalFourSS.push(currentCast[0].lipstick);
        tieQueens.splice(tieQueens.indexOf(currentCast[0].lipstick), 1);
        screen.createHorizontalLine();
        screen.createBigText("The Superstars Votes!");
        for (let i = 1; i < currentCast.length; i++) {
            currentCast.indexOf(currentCast[i]); {
            if (currentCast[i] == tieQueens[0] || currentCast[i] == tieQueens[1] || currentCast[i] == tieQueens[2] || currentCast[i] == tieQueens[3] || currentCast[i] == tieQueens[4] || currentCast[i] == tieQueens[5] || currentCast[i] == tieQueens[6]) {
                currentCast[i].lipstick = currentCast[i];
                tieQueens.splice(tieQueens.indexOf(currentCast[i].lipstick), 1);
                tieQueens.sort((a, b) => b.favoritism - a.favoritism);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstickTwo = tieQueens[0];
                else
                    currentCast[i].lipstickTwo = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.push(currentCast[i].lipstick);
            }
            else {
                tieQueens.sort((a, b) => b.favoritism - a.favoritism);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstick = tieQueens[0];
                else
                    currentCast[i].lipstick = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.splice(tieQueens.indexOf(currentCast[i].lipstick), 1);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstickTwo = tieQueens[0];
                else
                    currentCast[i].lipstickTwo = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.push(currentCast[i].lipstick);
            }
            screen.createImage(currentCast[i].image, "hotpink");
            screen.createImage(currentCast[i].lipstick.image, "yellow");
            screen.createImage(currentCast[i].lipstickTwo.image, "yellow");
            screen.createBold(currentCast[i].getName() + " chose " + currentCast[i].lipstick.getName() + " & " + currentCast[i].lipstickTwo.getName() + "'s lipsticks!");
            currentCast[i].lipstick.votes++;
            currentCast[i].lipstickTwo.votes++;
            }
        }
        screen.createHorizontalLine();
        screen.createBigText("The Superstars has Spoken");
        tieQueens.sort((a, b) => b.votes - a.votes);
        screen.createImage(tieQueens[0].image, "gold");
        screen.createImage(tieQueens[1].image, "gold");
        screen.createBold("The superstars voted for " + tieQueens[0].getName() + " & " + tieQueens[1].getName() + " to advance!");
        finalFourSS.push(tieQueens[0]);
        finalFourSS.push(tieQueens[1]);
        screen.createHorizontalLine();
        screen.createBigText("That means.. ");
        for (let i = 0; i < finalFourSS.length; i++) {
            screen.createImage(finalFourSS[i].image, "gold");
        }
        screen.createBold("We have a Final Four!");
    }
    else if (currentCast[0].starpoints == currentCast[4].starpoints) {
        //Cast votes who will advance to the Top 4
        for (let i = 0; i < currentCast.length; i++) {
            if (currentCast[i].starpoints == currentCast[0].starpoints) {
                tieQueens.push(currentCast[i]);
                screen.createImage(currentCast[i].image, "pink");
            }
        }
        screen.createBold("Ladies, you have the same amount of stars. <br> To break the tie, the cast gets to decide which among you should advance!");
        screen.createHorizontalLine();
        screen.createBigText("The Superstars Votes!");
        for (let i = 1; i < currentCast.length; i++) {
            currentCast.indexOf(currentCast[i]); {
            if (currentCast[i] == tieQueens[0] || currentCast[i] == tieQueens[1] || currentCast[i] == tieQueens[2] || currentCast[i] == tieQueens[3] || currentCast[i] == tieQueens[4] || currentCast[i] == tieQueens[5] || currentCast[i] == tieQueens[6]) {
                currentCast[i].lipstick = currentCast[i];
                tieQueens.splice(tieQueens.indexOf(currentCast[i].lipstick), 1);
                tieQueens.sort((a, b) => b.favoritism - a.favoritism);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstickTwo = tieQueens[0];
                else
                    currentCast[i].lipstickTwo = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.splice(tieQueens.indexOf(currentCast[i].lipstickTwo), 1);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstickThree = tieQueens[0];
                else
                    currentCast[i].lipstickThree = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.push(currentCast[i].lipstick);
                tieQueens.push(currentCast[i].lipstickTwo);
            }
            else {
                tieQueens.sort((a, b) => b.favoritism - a.favoritism);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstick = tieQueens[0];
                else
                    currentCast[i].lipstick = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.splice(tieQueens.indexOf(currentCast[i].lipstick), 1);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstickTwo = tieQueens[0];
                else
                    currentCast[i].lipstickTwo = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.splice(tieQueens.indexOf(currentCast[i].lipstickTwo), 1);
                if (randomNumber(0, 100) <= 50)
                    currentCast[i].lipstickThree = tieQueens[0];
                else
                    currentCast[i].lipstickThree = tieQueens[randomNumber(0, tieQueens.length - 1)];
                tieQueens.push(currentCast[i].lipstick);
                tieQueens.push(currentCast[i].lipstickTwo);
            }
            currentCast[i].lipstickThree.votes++;
            screen.createImage(currentCast[i].image, "hotpink");
            screen.createImage(currentCast[i].lipstick.image, "yellow");
            screen.createImage(currentCast[i].lipstickTwo.image, "yellow");
            screen.createImage(currentCast[i].lipstickThree.image, "yellow");
            screen.createBold(currentCast[i].getName() + " chose " + currentCast[i].lipstick.getName() + ", " + currentCast[i].lipstickTwo.getName() + ", and " + currentCast[i].lipstickThree.getName() + "'s lipsticks!");
            currentCast[i].lipstick.votes++;
            currentCast[i].lipstickTwo.votes++;
            }
        }
        screen.createHorizontalLine();
        screen.createBigText("The Superstars has Spoken");
        tieQueens.sort((a, b) => b.votes - a.votes);
        screen.createImage(tieQueens[0].image, "gold");
        screen.createImage(tieQueens[1].image, "gold");
        screen.createImage(tieQueens[2].image, "gold");
        screen.createImage(tieQueens[3].image, "gold");
        screen.createBold("Ladies, you have been voted to advance! <br> Condragulations! You are going to battle it out in our finale where we will crown the queen of all queens!");
        finalFourSS.push(tieQueens[0]);
        finalFourSS.push(tieQueens[1]);
        finalFourSS.push(tieQueens[2]);
        finalFourSS.push(tieQueens[3]);

    }
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].addToTrackRecord("OUT ");
        currentCast[i].coinz += 10;
        eliminatedCast.unshift(currentCast[i]);
    }
    currentCast.splice(0, currentCast.length);
    for (let i = 0; i < finalFourSS.length; i++) {
        finalFourSS[i].trackRecord.pop();
        finalFourSS[i].addToTrackRecord("ADV");
        currentCast.push(finalFourSS[i]);
        eliminatedCast.splice(eliminatedCast.indexOf(finalFourSS[i]), 1);
        finalFourSS[i].coinz -= 10;
    }
    eliminatedCast.sort((a, b) => b.favoritism - a.favoritism);
    episodeChallenges.push("Semi-Finals");
    screen.createButton("Proceed", "newEpisode()");
}
function winnerAndBtm3() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    //ruvenge:
    if (ruvengeEpisode == true) {
        remainingQueens[0].addToTrackRecord(" WIN");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        ruvengeQueens[0].addToTrackRecord(" WIN");
        ruvengeQueens[0].favoritism += 5;
        ruvengeQueens[0].ppe += 5;
        ruvengeQueens[0].lastEpisode -= ruvengeQueens[0].lastEpisode;
        screen.createImage(remainingQueens[0].image, "darkblue");
        screen.createImage(ruvengeQueens[0].image, "darkblue");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", you are back in the race!");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
    }
    else {
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge! <br> You are also going to lipsync against your chosen bottom queen for a cash tip and immunity for next week!");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
    }
    if (topQueens.length > 0 && ruvengeEpisode == false) {
        for (let i = 1; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 1; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
    }
    if (topQueens.length > 0 && ruvengeEpisode == true) {
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
        for (let i = 1; i < 3; i++) {
            screen.createImage(ruvengeQueens[i].image, "darkred");
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
        }
        screen.createParagraph("", "outLost");
        let outLost = document.getElementById("outLost");
        for (let i = 1; i < 3; i++)
            outLost.innerHTML += `${ruvengeQueens[i].getName()}, `;
        outLost.innerHTML += "you did great, but I am afraid to say that this is the end of your journeys.";
    }
    screen.createHorizontalLine();
    //do the same, but for the bottom queens:
    if (bottomQueens.length == 4) {
        for (let i = 0; i < topQueens.length; i++)
            bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore + bottomQueens[i].favoritism);
        bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        bottomQueens[0].addToTrackRecord("LOW");
        screen.createImage(bottomQueens[0].image, "pink");
        screen.createBold(bottomQueens[0].getName() + ", you are safe.");
        bottomQueens[0].unfavoritism += 1;
        bottomQueens[0].ppe += 2;
        bottomQueens.splice(0, 1);
    }
    else if (bottomQueens.length == 3) {
        for (let i = 0; i < topQueens.length; i++)
            bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore + bottomQueens[i].favoritism);
        bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        bottomQueens[0].addToTrackRecord("LOW");
        bottomQueens[0].ppe += 2;
        screen.createImage(bottomQueens[0].image, "pink");
        screen.createBold(bottomQueens[0].getName() + "... you are safe.");
        bottomQueens[0].unfavoritism += 1;
        bottomQueens.splice(0, 1);
    }
    for (let i = 0; i < bottomQueens.length; i++)
        screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm3");
    let btm3 = document.getElementById("btm3");
    for (let i = 0; i < bottomQueens.length; i++) {
        btm3.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm3.innerHTML += "I'm sorry my dears but you are up for elimination. <br> The three of you needs to decide which among your fellow bottoms deserves the chop.";
    screen.createHorizontalLine();
    screen.createBigText("After Deliberations...");
    if (randomNumber(0, 100) > 65) {
        topQueens[0].lipstick = bottomQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
    }
    else {
        topQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
    }
    let bottomLipsticks = [];
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomLipsticks.push(bottomQueens[i]);
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomLipsticks.splice(bottomLipsticks.indexOf(bottomQueens[i]), 1);
        if (randomNumber(0, 100) > 65) {
            bottomQueens[i].lipstick = bottomLipsticks.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.unfavoritism))[0];
            bottomLipsticks.push(bottomQueens[i]);
        }
        else {
            bottomQueens[i].lipstick = bottomLipsticks[randomNumber(0, bottomLipsticks.length - 1)];
            bottomLipsticks.push(bottomQueens[i]);
        }
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createImage(bottomQueens[i].lipstick.image, "crimson");
        screen.createBold(bottomQueens[i].getName() + " chose " + bottomQueens[i].lipstick.getName() + "'s lipstick");
    }
    screen.createImage(topQueens[0].image, "blue");
    screen.createImage(topQueens[0].lipstick.image, "crimson");
    screen.createBold(topQueens[0].getName() + " chose to lipsync against " + topQueens[0].lipstick.getName());
    versusQueens.push(topQueens[0]);
    versusQueens.push(topQueens[0].lipstick);
    for (let i = 0; i < bottomQueens.length; i++) {
        if (bottomQueens[i] == topQueens[0].lipstick) {
            botChoice.push(bottomQueens[i].lipstick);
        }
    }
    screen.createButton("Proceed", "vsLipsync()");
}
function winnerAndBtms() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    //ruvenge:
    if (ruvengeEpisode == true) {
        remainingQueens[0].addToTrackRecord(" WIN");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        ruvengeQueens[0].addToTrackRecord(" WIN");
        ruvengeQueens[0].favoritism += 5;
        ruvengeQueens[0].ppe += 5;
        ruvengeQueens[0].lastEpisode -= ruvengeQueens[0].lastEpisode;
        screen.createImage(remainingQueens[0].image, "darkblue");
        screen.createImage(ruvengeQueens[0].image, "darkblue");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", you are back in the race!");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
    }
    else {
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge! <br> You are also going to lipsync against your chosen bottom queen for a cash tip and immunity for next week!");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
    }
    if (topQueens.length > 0 && ruvengeEpisode == false) {
        for (let i = 1; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
            if (topQueens[i] != immuneQueen[0]) {
                bottomQueens.push(topQueens[i]);
            }
            else {
                immuneQueen[0].addToTrackRecord("SAFE  ");
            }
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 1; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, ladies.";
    }
    if (topQueens.length > 0 && ruvengeEpisode == true) {
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
        for (let i = 1; i < 3; i++) {
            screen.createImage(ruvengeQueens[i].image, "darkred");
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
        }
        screen.createParagraph("", "outLost");
        let outLost = document.getElementById("outLost");
        for (let i = 1; i < 3; i++)
            outLost.innerHTML += `${ruvengeQueens[i].getName()}, `;
        outLost.innerHTML += "you did great, but I am afraid to say that this is the end of your journeys.";
    }
    screen.createHorizontalLine();
    //do the same, but for the bottom queens:
    for (let i = 0; i < bottomQueens.length; i++)
        screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm3");
    let btm3 = document.getElementById("btm3");
    for (let i = 0; i < bottomQueens.length; i++) {
        btm3.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm3.innerHTML += "I'm sorry my dears but this week, if you are not in the top, you are in the bottom. <br> The rest of you needs to decide which among your fellow bottoms deserves the chop.";
    screen.createHorizontalLine();
    screen.createBigText("After Deliberations...");
    if (randomNumber(0, 100) > 50) {
        topQueens[0].lipstick = bottomQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
    }
    else {
        topQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
    }
    let bottomLipsticks = [];
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomLipsticks.push(bottomQueens[i]);
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomLipsticks.splice(bottomLipsticks.indexOf(bottomQueens[i]), 1);
        if (randomNumber(0, 100) > 50) {
            bottomQueens[i].lipstick = bottomLipsticks.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
            bottomLipsticks.push(bottomQueens[i]);
        }
        else {
            bottomQueens[i].lipstick = bottomLipsticks[randomNumber(0, bottomLipsticks.length - 1)];
            bottomLipsticks.push(bottomQueens[i]);
        }
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createImage(bottomQueens[i].lipstick.image, "crimson");
        screen.createBold(bottomQueens[i].getName() + " chose " + bottomQueens[i].lipstick.getName() + "'s lipstick");
    }
    screen.createImage(topQueens[0].image, "blue");
    screen.createImage(topQueens[0].lipstick.image, "crimson");
    screen.createBold(topQueens[0].getName() + " chose to lipsync against " + topQueens[0].lipstick.getName());
    versusQueens.push(topQueens[0]);
    versusQueens.push(topQueens[0].lipstick);
    for (let i = 0; i < bottomQueens.length; i++) {
        if (bottomQueens[i] == topQueens[0].lipstick) {
            botChoice.push(bottomQueens[i].lipstick);
        }
    }
    screen.createButton("Proceed", "vsLipsync()");
}
function winAndBtm2() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    //SHARED WIN:
    if (currentCast.length != eliminatedCast.length + 2 && eliminatedCast.length + 1 != currentCast.length && topQueens[0].performanceScore == topQueens[1].performanceScore && randomNumber(0, 100) < 60 && ruvengeEpisode == false && splitCastDuration == false && splitpremiere == false) {
        topQueens[0].addToTrackRecord(" WIN");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 2.5;
        topQueens[1].addToTrackRecord(" WIN");
        topQueens[1].favoritism += 5;
        topQueens[1].ppe += 5;
        topQueens[1].coinz += 2.5;
        screen.createImage(topQueens[0].image, "darkblue");
        screen.createImage(topQueens[1].image, "darkblue");
        screen.createBold(topQueens[0].getName() + ", " + topQueens[1].getName() + ", condragulations, you're the winners of today's challenge!");
        winnerEpisode.push(topQueens[0]);
        winnerEpisode.push(topQueens[1]);
        topQueens.splice(0, 2);
    }
    //ruvenge:
    else if (ruvengeEpisode == true) {
        remainingQueens[0].addToTrackRecord(" WIN");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        remainingQueens[0].coinz += 2.5;
        ruvengeQueens[0].addToTrackRecord(" WIN");
        ruvengeQueens[0].favoritism += 5;
        ruvengeQueens[0].ppe += 5;
        ruvengeQueens[0].coinz += 2.5;
        ruvengeQueens[0].lastEpisode -= ruvengeQueens[0].lastEpisode;
        screen.createImage(remainingQueens[0].image, "darkblue");
        screen.createImage(ruvengeQueens[0].image, "darkblue");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", you are back in the race!");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
    }
    else {
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge!");
        winnerEpisode.push(topQueens[0]);
        topQueens.splice(0, 1);
    }
    if (topQueens.length > 0 && ruvengeEpisode == false) {
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 3;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
    }
    if (topQueens.length > 0 && ruvengeEpisode == true) {
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 3;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
        for (let i = 1; i < 3; i++) {
            screen.createImage(ruvengeQueens[i].image, "darkred");
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
        }
        screen.createParagraph("", "outLost");
        let outLost = document.getElementById("outLost");
        for (let i = 1; i < 3; i++)
            outLost.innerHTML += `${ruvengeQueens[i].getName()}, `;
        outLost.innerHTML += "you did great, but I am afraid to say that this is the end of your journeys.";
    }
    screen.createHorizontalLine();
    if (bottomQueens.length >= 3) {
        for (let i = 0; i < bottomQueens.length; i++)
            screen.createImage(bottomQueens[i].image, "tomato");
        screen.createParagraph("", "bottom3");
        let bottom3 = document.getElementById("bottom3");
        for (let i = 0; i < bottomQueens.length; i++)
            bottom3.innerHTML += bottomQueens[i].getName() + ", ";
        bottom3.innerHTML += "you're the bottoms of the week...";
    }
    //do the same, but for the bottom queens:
    if (bottomQueens.length == 4) {
        for (let i = 0; i < topQueens.length; i++)
            bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore + bottomQueens[i].favoritism);
        bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        bottomQueens[0].addToTrackRecord("LOW");
        bottomQueens[1].addToTrackRecord("LOW");
        screen.createImage(bottomQueens[0].image, "pink");
        screen.createImage(bottomQueens[1].image, "pink");
        screen.createBold(bottomQueens[0].getName() + ", " + bottomQueens[1].getName() + "... you are safe.");
        bottomQueens[0].unfavoritism += 1;
        bottomQueens[0].ppe += 2;
        bottomQueens[1].unfavoritism += 1;
        bottomQueens[1].ppe += 2;
        bottomQueens.splice(0, 2);
    }
    else if (bottomQueens.length == 3) {
        for (let i = 0; i < topQueens.length; i++)
            bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore + bottomQueens[i].favoritism);
        bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        bottomQueens[0].addToTrackRecord("LOW");
        bottomQueens[0].ppe += 2;
        screen.createImage(bottomQueens[0].image, "pink");
        screen.createBold(bottomQueens[0].getName() + "... you are safe.");
        bottomQueens[0].unfavoritism += 1;
        bottomQueens.splice(0, 1);
    }
    for (let i = 0; i < bottomQueens.length; i++)
        screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
        btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm2.innerHTML += "I'm sorry my dears but you are up for elimination.";
    if (selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == false || selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == true && currentCast.length > 5) {
    screen.createHorizontalLine();
    screen.createBigText("Select The Outcome");
    let main = document.querySelector("div#MainBlock");
    let centering = document.createElement("center");
    let select = document.createElement("select");
    select.setAttribute("id", "lsOutcome");
    let basicoption = document.createElement("option");
    basicoption.innerHTML += "Basic Lipsync";
    select.add(basicoption);
    let shantayoption = document.createElement("option");
    shantayoption.innerHTML += "Double Shantay";
    select.add(shantayoption);
    if (showgirlShowdown == false && currentCast.length > 5 || showgirlShowdown == true && currentCast.length > 6) {
    let sashayoption = document.createElement("option");
    sashayoption.innerHTML += "Double Sashay";
    select.add(sashayoption);
    }
    let disqoption = document.createElement("option");
    disqoption.innerHTML += "Disqualification";
    select.add(disqoption);
    centering.appendChild(select);
    main.appendChild(centering);
    screen.createParagraph("");
    screen.createButton("Select", "lsChoose()", "chosenOutcome");
    }
    else {
    screen.createButton("Proceed", "lipSync()");
    }
}
function lsChoose() {
    let screen = new Scene();
    let select = document.getElementById("lsOutcome");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("chosenOutcome");
    if (value == "Double Shantay") {
        shantayLipsync = true;
    }
    else if (value == "Double Sashay") {
        sashayLipsync = true;
    }
    else if (value == "Disqualification") {
        disqLipsync = true;
    }
    button.remove();
    select.remove();
    screen.createBold(value + " was the selected outcome!");
    screen.createButton("Proceed", "lipSync()");
}
function winAndBtm3() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
    if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
    if (ruvengeEpisode == false) {
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 5;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge! <br> You are also tasked to save one queen from the verge of elimination.");
    }
    //ruvenge:
    else if (ruvengeEpisode == true) {
        remainingQueens[0].addToTrackRecord(" WIN");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        remainingQueens[0].coinz += 2.5;
        ruvengeQueens[0].addToTrackRecord(" WIN");
        ruvengeQueens[0].favoritism += 5;
        ruvengeQueens[0].ppe += 5;
        ruvengeQueens[0].coinz += 2.5;
        ruvengeQueens[0].lastEpisode -= ruvengeQueens[0].lastEpisode;
        screen.createImage(remainingQueens[0].image, "darkblue");
        screen.createImage(ruvengeQueens[0].image, "darkblue");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", you are back in the race! <br> And as the returning queen, you will decide which of the bottom queens shall be saved.");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
    }
    if (topQueens.length > 0 && ruvengeEpisode == false) {
        for (let i = 1; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 3;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
    }
    else if (topQueens.length > 0 && ruvengeEpisode == true) {
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 3;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
        for (let i = 1; i < 3; i++) {
            screen.createImage(ruvengeQueens[i].image, "darkred");
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
        }
        screen.createParagraph("", "outLost");
        let outLost = document.getElementById("outLost");
        for (let i = 1; i < 3; i++)
            outLost.innerHTML += `${ruvengeQueens[i].getName()}, `;
        outLost.innerHTML += "you did great, but I am afraid to say that this is the end of your journeys.";
    }
    screen.createHorizontalLine();

    //do the same, but for the bottom queens:
    if (bottomQueens.length == 4) {
      for (let i = 0; i < bottomQueens.length; i++)
        bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore + bottomQueens[i].favoritism - bottomQueens[i].unfavoritism);
      bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
      bottomQueens[0].addToTrackRecord("LOW");
      screen.createImage(bottomQueens[0].image, "pink");
      screen.createBold(bottomQueens[0].getName() + "... you are safe.");
      bottomQueens[0].unfavoritism += 1;
      bottomQueens[0].ppe += 2;
      bottomQueens.splice(0, 1);
      for (let i = 0; i < bottomQueens.length; i++)
            screen.createImage(bottomQueens[i].image, "tomato");
        screen.createParagraph("", "bottom3");
        let bottom3 = document.getElementById("bottom3");
        for (let i = 0; i < bottomQueens.length; i++)
            bottom3.innerHTML += bottomQueens[i].getName() + ", ";
        bottom3.innerHTML += "you're in the verge of elimination.";
    }
    else if (bottomQueens.length == 3) {
      for (let i = 0; i < bottomQueens.length; i++)
      screen.createImage(bottomQueens[i].image, "tomato");
      screen.createBold(bottomQueens[0].getName() + ", " + bottomQueens[1].getName() + ", " + bottomQueens[2].getName() + ", you're in the verge of elimination.");
    }
    screen.createHorizontalLine();
    if (ruvengeEpisode == false) {
    screen.createBigText("The winner has spoken...");
      if (randomNumber(0, 100) <= 55 && currentCast.length <= totalCastSize - 2)
        topQueens[0].lipstick = bottomQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
      else if (randomNumber(0, 100) <= 80 && currentCast.length <= totalCastSize - 2)
        topQueens[0].lipstick = bottomQueens.sort((a, b) => (b.performanceScore - a.performanceScore))[0];
      else
        topQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
      screen.createImage(topQueens[0].image, "cyan");
      screen.createImage(topQueens[0].lipstick.image, "yellow");
      screen.createBold(topQueens[0].getName() + " chose to save " + topQueens[0].lipstick.getName());
      topQueens[0].lipstick.addToTrackRecord("SAVED");
      topQueens[0].lipstick.unfavoritism += 5;
      topQueens[0].lipstick.ppe += 1.5;
      bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
    }
    else if (ruvengeEpisode == true) {
    screen.createBigText("The returning queen has spoken...");
      if (randomNumber(0, 100) <= 55 && currentCast.length <= totalCastSize - 2)
        ruvengeQueens[0].lipstick = bottomQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
      else if (randomNumber(0, 100) <= 80 && currentCast.length <= totalCastSize - 2)
        ruvengeQueens[0].lipstick = bottomQueens.sort((a, b) => (b.performanceScore - a.performanceScore))[0];
      else
        ruvengeQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
      screen.createImage(ruvengeQueens[0].image, "cyan");
      screen.createImage(ruvengeQueens[0].lipstick.image, "yellow");
      screen.createBold(ruvengeQueens[0].getName() + " chose to save " + ruvengeQueens[0].lipstick.getName());
      ruvengeQueens[0].lipstick.addToTrackRecord("SAVED");
      ruvengeQueens[0].lipstick.unfavoritism += 5;
      ruvengeQueens[0].lipstick.ppe += 1.5;
      bottomQueens.splice(bottomQueens.indexOf(ruvengeQueens[0].lipstick), 1);
    }
    for (let i = 0; i < bottomQueens.length; i++)
      screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
      btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm2.innerHTML += "that means you two, my dears, are up for elimination.";
    if (selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == false || selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == true && currentCast.length > 5) {
    screen.createHorizontalLine();
    screen.createBigText("Select The Outcome");
    let main = document.querySelector("div#MainBlock");
    let centering = document.createElement("center");
    let select = document.createElement("select");
    select.setAttribute("id", "lsOutcome");
    let basicoption = document.createElement("option");
    basicoption.innerHTML += "Basic Lipsync";
    select.add(basicoption);
    let shantayoption = document.createElement("option");
    shantayoption.innerHTML += "Double Shantay";
    select.add(shantayoption);
    if (showgirlShowdown == false && currentCast.length > 5 || showgirlShowdown == true && currentCast.length > 6) {
    let sashayoption = document.createElement("option");
    sashayoption.innerHTML += "Double Sashay";
    select.add(sashayoption);
    }
    let disqoption = document.createElement("option");
    disqoption.innerHTML += "Disqualification";
    select.add(disqoption);
    centering.appendChild(select);
    main.appendChild(centering);
    screen.createParagraph("");
    screen.createButton("Select", "lsChoose()", "chosenOutcome");
    }
    else {
    screen.createButton("Proceed", "lipSync()");
    }
}
function winAndBtm() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        topQueens[i].performanceScore += (topQueens[i].favoritism - topQueens[i].unfavoritism);
    topQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 4;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 5;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge! <br> You are also tasked to save one queen from the verge of elimination.");

    screen.createHorizontalLine();
    //do the same, but for the bottom queens:
      for (let i = 0; i < bottomQueens.length; i++)
            screen.createImage(bottomQueens[i].image, "tomato");
        screen.createParagraph("", "bottom4");
        let bottom4 = document.getElementById("bottom4");
        for (let i = 0; i < bottomQueens.length; i++)
            bottom4.innerHTML += bottomQueens[i].getName() + ", ";
        bottom4.innerHTML += "you're in the verge of elimination.";

    screen.createHorizontalLine();
    screen.createBigText("The winner has spoken...");
      if (randomNumber(0, 100) <= 76)
        topQueens[0].lipstick = bottomQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
      else
        topQueens[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
      screen.createImage(topQueens[0].image, "cyan");
      screen.createImage(topQueens[0].lipstick.image, "yellow");
      screen.createBold(topQueens[0].getName() + " chose to save " + topQueens[0].lipstick.getName());
      topQueens[0].lipstick.addToTrackRecord("SAVED");
      topQueens[0].lipstick.unfavoritism += 5;
      topQueens[0].lipstick.ppe += 3;
      bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);

    screen.createHorizontalLine();
    screen.createBigText("The eliminated queens vote...");
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast.indexOf(eliminatedCast[i]); {
            if (randomNumber(0, 100) <= 76)
                eliminatedCast[i].lipstick = bottomQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism))[0];
            else
                eliminatedCast[i].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
            screen.createBold(eliminatedCast[i].getName() + " voted for " + eliminatedCast[i].lipstick.getName() + "!");
            eliminatedCast[i].lipstick.votes++;
            }
    }
    screen.createHorizontalLine();
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold(bottomQueens[i].getName() + ": " + bottomQueens[i].votes.toString() + " votes");
    }
    bottomQueens.sort((a, b) => b.votes - a.votes);

    screen.createHorizontalLine();
    screen.createBigText("The cast has spoken...");
      screen.createImage(bottomQueens[0].image, "yellow");
      screen.createBold("The queens chose to save " + bottomQueens[0].getName());
      bottomQueens[0].addToTrackRecord("SAVED");
      bottomQueens[0].unfavoritism += 5;
      bottomQueens[0].ppe += 5;
      bottomQueens.splice(bottomQueens.indexOf(bottomQueens[0]), 1);

    screen.createHorizontalLine();
    for (let i = 0; i < bottomQueens.length; i++)
      screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
      btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].votes -= currentCast[i].votes
    }
    btm2.innerHTML += "that means you two, my dears, are up for elimination.";
    if (selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == false || selectOutcome == true && splitpremiere == false && splitCastDuration == false && showgirlShowdown == true && currentCast.length > 5) {
    screen.createHorizontalLine();
    screen.createBigText("Select The Outcome");
    let main = document.querySelector("div#MainBlock");
    let centering = document.createElement("center");
    let select = document.createElement("select");
    select.setAttribute("id", "lsOutcome");
    let basicoption = document.createElement("option");
    basicoption.innerHTML += "Basic Lipsync";
    select.add(basicoption);
    let shantayoption = document.createElement("option");
    shantayoption.innerHTML += "Double Shantay";
    select.add(shantayoption);
    if (showgirlShowdown == false && currentCast.length > 5 || showgirlShowdown == true && currentCast.length > 6) {
    let sashayoption = document.createElement("option");
    sashayoption.innerHTML += "Double Sashay";
    select.add(sashayoption);
    }
    let disqoption = document.createElement("option");
    disqoption.innerHTML += "Disqualification";
    select.add(disqoption);
    centering.appendChild(select);
    main.appendChild(centering);
    screen.createParagraph("");
    screen.createButton("Select", "lsChoose()", "chosenOutcome");
    }
    else {
    screen.createButton("Proceed", "lipSync()");
    }
}
function winAndChoose() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
    if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
    if (ruvengeEpisode == false) {
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 4;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 10;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge! <br> You are also tasked to throw one queen into the bottom two.");
    }
    else if (ruvengeEpisode == true) {
        remainingQueens[0].addToTrackRecord("WIN");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        remainingQueens[0].coinz += 5;
        ruvengeQueens[0].favoritism += 5;
        ruvengeQueens[0].ppe += 5;
        ruvengeQueens[0].ppe += 5;
        ruvengeQueens[0].lastEpisode -= ruvengeQueens[0].lastEpisode;
        screen.createImage(remainingQueens[0].image, "darkblue");
        screen.createImage(ruvengeQueens[0].image, "darkblue");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", you are one step away from joining back into the competition.");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
    }
    if (ruvengeEpisode == false) {
    for (let i = 1; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].favoritism += 2;
            topQueens[i].ppe += 4;
            highQueens.push(topQueens[i]);
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < highQueens.length; i++)
            highs.innerHTML += `${highQueens[i].getName()}, `;
        highs.innerHTML += "great job this week, you may now step at the back of the stage.";
      for (let i = 0; i < bottomQueens.length; i++)
            screen.createImage(bottomQueens[i].image, "tomato");
        screen.createParagraph("", "bottomQueen");
        let bottomQueen = document.getElementById("bottomQueen");
        for (let i = 0; i < bottomQueens.length; i++)
            bottomQueen.innerHTML += bottomQueens[i].getName() + ", ";
        bottomQueen.innerHTML += "I'm sorry, my dear, but you are one of the bottom two.";
    }
    else if (topQueens.length > 0 && ruvengeEpisode == true) {
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
            if (topQueens.length == 4) {
                topQueens.splice(topQueens.indexOf(ruvengeQueens[3]), 1);
            }
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].favoritism += 2;
            topQueens[i].ppe += 4;
            highQueens.push(topQueens[i]);
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "great job this week, ladies.";
        if (totalCastSize >= 12) {
        for (let i = 1; i < 4; i++) {
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
        }
        }
        else if (totalCastSize == 10) {
        for (let i = 1; i < 3; i++) {
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
        }
        }
    }

    screen.createHorizontalLine();
    if (ruvengeEpisode == false) {
    screen.createBigText("The winner has spoken...");
      if (randomNumber(0, 100) >= 90) {
        topQueens[0].lipstick = highQueens[randomNumber(0, highQueens.length - 1)];
        highLipstick = true;
      }
      else if (randomNumber(0, 100) >= 75 && currentCast.length >= 8) {
        topQueens[0].lipstick = fairQueens[randomNumber(0, fairQueens.length - 1)];
        fairLipstick = true;
      }
      else if (randomNumber(0, 100) >= 0) {
        topQueens[0].lipstick = lowQueens[randomNumber(0, lowQueens.length - 1)];
        lowLipstick = true;
      }
      screen.createImage(topQueens[0].image, "cyan");
      screen.createImage(topQueens[0].lipstick.image, "tomato");
      screen.createBold(topQueens[0].getName() + " chose " + topQueens[0].lipstick.getName() + "'s lipstick.");
      bottomQueens.push(topQueens[0].lipstick);
      for (let i = 0; i < bottomQueens.length; i++)
      screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
      btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm2.innerHTML += "that means you two, my dears, are up for elimination.";
    }
    else if (ruvengeEpisode == true) {
    screen.createBigText("After Deliberations...");
        fairQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.favoritism));
        notWinRuvenge.push(fairQueens[0]);
        highQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.favoritism));
        notWinRuvenge.push(highQueens[0]);
        if (randomNumber(0, 100) >= 90) {
        ruvengeQueens[0].lipstick = highQueens[0];
        highLipstick = true;
      }
        else if (randomNumber(0, 100) >= 75) {
        ruvengeQueens[0].lipstick = fairQueens[0];
        fairLipstick = true;
      }
        else if (randomNumber(0, 100) >= 0) {
        ruvengeQueens[0].lipstick = notWinRuvenge.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.favoritism))[0];
            if (ruvengeQueens[0].lipstick = fairQueens[0]) {
                fairLipstick = true;
            }
            else if (ruvengeQueens[0].lipstick = highQueens[0]) {
                highLipstick = true;
            }
      }
      screen.createImage(ruvengeQueens[0].image, "cyan");
      screen.createImage(ruvengeQueens[0].lipstick.image, "tomato");
      screen.createBold(ruvengeQueens[0].getName() + " chose " + ruvengeQueens[0].lipstick.getName() + "'s lipstick.");
      bottomQueens.push(ruvengeQueens[0]);
      bottomQueens.push(ruvengeQueens[0].lipstick);
      for (let i = 0; i < bottomQueens.length; i++)
      screen.createImage(bottomQueens[i].image, "crimson");
    screen.createBold("", "btm2");
    let btm2 = document.getElementById("btm2");
    for (let i = 0; i < bottomQueens.length; i++) {
      btm2.innerHTML += bottomQueens[i].getName() + ", ";
    }
    btm2.innerHTML += "that means you two, my dears, will battle it out on the lipsync.";
    }
    if (ruvengeEpisode == false) {
    screen.createButton("Proceed", "chosenlipSync()");
    }
    else if (ruvengeEpisode == true) {
    screen.createButton("Proceed", "chosenRuvenge()");
    }
}
function winAndChosen() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my girls!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
    if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
        topQueens[0].addToTrackRecord("WIN");
        topQueens[0].favoritism += 3;
        topQueens[0].ppe += 5;
        topQueens[0].coinz += 10;
        screen.createImage(topQueens[0].image, "royalblue");
        screen.createBold(topQueens[0].getName() + ", condragulations, you're the winner of today's challenge! <br> You are also tasked to choose the bottom two.");
    screen.createHorizontalLine();
    //do the same, but for the bottom queens:
      for (let i = 0; i < safeQueens.length; i++)
        screen.createImage(safeQueens[i].image, "tomato");
        screen.createParagraph("", "bottom4");
        let bottom4 = document.getElementById("bottom4");
        for (let i = 0; i < safeQueens.length; i++)
            bottom4.innerHTML += safeQueens[i].getName() + ", ";
        bottom4.innerHTML += "you're in the verge of elimination.";
    screen.createHorizontalLine();
    screen.createBigText("After deliberations...");
      if (randomNumber(0, 100) <= 76) {
        topQueens[0].lipstick = safeQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.favoritism))[0];
        bottomQueens.push(topQueens[0].lipstick);
        safeQueens.splice(safeQueens.indexOf(bottomQueens[0]), 1);
      }
      else {
        topQueens[0].lipstick = safeQueens[randomNumber(0, safeQueens.length - 1)];
        bottomQueens.push(topQueens[0].lipstick);
        safeQueens.splice(safeQueens.indexOf(bottomQueens[0]), 1);
      }
      if (randomNumber(0, 100) <= 76) {
        topQueens[0].lipstickTwo = safeQueens.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.favoritism))[0];
        bottomQueens.push(topQueens[0].lipstickTwo);
        safeQueens.splice(safeQueens.indexOf(bottomQueens[1]), 1);
      }
      else {
        topQueens[0].lipstickTwo = safeQueens[randomNumber(0, safeQueens.length - 1)];
        bottomQueens.push(topQueens[0].lipstickTwo);
        safeQueens.splice(safeQueens.indexOf(bottomQueens[1]), 1);
      }
      screen.createImage(topQueens[0].image, "cyan");
      screen.createBold(topQueens[0].getName() + " chose " + topQueens[0].lipstick.getName() + " and " + topQueens[0].lipstickTwo.getName() + "'s lipstick");
      screen.createImage(topQueens[0].lipstick.image, "red");
      screen.createImage(topQueens[0].lipstickTwo.image, "red");
      screen.createBold("I'm sorry, my dears, but you are up for elimination.")
    screen.createButton("Proceed", "chosenlipSync()");
}
function teamWinAndBtm2() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my All Stars!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
        topQueens[i].performanceScore -= (topQueens[i].runwayScore - topQueens[i].favoritism);
    topQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
    topQueens[0].QueenA.addToTrackRecord("WIN");
    topQueens[0].QueenB.addToTrackRecord("WIN");
    topQueens[0].addToTrackRecord("WIN");
    topQueens[0].favoritism += 5;
    topQueens[0].QueenA.favoritism += 5;
    topQueens[0].QueenB.favoritism += 5;
    topQueens[0].QueenA.ppe += 5;
    topQueens[0].QueenB.ppe += 5;
    topQueens[0].ppe += 5;
    topQueens[0].QueenA.coinz += 5;
    topQueens[0].QueenB.coinz += 5;
    topQueens[0].coinz += 10;
    screen.createImage(topQueens[0].QueenB.image, "royalblue");
    screen.createImage(topQueens[0].QueenA.image, "royalblue");
    screen.createBold(topQueens[0].getName() + ", condragulations you're the winners of this week's challenge!");
    if (topQueens.length > 1) {
        topQueens[1].QueenA.addToTrackRecord("HIGH");
        topQueens[1].QueenB.addToTrackRecord("HIGH");
        topQueens[1].addToTrackRecord("HIGH");
        topQueens[1].favoritism += 1;
        topQueens[1].ppe += 4;
        topQueens[1].QueenA.favoritism += 1;
        topQueens[1].QueenA.ppe += 4;
        topQueens[1].QueenB.favoritism += 1;
        topQueens[1].QueenB.ppe += 4;
        screen.createImage(topQueens[1].QueenB.image, "cyan");
        screen.createImage(topQueens[1].QueenA.image, "cyan");
        screen.createParagraph(topQueens[1].getName() + ", good work this week, you're safe.");
    }
    screen.createHorizontalLine();
    if (bottomQueens.length > 2) {
        screen.createParagraph(`${bottomQueens[0].getName()}, ${bottomQueens[1].getName()}, ${bottomQueens[2].getName()}, you're the bottoms of the week...`);
        for (let i = 0; i < topQueens.length; i++)
            bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore - bottomQueens[i].favoritism);
        bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        bottomQueens[0].QueenA.addToTrackRecord("LOW");
        bottomQueens[0].QueenB.addToTrackRecord("LOW");
        bottomQueens[0].addToTrackRecord("LOW");
        bottomQueens[0].unfavoritism += 1;
        bottomQueens[0].ppe += 2;
        bottomQueens[0].QueenA.unfavoritism += 1;
        bottomQueens[0].QueenA.ppe += 2;
        bottomQueens[0].QueenB.unfavoritism += 1;
        bottomQueens[0].QueenB.ppe += 2;
        screen.createImage(bottomQueens[0].QueenB.image, "pink");
        screen.createImage(bottomQueens[0].QueenA.image, "pink");
        screen.createBold(bottomQueens[0].getName() + ", you are safe.");
        bottomQueens.splice(0, 1);
    }
    screen.createImage(bottomQueens[0].QueenB.image, "tomato");
    screen.createImage(bottomQueens[0].QueenA.image, "tomato");
    screen.createImage(bottomQueens[1].QueenB.image, "tomato");
    screen.createImage(bottomQueens[1].QueenA.image, "tomato");
    screen.createBold(`${bottomQueens[0].getName()}, ${bottomQueens[1].getName()}, I'm sorry my dears but you are up for elimination.`);
    screen.createButton("Proceed", "teamLipSync()");
}
function top2AndBtm() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my All Stars!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
    if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
    if (ruvengeEpisode == false) {
    top2.push(topQueens[0]);
    top2.push(topQueens[1]);
    topQueens.splice(0, 2);
    screen.createImage(top2[0].image, "cyan");
    screen.createImage(top2[1].image, "cyan");
    screen.createBold(top2[0].getName() + ", " + top2[1].getName() + ", condragulations, you're the Top 2 of the week!");
    for (let i = 0; i < topQueens.length; i++)
        screen.createImage(topQueens[i].image, "lightblue");
    screen.createParagraph("", "highs");
    let highs = document.querySelector("p#highs");
    for (let i = 0; i < topQueens.length; i++) {
        highs.innerHTML += topQueens[i].getName() + ", ";
        topQueens[i].addToTrackRecord("HIGH");
        topQueens[i].favoritism += 1;
        topQueens[i].ppe += 4;
    }
    if (topQueens.length > 0)
        highs.innerHTML += "good work this week, you're safe.";
    }
        //ruvenge:
    else if (ruvengeEpisode == true) {
        top2.push(remainingQueens[0]);
        top2.push(ruvengeQueens[0]);
        screen.createImage(top2[0].image, "cyan");
        screen.createImage(top2[1].image, "cyan");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", if you win the lipsync, you will officially be back in the race and give one of the bottom queens the chop. <br> But if " + remainingQueens[0].getName() + " wins, she'll pick which queen will be back and which will get the chop.");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
        for (let i = 1; i < 3; i++) {
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
        }
    }

    screen.createHorizontalLine();
    for (let i = 0; i < bottomQueens.length; i++)
        screen.createImage(bottomQueens[i].image, "tomato");
    screen.createBold("", "bottoms");
    let bottoms = document.querySelector("b#bottoms");
    for (let i = 0; i < bottomQueens.length; i++) {
        bottoms.innerHTML += bottomQueens[i].getName() + ", ";
    }
    bottoms.innerHTML += "I'm sorry my dears but you're the bottoms of the week.";
    for (let i = 0; i < bottomQueens.length; i++) {
        if (bottomQueens[i].performanceScore >= 6 && bottomQueens[i].performanceScore < 14 && bottomQueens.length >= 3 && currentCast.length != 5 && splitpremiere == false && vstheworld == false) {
            screen.createImage(bottomQueens[i].image, "pink");
            screen.createParagraph(bottomQueens[i].getName() + ", you are safe.");
            bottomQueens[i].addToTrackRecord("LOW");
            bottomQueens[i].unfavoritism += 1;
            bottomQueens[i].ppe += 2;
            bottomQueens.splice(bottomQueens.indexOf(bottomQueens[i]), 1);
            for (let i = 0; i < bottomQueens.length; i++) {
            screen.createImage(bottomQueens[i].image, "tomato");
        }
        screen.createParagraph("", "elimbots");
        let elimbots = document.getElementById("elimbots");
        for (let i = 0; i < bottomQueens.length; i++)
            elimbots.innerHTML += `${bottomQueens[i].getName()}, `;
        elimbots.innerHTML += "you're up for elimination.";
            break;
        }
    }
    screen.createHorizontalLine();
    screen.createBigText("After deliberation...");
    if (ruvengeEpisode == true) {
    for (let i = 0; i < top2.length; i++) {
        if (randomNumber(0, 100) <= 55 && currentCast.length <= totalCastSize - 2)
        top2[i].lipstick = bottomQueens.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.unfavoritism))[0];
        else
        top2[i].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
        screen.createImage(top2[i].image, "cyan");
        screen.createImage(top2[i].lipstick.image, "red");
        screen.createBold(top2[i].getName() + " chose " + top2[i].lipstick.getName() + "'s lipstick!");
    }
        if (randomNumber(0, 100) <= 55)
            top2[0].lipstickTwo = top2[1];
        else
            top2[0].lipstickTwo = outRuvenge[randomNumber(0, outRuvenge.length - 1)];
        screen.createImage(top2[0].image, "cyan");
        screen.createImage(top2[0].lipstickTwo.image, "yellow");
        screen.createBold(top2[0].getName() + " chose " + top2[0].lipstickTwo.getName() + "'s lipstick!");
    }
    else {
    for (let i = 0; i < top2.length; i++) {
        if (randomNumber(0, 100) <= 70 && currentCast.length <= totalCastSize - 2)
        top2[i].lipstick = bottomQueens.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.unfavoritism))[0];
      else
        top2[i].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
        screen.createImage(top2[i].image, "cyan");
        screen.createImage(top2[i].lipstick.image, "red");
        screen.createBold(top2[i].getName() + " chose " + top2[i].lipstick.getName() + "'s lipstick!");
    }
    }
    if (vstheworld == true) {
        screen.createButton("Proceed", "vsLegacy()")
    }
    else {
        screen.createButton("Proceed", "asLipSync()");
    }
}
function topAndBtm() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("Bring back my All Stars!");
    screen.createBold("Ladies, I've made some decisions...");
    //sort the top queens now taking runway and favoritism in consideration:
    for (let i = 0; i < topQueens.length; i++)
    if (isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == false)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) - (topQueens[i].runwayScore / 2) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else if (randomNumber(0, 100) >= 56 && currentCast.length <= totalCastSize - 4 && isDesignChallenge == true)
        topQueens[i].performanceScore -= ((topQueens[i].performanceScore * 1.5) + topQueens[i].unfavoritism + (topQueens[i].favoritism / 25));
    else
        topQueens[i].performanceScore += topQueens[i].runwayScore;
    topQueens.sort((a, b) => (b.performanceScore - a.performanceScore));
    if (ruvengeEpisode == false) {
    top2.push(topQueens[0]);
    top2[0].favoritism += 5;
    topQueens.splice(0, 1);
    screen.createImage(top2[0].image, "royalblue");
    screen.createBold(top2[0].getName() + ", condragulations, you're the Top All Star of the week!");
    for (let i = 0; i < topQueens.length; i++)
        screen.createImage(topQueens[i].image, "lightblue");
    screen.createParagraph("", "highs");
    let highs = document.querySelector("p#highs");
    for (let i = 0; i < topQueens.length; i++) {
        highs.innerHTML += topQueens[i].getName() + ", ";
        topQueens[i].addToTrackRecord("HIGH");
        topQueens[i].favoritism += 2;
        topQueens[i].ppe += 4;
    }
    if (topQueens.length > 0)
        highs.innerHTML += "good work this week, you're safe.";
    }
    //ruvenge:
    else if (ruvengeEpisode == true) {
        top2.push(ruvengeQueens[0]);
        screen.createImage(remainingQueens[0].image, "cyan");
        screen.createImage(ruvengeQueens[0].image, "cyan");
        screen.createBold(remainingQueens[0].getName() + ", " + ruvengeQueens[0].getName() + ", condragulations, you're the winners of today's challenge! <br>" + "That means, " + ruvengeQueens[0].getName() + ", if you win the lipsync, you will officially be back in the race and give one of the bottom queens the chop. <br> But if the lipsync assasin wins, " + remainingQueens[0].getName() + " will pick which queen will be back and the eliminated queens' vote will get the chop.");
        topQueens.splice(topQueens.indexOf(remainingQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[0]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[1]), 1);
        topQueens.splice(topQueens.indexOf(ruvengeQueens[2]), 1);
        for (let i = 0; i < topQueens.length; i++) {
            screen.createImage(topQueens[i].image, "lightblue");
            topQueens[i].addToTrackRecord("HIGH");
            topQueens[i].favoritism += 1;
            topQueens[i].ppe += 4;
        }
        screen.createParagraph("", "highs");
        let highs = document.getElementById("highs");
        for (let i = 0; i < topQueens.length; i++)
            highs.innerHTML += `${topQueens[i].getName()}, `;
        highs.innerHTML += "good job this week, you're safe.";
        for (let i = 1; i < 3; i++) {
            let defeatRuvenge = ruvengeQueens[i];
            outRuvenge.push(defeatRuvenge);
            ruvengeQueens[i].ppe += 0;
            ruvengeQueens[i].episodesOn -= 1;
        }
    }
    screen.createHorizontalLine();
    ;
    if (currentCast.length > 6 && bottomQueens.length >= 3) {
        for (let i = 0; i < bottomQueens.length; i++)
            screen.createImage(bottomQueens[i].image, "tomato");
        screen.createBold("", "bottoms");
        let bottoms = document.querySelector("b#bottoms");
        for (let i = 0; i < bottomQueens.length; i++) {
            bottoms.innerHTML += bottomQueens[i].getName() + ", ";
        }
        bottoms.innerHTML += "I'm sorry my dears but you're the bottoms of the week.";
        for (let i = 0; i < bottomQueens.length; i++)
        if (bottomQueens[i].performanceScore >= 6 && bottomQueens[i].performanceScore < 14 && bottomQueens.length >= 3 && splitpremiere == false) {
            bottomQueens[i].performanceScore -= (bottomQueens[i].runwayScore + bottomQueens[i].favoritism);
        bottomQueens.sort((a, b) => (a.performanceScore - b.performanceScore));
        bottomQueens[0].addToTrackRecord("LOW");
        screen.createImage(bottomQueens[0].image, "pink");
        screen.createBold(bottomQueens[0].getName() + "... you are safe.");
        bottomQueens[0].unfavoritism += 1;
        bottomQueens[0].ppe += 2;
        bottomQueens.splice(0, 1);
        }
    }
    for (let i = 0; i < bottomQueens.length; i++)
        screen.createImage(bottomQueens[i].image, "tomato");
    screen.createParagraph("", "btms");
    let btms = document.getElementById("btms");
    for (let i = 0; i < bottomQueens.length; i++)
        btms.innerHTML += `${bottomQueens[i].getName()}, `;
    btms.innerHTML += "you're up for elimination.";

    screen.createHorizontalLine();

    if (ruvengeEpisode == false) {
    screen.createBigText("After deliberation...");
    if (randomNumber(0, 100) <= 55 && currentCast.length <= totalCastSize - 2)
        top2[0].lipstick = bottomQueens.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.unfavoritism))[0];
    else
        top2[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
    screen.createImage(top2[0].image, "cyan");
    screen.createImage(top2[0].lipstick.image, "red");
    screen.createBold(top2[0].getName() + " chose " + top2[0].lipstick.getName() + "'s lipstick!");
    screen.createHorizontalLine();
    screen.createBigText("The queens vote...");
    for (let i = 0; i < currentCast.length; i++) {
        if (top2.indexOf(currentCast[i]) == -1) {
            if (randomNumber(0, 100) <= 20 && currentCast.length > 6 && bottomQueens.sort((a, b) => b.unfavoritism - a.unfavoritism)[0] != currentCast[i] && currentCast.length <= totalCastSize - 2)
                currentCast[i].lipstick = bottomQueens.sort((a, b) => b.unfavoritism - a.unfavoritism)[0];
            else
                currentCast[i].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
            screen.createBold(currentCast[i].getName() + " voted for " + currentCast[i].lipstick.getName() + "!");
            currentCast[i].lipstick.votes++;
        }
    }
    screen.createHorizontalLine();
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "red");
        screen.createBold(bottomQueens[i].getName() + ": " + bottomQueens[i].votes.toString() + " votes");
    }
    }
    else if (ruvengeEpisode == true) {
    screen.createBigText("After deliberations...");
    if (randomNumber(0, 100) <= 45)
        top2[0].lipstick = bottomQueens.sort((a, b) => b.unfavoritism - a.unfavoritism)[0];
    else
        top2[0].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
    screen.createImage(top2[0].image, "cyan");
    screen.createImage(top2[0].lipstick.image, "red");
    screen.createBold(top2[0].getName() + " chose " + top2[0].lipstick.getName() + "'s lipstick!");
    if (randomNumber(0, 100) <= 70)
        remainingQueens[0].lipstick = top2[0];
    else
        remainingQueens[0].lipstick = outRuvenge[randomNumber(0, outRuvenge.length - 1)];
    screen.createImage(remainingQueens[0].image, "cyan");
    screen.createImage(remainingQueens[0].lipstick.image, "gold");
    screen.createBold(remainingQueens[0].getName() + " chose " + remainingQueens[0].lipstick.getName() + "'s lipstick!");
    screen.createHorizontalLine();
    screen.createBigText("The eliminated queens vote...");
    for (let i = 0; i < outRuvenge.length; i++) {
            if (randomNumber(0, 100) <= 55)
                outRuvenge[i].lipstick = bottomQueens.sort((a, b) => b.unfavoritism - a.unfavoritism)[0];
            else
                outRuvenge[i].lipstick = bottomQueens[randomNumber(0, bottomQueens.length - 1)];
            screen.createBold(outRuvenge[i].getName() + " voted for " + outRuvenge[i].lipstick.getName() + "!");
            outRuvenge[i].lipstick.votes++;
    }
    screen.createHorizontalLine();
    for (let i = 0; i < bottomQueens.length; i++) {
        screen.createImage(bottomQueens[i].image, "red");
        screen.createBold(bottomQueens[i].getName() + ": " + bottomQueens[i].votes.toString() + " votes");
    }
    }
    bottomQueens.sort((a, b) => b.votes - a.votes);
    screen.createButton("Proceed", "lsaLipSync()");
}
let bringbackImmune = false;
let partyOneSave = false;
let partyTwoSave = false;
let rubuke = false;
function lipSync() {
    let screen = new Scene();
    screen.clean();
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomQueens[i].getLipsync();
    }
    bottomQueens.sort((a, b) => b.lipsyncScore - a.lipsyncScore);
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("I've made my decision.");
    let score1 = bottomQueens[0].lipsyncScore + bottomQueens[0].favoritism - bottomQueens[0].unfavoritism;
    let score2 = bottomQueens[1].lipsyncScore + bottomQueens[1].favoritism - bottomQueens[1].unfavoritism;
    for (let i = 0; i < bottomQueens.length; i++) {
    let score = bottomQueens[i].lipsyncScore + bottomQueens[i].favoritism - bottomQueens[i].unfavoritism;
    }
    if ((twinstwist || comedyRuvenge || groupsRuvenge) && ruvengeEpisode == true) {
      outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
      for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
    }
    }
    let partyOneElim = false;
    let partyTwoElim = false;
    if (score1 > 9 && score2 > 9 && randomNumber(0, 100) <= 56 && !doubleShantay && noDouble == false && splitpremiere == false && splitCastDuration == false && currentCast.length > 5 && currentCast.length != totalCastSize && selectOutcome == false || showgirlShowdown && (top4 || savequeen) && currentCast.length == 5 && final5Episode == false && forFinaleLS == false || selectOutcome == true && shantayLipsync == true) {
        screen.createImage(bottomQueens[0].image, "magenta");
        screen.createImage(bottomQueens[1].image, "magenta");
        screen.createBold("Condragulations, shantay you both stay!!");
        bottomQueens[0].addToTrackRecord("BTM2");
        bottomQueens[0].unfavoritism += 5;
        bottomQueens[0].ppe += 1;
        bottomQueens[1].addToTrackRecord("BTM2");
        bottomQueens[1].unfavoritism += 5;
        bottomQueens[1].ppe += 1;
        doubleShantay = true;
        shantayLipsync = false;
        if (showgirlShowdown && (top4 || savequeen) && currentCast.length == 5 && final5Episode == false) {
            final5Episode = true;
        }
    }
    else if (goldticket && ticketSave == false && bottomQueens[0] == goldenTicket[0] && score1 < 4 && score2 < 4 && randomNumber(0, 100) <= 5 && !doubleSashay && eliminatedCast.length + 1 == currentCast.length && splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && noDouble == false && selectOutcome == false || goldticket && ticketSave == false && bottomQueens[1] == goldenTicket[0] && score1 < 4 && score2 < 4 && randomNumber(0, 100) <= 5 && !doubleSashay && eliminatedCast.length + 1 == currentCast.length && splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && noDouble == false || goldticket && ticketSave == false && selectOutcome == true && sashayLipsync == true && bottomQueens[0] == goldenTicket[0] || goldticket && ticketSave == false && selectOutcome == true && sashayLipsync == true && bottomQueens[1] == goldenTicket[0]) {
        screen.createBold("Neither of you survived that lipsync. <br> Now, both of your fates rest at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(goldenTicket[0].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        bottomQueens.splice(bottomQueens.indexOf(goldenTicket[0]), 1);
        screen.createHorizontalLine();
        screen.createImage(bottomQueens[0].image, "darkred");
        screen.createBold("IT'S CHOCOLATE! <br>" + bottomQueens[0].getName() + ", that means this is not your time. Now, sashay away.");
        bottomQueens[0].addToTrackRecord("ELIM");
        bottomQueens[0].ppe += 0;
        bottomQueens[0].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[0]);
        currentCast.splice(currentCast.indexOf(bottomQueens[0]), 1);
        doubleSashay = true;
        sashayLipsync = false;
        ticketSave = true;
        rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne == bottomQueens[0]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo == bottomQueens[0]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[0] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[0] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && bottomQueens[0].favoritism > 6 && bottomQueens[0].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && bottomQueens[0].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (bottomQueens[0] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[0].getName() + ", you are safe to slay another day!");
                bottomQueens[0].trackRecord.pop();
                bottomQueens[0].addToTrackRecord("KEPT");
                bottomQueens[0].unfavoritism -= 5;
                bottomQueens[0].lastEpisode = 0;
                currentCast.push(bottomQueens[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[0]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[0] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[0].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + bottomQueens[0].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[0] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(bottomQueens[0]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[0]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (bottomQueens[0] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[0].getName() + ", you are safe to slay another day!");
                bottomQueens[0].trackRecord.pop();
                bottomQueens[0].addToTrackRecord(" KEPT ");
                bottomQueens[0].unfavoritism -= 5;
                bottomQueens[0].lastEpisode = 0;
                currentCast.push(bottomQueens[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[0]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[0] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[0].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + bottomQueens[0].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[0] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(bottomQueens[0]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[0]), 1);
                }
            }
        }
        }
    }
    else if (goldticket && ticketSave == false && bottomQueens[0] != goldenTicket[0] && bottomQueens[1] != goldenTicket[0] && score1 < 4 && score2 < 4 && randomNumber(0, 100) <= 5 && !doubleSashay && eliminatedCast.length + 1 == currentCast.length && splitpremiere == false && splitCastDuration == false && currentCast.length > 7 && noDouble == false || goldticket && ticketSave == false && selectOutcome == true && sashayLipsync == true && bottomQueens[0] != goldenTicket[0] && bottomQueens[1] != goldenTicket[0]) {
        screen.createBold("Neither of you survived that lipsync. <br> Now, both of your fates rest at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(bottomQueens[0].image, "darkred");
        screen.createImage(bottomQueens[1].image, "darkred");
        screen.createBold("IT'S CHOCOLATE! <br>" + bottomQueens[0].getName() + ", " + bottomQueens[1].getName() + ", that means this is not your time. Now, sashay away.");
        doubleSashay = true;
        sashayLipsync = false;
        bottomQueens[0].addToTrackRecord("ELIM");
        bottomQueens[0].ppe += 0;
        bottomQueens[0].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[0]);
        currentCast.splice(currentCast.indexOf(bottomQueens[0]), 1);
        bottomQueens[1].addToTrackRecord("ELIM");
        bottomQueens[1].ppe += 0;
        bottomQueens[1].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        let rubukeOne = false;
        let rubukeTwo = false;
        bottomQueens.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            if (dragPresidentOne[0] == bottomQueens[0] || dragPresidentOne[0] == bottomQueens[1]) {
                partyOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == bottomQueens[0] || dragPresidentTwo[0] == bottomQueens[1]) {
                partyTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[0] == PartyOneMembers[i] && dragParty == true || bottomQueens[1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
            else {
                partyOneJury.push(PartyOneMembers[i]);
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[0] == PartyTwoMembers[i] && dragParty == true || bottomQueens[1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
            else {
                partyTwoJury.push(PartyTwoMembers[i]);
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length == 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length == 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (bottomQueens[0] == dragPresidentOne[0] || bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneJury.length; v++)
                    screen.createImage(PartyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (bottomQueens[0] == dragPresidentOne[0] || bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "black");
                if (partyOneSashay == true) {
                    screen.createImage(partyOneBottoms[1].image, "black");
                }
                if (partyOneSashay == false) {
                    screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + partyOneBottoms[0].getName() + ", as it was decided so it shall be done.");
                }
                else if (partyOneSashay == true) {
                    screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + partyOneBottoms[0].getName() + ", " + partyOneBottoms[1].getName() + ", as it was decided so it shall be done.");
                }
                if (bottomQueens[0] == dragPresidentOne[0] || bottomQueens[1] == dragPresidentOne[0]) {
                    bottomQueens.splice(bottomQueens.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneSashay == true) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[0]), 1);
                    }
                }
                else {
                    PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[0]), 1);
                    if (partyOneSashay == true) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[1]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (bottomQueens[0] == dragPresidentTwo[0] || bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (bottomQueens[0] == dragPresidentTwo[0] || bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "black");
                if (partyTwoSashay == true) {
                    screen.createImage(partyTwoBottoms[1].image, "black");
                }
                if (partyTwoSashay == false) {
                    screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + partyTwoBottoms[0].getName() + ", as it was decided so it shall be done.");
                }
                else if (partyTwoSashay == true) {
                    screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + partyTwoBottoms[0].getName() + ", " + partyTwoBottoms[1].getName() + ", as it was decided so it shall be done.");
                }
                if (bottomQueens[0] == dragPresidentTwo[0] || bottomQueens[1] == dragPresidentTwo[0]) {
                    bottomQueens.splice(bottomQueens.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                    if (partyTwoSashay == true) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[0]), 1);
                    }
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[0]), 1);
                    if (partyTwoSashay == true) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[1]), 1);
                    }
                }
            }
        }
        }
    }
    else if ((!goldenTicket || ticketSave == true) && score1 < 4 && score2 < 4 && randomNumber(0, 100) >= 60 && doubleSashay == false  && eliminatedCast.length + 1 == currentCast.length && splitpremiere == false && splitCastDuration == false && currentCast.length < totalCastSize - 2 && currentCast.length > 6 && noDouble == false || (goldticket == false || ticketSave == true) && selectOutcome == true && sashayLipsync == true) {
        screen.createImage(bottomQueens[0].image, "darkred");
        screen.createImage(bottomQueens[1].image, "darkred");
        screen.createBold("I'm sorry but none of you showed the fire it takes to stay. You must both... sashay away.");
        doubleSashay = true;
        sashayLipsync = false;
        bottomQueens[0].addToTrackRecord("ELIM");
        bottomQueens[0].ppe += 0;
        bottomQueens[0].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[0]);
        currentCast.splice(currentCast.indexOf(bottomQueens[0]), 1);
        bottomQueens[1].addToTrackRecord("ELIM");
        bottomQueens[1].ppe += 0;
        bottomQueens[1].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        let rubukeOne = false;
        let rubukeTwo = false;
        bottomQueens.sort((a, b) => (b.favoritism - a.favoritism));
        let partyOneBottoms = [];
        let partyTwoBottoms = [];
        let partyOneJury = [];
        let partyTwoJury = [];
        if (dragParty == true) {
            let breakline = false;
            if (dragPresidentOne[0] == bottomQueens[0] || dragPresidentOne[0] == bottomQueens[1]) {
                partyOneElim = true;
                partyOneBottoms.push(dragPresidentOne[0]);
            }
            if (dragPresidentTwo[0] == bottomQueens[0] || dragPresidentTwo[0] == bottomQueens[1]) {
                partyTwoElim = true;
                partyTwoBottoms.push(dragPresidentTwo[0]);
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[0] == PartyOneMembers[i] && dragParty == true || bottomQueens[1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
                partyOneBottoms.push(PartyOneMembers[i]);
            }
            else {
                partyOneJury.push(PartyOneMembers[i]);
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubukeOne = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[0] == PartyTwoMembers[i] && dragParty == true || bottomQueens[1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
                partyTwoBottoms.push(PartyTwoMembers[i]);
            }
            else {
                partyTwoJury.push(PartyTwoMembers[i]);
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubukeTwo = true;
            }
        let partyOneSashay = false;
        let partyTwoSashay = false;
        if (partyOneBottoms.length == 2) {
            partyOneSashay = true;
        }
        if (partyTwoBottoms.length == 2) {
            partyTwoSashay = true;
        }
        if (partyOneElim == true) {
            if (partyOneSashay == true) {
                partyOneBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeOne == false && currentCast.length > 9 && partyOneBottoms[0].favoritism > 6 && partyOneBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeOne == false && currentCast.length <= 9 && partyOneBottoms[0].favoritism > 8 && partyOneBottoms.unfavoritism <= 9) {
                rubukeOne = true;
            }
        }
        if (partyTwoElim == true) {
            if (partyTwoSashay == true) {
                partyTwoBottoms.sort((a, b) => ((b.favoritism - b.unfavoritism) - (a.favoritism - a.unfavoritism)));
            }
            if (dragParty == true && rubukeTwo == false && currentCast.length > 6 && partyTwoBottoms[0].favoritism > 7 && partyTwoBottoms[0].unfavoritism <= 0 || dragParty == true && rubukeTwo == false && currentCast.length <= 9 && partyTwoBottoms[0].favoritism > 8 && partyTwoBottoms.unfavoritism <= 9) {
                rubukeTwo = true;
            }
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubukeOne == true) {
                if (bottomQueens[0] == dragPresidentOne[0] || bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneJury.length; v++)
                    screen.createImage(PartyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + partyOneBottoms[0].getName() + ", you are safe to slay another day!");
                partyOneBottoms[0].trackRecord.pop();
                partyOneBottoms[0].addToTrackRecord("KEPT");
                partyOneBottoms[0].unfavoritism -= 5;
                partyOneBottoms[0].lastEpisode = 0;
                currentCast.push(partyOneBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyOneBottoms[0]), 1);
                partyOneSave = true;
            }
            else if (rubukeOne == false) {
                if (bottomQueens[0] == dragPresidentOne[0] || bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < partyOneJury.length; v++)
                    screen.createImage(partyOneJury[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(partyOneBottoms[0].image, "black");
                if (partyOneSashay == true) {
                    screen.createImage(partyOneBottoms[1].image, "black");
                }
                if (partyOneSashay == false) {
                    screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + partyOneBottoms[0].getName() + ", as it was decided so it shall be done.");
                }
                else if (partyOneSashay == true) {
                    screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + partyOneBottoms[0].getName() + ", " + partyOneBottoms[1].getName() + ", as it was decided so it shall be done.");
                }
                if (bottomQueens[0] == dragPresidentOne[0] || bottomQueens[1] == dragPresidentOne[0]) {
                    bottomQueens.splice(bottomQueens.indexOf(dragPresidentOne[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne = [];
                    dragPresidentOne.push(partyOneJury[randomNumber(0, partyOneJury.length - 1)]);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                    breakline = true;
                    if (partyOneSashay == true) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[0]), 1);
                    }
                }
                else {
                    PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[0]), 1);
                    if (partyOneSashay == true) {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(partyOneBottoms[1]), 1);
                    }
                }
            }
        }
        if (partyTwoElim == true && partyTwoSave == false) {
            if (breakline == true) {
                screen.createHorizontalLine();
                breakline = false;
            }
            if (rubukeTwo == true) {
                if (bottomQueens[0] == dragPresidentTwo[0] || bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + partyTwoBottoms[0].getName() + ", you are safe to slay another day!");
                partyTwoBottoms[0].trackRecord.pop();
                partyTwoBottoms[0].addToTrackRecord(" KEPT ");
                partyTwoBottoms[0].unfavoritism -= 5;
                partyTwoBottoms[0].lastEpisode = 0;
                currentCast.push(partyTwoBottoms[0]);
                eliminatedCast.splice(eliminatedCast.indexOf(partyTwoBottoms[0]), 1);
                partyTwoSave = true;
            }
            else if (rubukeTwo == false) {
                if (bottomQueens[0] == dragPresidentTwo[0] || bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < partyTwoJury.length; v++)
                    screen.createImage(partyTwoJury[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(partyTwoBottoms[0].image, "black");
                if (partyTwoSashay == true) {
                    screen.createImage(partyTwoBottoms[1].image, "black");
                }
                if (partyTwoSashay == false) {
                    screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + partyTwoBottoms[0].getName() + ", as it was decided so it shall be done.");
                }
                else if (partyTwoSashay == true) {
                    screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + partyTwoBottoms[0].getName() + ", " + partyTwoBottoms[1].getName() + ", as it was decided so it shall be done.");
                }
                if (bottomQueens[0] == dragPresidentTwo[0] || bottomQueens[1] == dragPresidentTwo[0]) {
                    bottomQueens.splice(bottomQueens.indexOf(dragPresidentTwo[0]), 1);
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo = [];
                    dragPresidentTwo.push(partyTwoJury[randomNumber(0, partyTwoJury.length - 1)]);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                    if (partyTwoSashay == true) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[0]), 1);
                    }
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[0]), 1);
                    if (partyTwoSashay == true) {
                        PartyTwoMembers.splice(PartyTwoMembers.indexOf(partyTwoBottoms[1]), 1);
                    }
                }
            }
        }
        }
    }
    else if (randomNumber(0, 1000) >= 995 && splitpremiere == false && splitCastDuration == false && dragParty == false && currentCast.length > 6 && selectOutcome == false || selectOutcome == true && disqLipsync == true) {
        if (goldticket == true && ticketSave == false) {
            currentCast.splice(currentCast.indexOf(goldenTicket[0]), 1);
        }
        let disqualifiedQueen = currentCast[randomNumber(0, currentCast.length - 1)];
        screen.createImage(disqualifiedQueen.image, "black");
        if (randomNumber(0, 100) > 50) {
            screen.createBold(disqualifiedQueen.getName() + ", it has come to my attention that you have broken the rules of this competition. <br> I must ask you to sashay away.");
            disqLipsync = false;
            bottomQueens[0].addToTrackRecord("BTM2");
            bottomQueens[0].unfavoritism += 5;
            bottomQueens[0].ppe += 1;
            bottomQueens[1].addToTrackRecord("BTM2");
            bottomQueens[1].unfavoritism += 5;
            bottomQueens[1].ppe += 1;
            disqualifiedQueen.trackRecord.pop();
            disqualifiedQueen.addToTrackRecord("DISQ");
            disqualifiedQueen.lastEpisode += episodeCount;
            disqualifiedQueen.withdraw += 1;
            eliminatedCast.unshift(disqualifiedQueen);
            currentCast.splice(currentCast.indexOf(disqualifiedQueen), 1);
        }
        else {
            screen.createBold(disqualifiedQueen.getName() + ", we got in touch with the doctor and we found out that you got a severe injury. <br> In good conscience, I could no longer let you proceed in the competition. <br> I'm so sorry but I must ask you to sashay away.");
            disqLipsync = false;
            bottomQueens[0].addToTrackRecord("BTM2");
            bottomQueens[0].unfavoritism += 5;
            bottomQueens[0].ppe += 1;
            bottomQueens[1].addToTrackRecord("BTM2");
            bottomQueens[1].unfavoritism += 5;
            bottomQueens[1].ppe += 1;
            disqualifiedQueen.trackRecord.pop();
            disqualifiedQueen.addToTrackRecord("INJ");
            disqualifiedQueen.lastEpisode += episodeCount;
            disqualifiedQueen.withdraw += 1;
            eliminatedCast.unshift(disqualifiedQueen);
            currentCast.splice(currentCast.indexOf(disqualifiedQueen), 1);
        }
        withdrawOut = true;
        if (goldticket == true && ticketSave == false) {
            currentCast.push(goldenTicket[0]);
        }
        if (dragParty == true) {
            let partyOneJury = [];
            let partyTwoJury = [];
            if (dragPresidentOne[0] == disqualifiedQueen) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == disqualifiedQueen) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (disqualifiedQueen == PartyOneMembers[i]) {
                partyOneElim = true;
            }
            else {
                partyOneJury.push(PartyOneMembers[i]);
            }
        }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (disqualifiedQueen == PartyTwoMembers[i]) {
                partyTwoElim = true;
            }
            else {
                partyTwoJury.push(PartyTwoMembers[i]);
            }
        }
        if (partyOneSave == false && partyOneElim == true) {
            if (disqualifiedQueen == dragPresidentOne[0]) {
                screen.createHorizontalLine();
                screen.createBigText("That means...");
                dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                dragPresidentOne.splice(dragPresidentOne.indexOf(disqualifiedQueen), 1);
                screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
            }
            else {
                PartyOneMembers.splice(PartyOneMembers.indexOf(disqualifiedQueen), 1);
            }
        }
        if (partyTwoSave == false && partyTwoElim == true) {
            if (disqualifiedQueen == dragPresidentTwo[0]) {
                screen.createHorizontalLine();
                screen.createBigText("That means...");
                dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                dragPresidentTwo.splice(dragPresidentTwo.indexOf(disqualifiedQueen), 1);
                screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
            }
            else {
                PartyTwoMembers.splice(PartyTwoMembers.indexOf(disqualifiedQueen), 1);
            }
        }
        }
}
    else if (goldticket && ticketSave == false && bottomQueens[1] == goldenTicket[0] && splitpremiere == false && splitCastDuration == false) {
        screen.createImage(bottomQueens[0].image, "tomato");
        screen.createBold(bottomQueens[0].getName() + ", shantay you stay.");
        bottomQueens[0].addToTrackRecord("BTM2");
        bottomQueens[0].unfavoritism += 3;
        bottomQueens[0].ppe += 1;
        screen.createHorizontalLine();
        screen.createBold("Now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(bottomQueens[1].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        ticketSave = true;
        if (currentCast.length == 5) {
            top5Choc = true;
        }
    }
    else if (goldticket && ticketSave == false && bottomQueens[1] != goldenTicket[0] && splitpremiere == false && splitCastDuration == false) {
        screen.createImage(bottomQueens[0].image, "tomato");
        screen.createBold(bottomQueens[0].getName() + ", shantay you stay.");
        bottomQueens[0].addToTrackRecord("BTM2");
        bottomQueens[0].unfavoritism += 3;
        bottomQueens[0].ppe += 1;
        screen.createHorizontalLine();
        screen.createBold("Now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(bottomQueens[1].image, "red");
        screen.createBold("IT'S CHOCOLATE! <br>" + bottomQueens[1].getName() + ", sashay away.");
        bottomQueens[1].addToTrackRecord("ELIM");
        bottomQueens[1].ppe += 0;
        if (splitpremiere == false) {
        bottomQueens[1].lastEpisode += episodeCount;
        }
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne[0] == bottomQueens[1]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == bottomQueens[1]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && bottomQueens[1].favoritism > 6 && bottomQueens[1].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && bottomQueens[1].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[1].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[1].getName() + ", you are safe to slay another day!");
                bottomQueens[1].trackRecord.pop();
                bottomQueens[1].addToTrackRecord("KEPT");
                bottomQueens[1].unfavoritism -= 5;
                bottomQueens[1].lastEpisode = 0;
                currentCast.push(bottomQueens[1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[1]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[1].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + bottomQueens[1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[1] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(bottomQueens[1]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[1]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[1].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[1].getName() + ", you are safe to slay another day!");
                bottomQueens[1].trackRecord.pop();
                bottomQueens[1].addToTrackRecord(" KEPT ");
                bottomQueens[1].unfavoritism -= 5;
                bottomQueens[1].lastEpisode = 0;
                currentCast.push(bottomQueens[1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[1]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[1].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + bottomQueens[1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[1] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(bottomQueens[1]), 1);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[1]), 1);
                }
            }
        }
        }
    }
    else {
        screen.createImage(bottomQueens[0].image, "tomato");
        screen.createBold(bottomQueens[0].getName() + ", shantay you stay.");
        bottomQueens[0].addToTrackRecord("BTM2");
        bottomQueens[0].unfavoritism += 3;
        bottomQueens[0].ppe += 1;
        screen.createImage(bottomQueens[1].image, "red");
        screen.createBold(bottomQueens[1].getName() + ", sashay away...");
        bottomQueens[1].addToTrackRecord("ELIM");
        bottomQueens[1].ppe += 0;
        bottomQueens[1].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        rubuke = false;
        if (dragParty == true) {
            if (dragPresidentOne[0] == bottomQueens[1]) {
                partyOneElim = true;
            }
            if (dragPresidentTwo[0] == bottomQueens[1]) {
                partyTwoElim = true;
            }
        for (let i = 0; i < PartyOneMembers.length; i++) {
            if (bottomQueens[1] == PartyOneMembers[i] && dragParty == true) {
                partyOneElim = true;
            }
        }
        if (partyOneElim == true && PartyOneMembers.length <= 3) {
                rubuke = true;
            }
        for (let i = 0; i < PartyTwoMembers.length; i++) {
            if (bottomQueens[1] == PartyTwoMembers[i] && dragParty == true) {
                partyTwoElim = true;
            }
        }
        if (partyTwoElim == true && PartyTwoMembers.length <= 3) {
                rubuke = true;
            }
        if (dragParty == true && rubuke == false && currentCast.length > 9 && bottomQueens[1].favoritism > 6 && bottomQueens[1].unfavoritism <= 0 || dragParty == true && rubuke == false && currentCast.length <= 9 && bottomQueens[1].favoritism > 8 && bottomQueens.unfavoritism <= 9) {
            rubuke = true;
        }
        if (partyOneElim == true && partyOneSave == false) {
            if (rubuke == true) {
                if (bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[1].image, "#82cdf5");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[1].getName() + ", you are safe to slay another day!");
                bottomQueens[1].trackRecord.pop();
                bottomQueens[1].addToTrackRecord("KEPT");
                bottomQueens[1].unfavoritism -= 5;
                bottomQueens[1].lastEpisode = 0;
                currentCast.push(bottomQueens[1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[1]), 1);
                partyOneSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[1] == dragPresidentOne[0]) {
                    for (let v = 0; v < PartyOneMembers.length; v++)
                    screen.createImage(PartyOneMembers[v].image, "#82cdf5");
                }
                else {
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                }
                screen.createImage(bottomQueens[1].image, "black");
                screen.createBold("The Tucking Party has made a decision! The elimination has been RuProved! <br>" + bottomQueens[1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[1] == dragPresidentOne[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentOne.push(PartyOneMembers[randomNumber(0, PartyOneMembers.length - 1)]);
                    dragPresidentOne.splice(dragPresidentOne.indexOf(bottomQueens[1]), 1);
                    screen.createImage(dragPresidentOne[0].image, "#82cdf5");
                    screen.createBold(dragPresidentOne[0].getName() + ", you are the newly appointed President of Tucking Party!");
                    PartyOneMembers.splice(PartyOneMembers.indexOf(dragPresidentOne[0]), 1);
                }
                else {
                        PartyOneMembers.splice(PartyOneMembers.indexOf(bottomQueens[1]), 1);
                }
            }
        }
        else if (partyTwoElim == true && partyTwoSave == false) {
            if (rubuke == true) {
                if (bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[1].image, "#ff91f4");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuBuked! <br>" + bottomQueens[1].getName() + ", you are safe to slay another day!");
                bottomQueens[1].trackRecord.pop();
                bottomQueens[1].addToTrackRecord(" KEPT ");
                bottomQueens[1].unfavoritism -= 5;
                bottomQueens[1].lastEpisode = 0;
                currentCast.push(bottomQueens[1]);
                eliminatedCast.splice(eliminatedCast.indexOf(bottomQueens[1]), 1);
                partyTwoSave = true;
            }
            else if (rubuke == false) {
                if (bottomQueens[1] == dragPresidentTwo[0]) {
                    for (let v = 0; v < PartyTwoMembers.length; v++)
                    screen.createImage(PartyTwoMembers[v].image, "#ff91f4");
                }
                else {
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                }
                screen.createImage(bottomQueens[1].image, "black");
                screen.createBold("The Party Hoes has made a decision! The elimination has been RuProved! <br>" + bottomQueens[1].getName() + ", as it was decided so it shall be done.");
                if (bottomQueens[1] == dragPresidentTwo[0]) {
                    screen.createHorizontalLine();
                    screen.createBigText("That means...");
                    dragPresidentTwo.push(PartyTwoMembers[randomNumber(0, PartyTwoMembers.length - 1)]);
                    dragPresidentTwo.splice(dragPresidentTwo.indexOf(bottomQueens[1]), 1);
                    screen.createImage(dragPresidentTwo[0].image, "#ff91f4");
                    screen.createBold(dragPresidentTwo[0].getName() + ", you are the newly appointed President of Party Hoes!");
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(dragPresidentTwo[0]), 1);
                }
                else {
                    PartyTwoMembers.splice(PartyTwoMembers.indexOf(bottomQueens[1]), 1);
                }
            }
        }
        }
    }
    if (splitCastPremiere == true && splitCastDuration == true) {
        screen.createButton("Proceed", "splitCastEpisodes()");
    }
    else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && premiereCounter < 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (triplePremiere == true && premiereCounter <= 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if ((twinstwist || comedyRuvenge || groupsRuvenge) && totalCastSize % 2 == 0 && currentCast.length == totalCastSize / 2 && ruvenge == false || (twinstwist || comedyRuvenge || groupsRuvenge) && totalCastSize % 2 == 1 && currentCast.length == (totalCastSize + 1) / 2 && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < eliminatedCast.length; i++) {
          if (eliminatedCast[i].withdraw == 1) {
              ruvengeQueens.splice(ruvengeQueens.indexOf(eliminatedCast[i]), 1);
          }
      }
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens[i]), 1);
      }
      if (currentCast.length % 2 !== 0) {
          if (top4 || top3) {
              immuneQueen.push(winnerEpisode[0]);
          }
          else {
            immuneQueen.push(topQueens[0]);
          }
          currentCast.splice(currentCast.indexOf(immuneQueen[0]), 1);
          remainingQueens.splice(remainingQueens.indexOf(immuneQueen[0]), 1);
          bringbackImmune = true;
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (ruvengeEpisode == true) {
        ruvengeUntucked = true;
        ruvengeEpisode = false;
        if (bringbackImmune == true) {
            currentCast.push(immuneQueen[0]);
            immuneQueen[0].addToTrackRecord("SAFE  ");
            bringbackImmune = false;
        }
        screen.createButton("Proceed", "newEpisode()");
    }
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else {
        ruvengeEpisode = false;
        screen.createButton("Proceed", "newEpisode()");
    }
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
}
function chosenlipSync() {
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomQueens[i].getLipsync();
    }
    bottomQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("I've made my decision.");
    let score1 = bottomQueens[0].lipsyncScore + bottomQueens[0].favoritism - bottomQueens[0].unfavoritism;
    let score2 = bottomQueens[1].lipsyncScore + bottomQueens[0].favoritism - bottomQueens[0].unfavoritism;
    for (let i = 0; i < bottomQueens.length; i++) {
    let score = bottomQueens[i].lipsyncScore + bottomQueens[i].favoritism - bottomQueens[i].unfavoritism;
    }
    bottomQueens.sort((a, b) => (b.score - a.lipsyncScore));
    if (score1 > 9 && score2 > 9 && randomNumber(0, 100) <= 8 && !doubleShantay && noDouble == false && splitpremiere == false && splitCastDuration == false && currentCast.length != totalCastSize && currentCast.length > 5) {
        screen.createImage(bottomQueens[0].image, "magenta");
        screen.createImage(bottomQueens[1].image, "magenta");
        screen.createBold("Condragulations, shantay you both stay!!");
        if (lowLipstick == true && bottomQueens[0] == topQueens[0].lipstick) {
        bottomQueens[0].addToTrackRecord("BTM2   ");
        lowQueens.splice(lowQueens.indexOf(bottomQueens[0]), 1);
        }
        else if (fairLipstick == true && bottomQueens[0] == topQueens[0].lipstick) {
        bottomQueens[0].addToTrackRecord("BTM2  ");
        fairQueens.splice(fairQueens.indexOf(bottomQueens[0]), 1);
        }
        else if (highLipstick == true && bottomQueens[0] == topQueens[0].lipstick) {
        bottomQueens[0].addToTrackRecord("BTM2 ");
        highQueens.splice(highQueens.indexOf(bottomQueens[0]), 1);
        }
        else {
        bottomQueens[0].addToTrackRecord("BTM2");
        bottomQueens[0].unfavoritism += 3;
        bottomQueens[0].ppe += 1;
        }
        if (lowLipstick == true && bottomQueens[1] == topQueens[0].lipstick) {
        bottomQueens[1].addToTrackRecord("BTM2   ");
        lowQueens.splice(lowQueens.indexOf(bottomQueens[1]), 1);
        }
        else if (fairLipstick == true && bottomQueens[1] == topQueens[0].lipstick) {
        bottomQueens[1].addToTrackRecord("BTM2  ");
        fairQueens.splice(fairQueens.indexOf(bottomQueens[1]), 1);
        }
        else if (highLipstick == true && bottomQueens[1] == topQueens[0].lipstick) {
        bottomQueens[1].addToTrackRecord("BTM2 ");
        highQueens.splice(highQueens.indexOf(bottomQueens[1]), 1);
        }
        else {
        bottomQueens[1].addToTrackRecord("BTM2");
        bottomQueens[1].unfavoritism += 3;
        bottomQueens[1].ppe += 1;
        }
        doubleShantay = true;
    }
    else {
        screen.createImage(bottomQueens[0].image, "tomato");
        screen.createBold(bottomQueens[0].getName() + ", shantay you stay.");
        screen.createImage(bottomQueens[1].image, "red");
        if (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && splitCastPremiere == true && splitCastDuration == true) {
        screen.createBold(bottomQueens[1].getName() + ", you are and will always be an All Star. Now, sashay away...");
        }
        else if (goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0] && splitCastDuration == false) {
        screen.createBold(bottomQueens[1].getName() + ", your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(bottomQueens[1].image, "brown");
        screen.createBold("IT'S CHOCOLATE! <br>" + bottomQueens[1].getName() + ", you are and will always be an All Star. Now, sashay away.");
        }
        else if (goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0] && splitCastDuration == false) {
        screen.createBold(bottomQueens[1].getName() + ", your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(bottomQueens[1].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + bottomQueens[1].getName() + ", condragulations! You are safe to slay another day!");
        }
        if (lowLipstick == true && bottomQueens[0] == topQueens[0].lipstick) {
        bottomQueens[0].addToTrackRecord("BTM2   ");
        lowQueens.splice(lowQueens.indexOf(bottomQueens[0]), 1);
        }
        else if (fairLipstick == true && bottomQueens[0] == topQueens[0].lipstick) {
        bottomQueens[0].addToTrackRecord("BTM2  ");
        fairQueens.splice(fairQueens.indexOf(bottomQueens[0]), 1);
        }
        else if (highLipstick == true && bottomQueens[0] == topQueens[0].lipstick) {
        bottomQueens[0].addToTrackRecord("BTM2 ");
        highQueens.splice(highQueens.indexOf(bottomQueens[0]), 1);
        }
        else if (currentCast.length == 5) {
        bottomQueens[0].addToTrackRecord("BTM2");
        }
        else {
        bottomQueens[0].addToTrackRecord("BTM2");
        bottomQueens[0].unfavoritism += 3;
        bottomQueens[0].ppe += 1;
        }
        if (lowLipstick == true && bottomQueens[1] == topQueens[0].lipstick && (goldticket == false  || goldticket == true && ticketSave == true) || lowLipstick == true && bottomQueens[1] == topQueens[0].lipstick && goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("ELIM   ");
        bottomQueens[1].lastEpisode += episodeCount;
        lowQueens.splice(lowQueens.indexOf(bottomQueens[1]), 1);
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        }
        else if (lowLipstick == true && bottomQueens[1] == topQueens[0].lipstick && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("CHOC   ");
        lowQueens.splice(lowQueens.indexOf(bottomQueens[1]), 1);
        bottomQueens[1].favoritism += 3;
        ticketSave = true;
        }
        else if (fairLipstick == true && bottomQueens[1] == topQueens[0].lipstick && (goldticket == false  || goldticket == true && ticketSave == true) || fairLipstick == true && bottomQueens[1] == topQueens[0].lipstick && goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("ELIM  ");
        bottomQueens[1].lastEpisode += episodeCount;
        fairQueens.splice(fairQueens.indexOf(bottomQueens[1]), 1);
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        }
        else if (fairLipstick == true && bottomQueens[1] == topQueens[0].lipstick && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("CHOC  ");
        fairQueens.splice(fairQueens.indexOf(bottomQueens[1]), 1);
        bottomQueens[1].favoritism += 3;
        ticketSave = true;
        }
        else if (highLipstick == true && bottomQueens[1] == topQueens[0].lipstick && (goldticket == false  || goldticket == true && ticketSave == true) || highLipstick == true && bottomQueens[1] == topQueens[0].lipstick && goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("ELIM ");
        bottomQueens[1].lastEpisode += episodeCount;
        highQueens.splice(highQueens.indexOf(bottomQueens[1]), 1);
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        }
        else if (highLipstick == true && bottomQueens[1] == topQueens[0].lipstick && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("CHOC ");
        highQueens.splice(highQueens.indexOf(bottomQueens[1]), 1);
        bottomQueens[1].favoritism += 3;
        ticketSave = true;
        }
        else if (currentCast.length == 5 && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0])) {
        bottomQueens[1].addToTrackRecord("ELIM");
        bottomQueens[1].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        }
        else if (currentCast.length == 5 && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("CHOC");
        bottomQueens[1].favoritism += 3;
        ticketSave = true;
        }
        else if ((currentCast.length == 5 || bottomQueens[1] != topQueens[0].lipstick) && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        bottomQueens[1].addToTrackRecord("CHOC");
        bottomQueens[1].favoritism += 3;
        ticketSave = true;
        }
        else {
        bottomQueens[1].addToTrackRecord("ELIM");
        bottomQueens[1].lastEpisode += episodeCount;
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        }
    }
    for (let i = 0; i < highQueens.length; i++) {
        highQueens[i].addToTrackRecord("HIGH");
        }
    for (let i = 0; i < fairQueens.length; i++) {
        fairQueens[i].addToTrackRecord("FAIR");
        }
    for (let i = 0; i < lowQueens.length; i++) {
        lowQueens[i].addToTrackRecord("LOW");
        }
    for (let i = 0; i < safeQueens.length; i++) {
        safeQueens[i].addToTrackRecord("SAFE");
        }
    if (splitCastPremiere == true && splitCastDuration == true) {
        screen.createButton("Proceed", "splitCastEpisodes()");
    }
    else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && premiereCounter < 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (triplePremiere == true && premiereCounter <= 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if ((twinstwist || comedyRuvenge || groupsRuvenge) && (currentCast.length == totalCastSize / 2 || eliminatedCast.length + 1 == currentCast.length) && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens), 1);
      }
      if (currentCast.length % 2 !== 0) {
          immuneQueen.push(topQueens[0]);
          currentCast.splice(currentCast.indexOf(immuneQueen[0]), 1);
          remainingQueens.splice(remainingQueens.indexOf(immuneQueen[0]), 1);
          bringbackImmune = true;
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else {
        ruvengeEpisode = false;
        screen.createButton("Proceed", "newEpisode()");
    }
}
function chosenRuvenge() {
    for (let i = 0; i < bottomQueens.length; i++) {
        bottomQueens[i].getLipsync();
    }
    if (randomNumber(0, 100) >= 90) {
        remainingQueens[0].lipstickTwo = ruvengeQueens[randomNumber(0, ruvengeQueens.length - 1)];
      }
        else if (randomNumber(0, 100) >= 40) {
        remainingQueens[0].lipstickTwo = ruvengeQueens[0];
      }
        else if (randomNumber(0, 100) >= 0) {
        remainingQueens[0].lipstickTwo = outRuvenge.sort((a, b) => (a.favoritism - a.unfavoritism) - (b.favoritism - b.favoritism))[0];
      }
      if (randomNumber(0, 500) >= 450) {
        remainingQueens[0].lipstick = highQueens[0];
        highLipstick2 = true;
      }
        else if (randomNumber(0, 500) >= 200) {
        remainingQueens[0].lipstick = fairQueens[0];
        fairLipstick2 = true;
      }
        else if (randomNumber(0, 500) >= 0) {
        remainingQueens[0].lipstick = notWinRuvenge.sort((a, b) => (b.favoritism - b.unfavoritism) - (a.favoritism - a.favoritism))[0];
            if (remainingQueens[0].lipstick = fairQueens[0]) {
                fairLipstick2 = true;
            }
            else if (remainingQueens[0].lipstick = highQueens[0]) {
                highLipstick2 = true;
            }
      }
    bottomQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("I've made my decision.");
    let score1 = bottomQueens[0].lipsyncScore + bottomQueens[0].favoritism - bottomQueens[0].unfavoritism;
    let score2 = bottomQueens[1].lipsyncScore + bottomQueens[0].favoritism - bottomQueens[0].unfavoritism;
    for (let i = 0; i < bottomQueens.length; i++) {
    let score = bottomQueens[i].lipsyncScore + bottomQueens[i].favoritism - bottomQueens[i].unfavoritism;
    }
    bottomQueens.sort((a, b) => (b.score - a.score));
    if (score1 > 9 && score2 > 9 && randomNumber(0, 100) <= 30 && !doubleShantay && noDouble == false && splitCastDuration == false) {
        screen.createImage(bottomQueens[0].image, "magenta");
        screen.createImage(bottomQueens[1].image, "magenta");
        screen.createBold("Condragulations, shantay you both stay!!");
        ruvengeQueens[0].addToTrackRecord("WIN");
        if (highLipstick == true) {
            highQueens.splice(highQueens.indexOf(ruvengeQueens[0].lipstick), 1);
            ruvengeQueens[0].lipstick.addToTrackRecord("BTM ");
        }
        else if (fairLipstick == true) {
            fairQueens.splice(fairQueens.indexOf(ruvengeQueens[0].lipstick), 1);
            ruvengeQueens[0].lipstick.addToTrackRecord("BTM");
        }
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        doubleShantay = true;
    }
    else {
    if (bottomQueens[0] == ruvengeQueens[0].lipstick && remainingQueens[0].lipstickTwo != ruvengeQueens[0]) {
        screen.createImage(bottomQueens[0].image, "royalblue");
        screen.createBold(bottomQueens[0].getName() + ", you're a winner, baby.");
        if (ruvengeQueens[0].lipstick != remainingQueens[0].lipstick && highLipstick == true) {
            highQueens.splice(highQueens.indexOf(ruvengeQueens[0].lipstick), 1);
            bottomQueens[0].addToTrackRecord("BTM ")
        }
        else if (ruvengeQueens[0].lipstick != remainingQueens[0].lipstick && fairLipstick == true) {
            fairQueens.splice(fairQueens.indexOf(ruvengeQueens[0].lipstick), 1);
            bottomQueens[0].addToTrackRecord("BTM")
        }
        screen.createImage(bottomQueens[1].image, "cyan");
        screen.createBold(bottomQueens[1].getName() + ", please step at the back of the stage.");
        ruvengeQueens[0].addToTrackRecord("WIN ");
        screen.createHorizontalLine();
        screen.createBigText("That means...");
      screen.createImage(remainingQueens[0].image, "cyan");
      screen.createImage(remainingQueens[0].lipstickTwo.image, "yellow");
      screen.createBold(remainingQueens[0].getName() + " chose to bring back " + remainingQueens[0].lipstickTwo.getName());
      remainingQueens[0].lipstickTwo.addToTrackRecord("RTRN");
        outRuvenge.splice(outRuvenge.indexOf(remainingQueens[0].lipstickTwo), 1);
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        }
        let loserRuvenge = ruvengeQueens[0];
        outRuvenge.push(loserRuvenge);
        ruvengeQueens[0].episodesOn -= 1;
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        ruvengeQueens[0].episodesOn += 1;
        screen.createImage(remainingQueens[0].image, "cyan");
        screen.createImage(remainingQueens[0].lipstick.image, "tomato");
        if (goldticket == false || goldticket == true && ticketSave == true) {
        screen.createBold(remainingQueens[0].getName() + " chose to eliminate " + remainingQueens[0].lipstick.getName());
        }
        else if (goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0]) {
        screen.createBold(remainingQueens[0].getName() + " chose to eliminate " + remainingQueens[0].lipstick.getName() + "<br> That means, your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(remainingQueens[0].lipstick.image, "brown");
        screen.createBold("IT'S CHOCOLATE! <br>" + remainingQueens[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away.");
        }
        else if (goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
        screen.createBold(remainingQueens[0].getName() + " chose to eliminate " + remainingQueens[0].lipstick.getName() + "<br> That means, your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(remainingQueens[0].lipstick.image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + remainingQueens[0].lipstick.getName() + ", condragulations! You are safe to slay another day!");
        }
        if (highLipstick2 == true && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0])) {
            highQueens.splice(highQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("ELIM ")
        }
        else if (highLipstick2 == true && goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
            highQueens.splice(highQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("CHOC ");
        }
        else if (fairLipstick2 == true && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0])) {
            fairQueens.splice(fairQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("ELIM")
        }
        else if (fairLipstick2 == true && goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
            fairQueens.splice(fairQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("CHOC");
        }
        if (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0]) {
        eliminatedCast.unshift(remainingQueens[0].lipstick);
        currentCast.splice(currentCast.indexOf(remainingQueens[0].lipstick), 1);
        }
        else if (goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
        ticketSave = true;
        goldenTicket[0].favoritism += 3;
        }
    }
    else if (bottomQueens[0] == ruvengeQueens[0].lipstick && remainingQueens[0].lipstickTwo == ruvengeQueens[0]) {
        screen.createImage(bottomQueens[0].image, "royalblue");
        screen.createBold(bottomQueens[0].getName() + ", you're a winner, baby.");
        if (ruvengeQueens[0].lipstick != remainingQueens[0].lipstick && highLipstick == true) {
            highQueens.splice(highQueens.indexOf(ruvengeQueens[0].lipstick), 1);
            bottomQueens[0].addToTrackRecord("BTM ")
        }
        else if (ruvengeQueens[0].lipstick != remainingQueens[0].lipstick && fairLipstick == true) {
            fairQueens.splice(fairQueens.indexOf(ruvengeQueens[0].lipstick), 1);
            bottomQueens[0].addToTrackRecord("BTM")
        }
        screen.createImage(bottomQueens[1].image, "cyan");
        screen.createBold(bottomQueens[1].getName() + ", please step at the back of the stage.");
        ruvengeQueens[0].addToTrackRecord("WIN ");
        screen.createHorizontalLine();
        screen.createBigText("That means...");
        screen.createImage(remainingQueens[0].image, "cyan");
        screen.createImage(remainingQueens[0].lipstickTwo.image, "yellow");
        screen.createBold(remainingQueens[0].getName() + " chose to bring back " + remainingQueens[0].lipstickTwo.getName());
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        }
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        screen.createImage(remainingQueens[0].image, "cyan");
        screen.createImage(remainingQueens[0].lipstick.image, "tomato");
        if (goldticket == false || goldticket == true && ticketSave == true) {
        screen.createBold(remainingQueens[0].getName() + " chose to eliminate " + remainingQueens[0].lipstick.getName());
        }
        else if (goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0]) {
        screen.createBold(remainingQueens[0].getName() + " chose to eliminate " + remainingQueens[0].lipstick.getName() + "<br> That means, your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(remainingQueens[0].lipstick.image, "brown");
        screen.createBold("IT'S CHOCOLATE! <br>" + remainingQueens[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away.");
        }
        else if (goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
        screen.createBold(remainingQueens[0].getName() + " chose to eliminate " + remainingQueens[0].lipstick.getName() + "<br> That means, your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(remainingQueens[0].lipstick.image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + remainingQueens[0].lipstick.getName() + ", condragulations! You are safe to slay another day!");
        }
        if (highLipstick2 == true && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0])) {
            highQueens.splice(highQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("ELIM ")
        }
        else if (highLipstick2 == true && goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
            highQueens.splice(highQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("CHOC ");
        }
        else if (fairLipstick2 == true && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0])) {
            fairQueens.splice(fairQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("ELIM")
        }
        else if (fairLipstick2 == true && goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
            fairQueens.splice(fairQueens.indexOf(remainingQueens[0].lipstick), 1);
            remainingQueens[0].lipstick.addToTrackRecord("CHOC");
        }
        if (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && remainingQueens[0].lipstick != goldenTicket[0]) {
        eliminatedCast.unshift(remainingQueens[0].lipstick);
        currentCast.splice(currentCast.indexOf(remainingQueens[0].lipstick), 1);
        }
        else if (goldticket == true && ticketSave == false && remainingQueens[0].lipstick == goldenTicket[0]) {
        ticketSave = true;
        goldenTicket[0].favoritism += 3;
        }
    }
    else if (bottomQueens[0] == ruvengeQueens[0]) {
        screen.createImage(bottomQueens[0].image, "royalblue");
        screen.createBold(bottomQueens[0].getName() + ", you're a winner, baby.<br> You are now officially back in the race.");
        screen.createImage(bottomQueens[1].image, "red");
        if (goldticket == false || goldticket == true && ticketSave == true) {
        screen.createBold("That means, " + bottomQueens[1].getName() + ", sashay away.");
        }
        else if (goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0]) {
        screen.createBold(bottomQueens[1].getName() + "<br> That means, your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(bottomQueens[1].image, "brown");
        screen.createBold("IT'S CHOCOLATE! <br>" + bottomQueens[1].getName() + ", you are and will always be an All Star. Now, sashay away.");
        }
        else if (goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        screen.createBold(bottomQueens[1].getName() + "<br> That means, your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(bottomQueens[1].image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + bottomQueens[1].getName() + ", condragulations! You are safe to slay another day!");
        }
        ruvengeQueens[0].addToTrackRecord("WIN");
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        }
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        if (highLipstick == true && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0])) {
            highQueens.splice(highQueens.indexOf(bottomQueens[1]), 1);
            bottomQueens[1].addToTrackRecord("ELIM ")
        }
        else if (highLipstick == true && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
            highQueens.splice(highQueens.indexOf(bottomQueens[1]), 1);
            bottomQueens[1].addToTrackRecord("CHOC ");
        }
        else if (fairLipstick == true && (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0])) {
            fairQueens.splice(fairQueens.indexOf(bottomQueens[1]), 1);
            bottomQueens[1].addToTrackRecord("ELIM")
        }
        else if (fairLipstick == true && goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
            fairQueens.splice(fairQueens.indexOf(bottomQueens[1]), 1);
            bottomQueens[1].addToTrackRecord("CHOC")
        }
        if (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && bottomQueens[1] != goldenTicket[0]) {
        eliminatedCast.unshift(bottomQueens[1]);
        currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
        }
        else if (goldticket == true && ticketSave == false && bottomQueens[1] == goldenTicket[0]) {
        ticketSave = true;
        goldenTicket[0].favoritism += 3;
        }
    }
    }
    for (let i = 0; i < highQueens.length; i++) {
        highQueens[i].addToTrackRecord("HIGH");
        }
    for (let i = 0; i < fairQueens.length; i++) {
        fairQueens[i].addToTrackRecord("FAIR");
        }
    if (ruvengeEpisode == true) {
        ruvengeUntucked = true;
        ruvengeEpisode = false;
        if (bringbackImmune == true) {
            currentCast.push(immuneQueen[0]);
            immuneQueen[0].addToTrackRecord("SAFE  ");
            bringbackImmune = false;
        }
        screen.createButton("Proceed", "newEpisode()");
    }
    else {
    ruvengeEpisode = false;
    screen.createButton("Proceed", "newEpisode()");
    }
}
function teamLipSync() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your lives! Good luck and don't fuck it up.");
    if (randomNumber(0, 100) <= 50)
        bottomQueens[0].lipsyncQueen = bottomQueens[0].QueenA;
    else
        bottomQueens[0].lipsyncQueen = bottomQueens[0].QueenB;
    if (randomNumber(0, 100) <= 50)
        bottomQueens[1].lipsyncQueen = bottomQueens[1].QueenA;
    else
        bottomQueens[1].lipsyncQueen = bottomQueens[1].QueenB;
    screen.createImage(bottomQueens[0].lipsyncQueen.image);
    screen.createImage(bottomQueens[1].lipsyncQueen.image);
    screen.createBold(`${bottomQueens[0].lipsyncQueen.getName()} and ${bottomQueens[1].lipsyncQueen.getName()} will be lip-syncing`);
    lsSong();
    bottomQueens[0].lipsyncQueen.getLipsync();
    bottomQueens[1].lipsyncQueen.getLipsync();
    bottomQueens.sort((a, b) => (a.lipsyncQueen.lipsyncScore - a.favoritism + a.unfavoritism) - (b.lipsyncQueen.lipsyncScore - b.favoritism + b.unfavoritism));
    screen.createHorizontalLine();
    screen.createImage(bottomQueens[0].lipsyncQueen.image, "pink");
    screen.createBold(bottomQueens[0].lipsyncQueen.getName() + ", shantay you stay.");
    screen.createImage(bottomQueens[1].lipsyncQueen.image, "red");
    screen.createBold(bottomQueens[1].lipsyncQueen.getName() + ", you will always be an All Star, now, sashay away...");
    if (bottomQueens[0].lipsyncQueen.getName() == bottomQueens[0].QueenA.getName()) {
        bottomQueens[0].QueenA.addToTrackRecord("BTM2 ");
        bottomQueens[0].QueenB.addToTrackRecord("BTM2");
    } else {
        bottomQueens[0].QueenA.addToTrackRecord("BTM2");
        bottomQueens[0].QueenB.addToTrackRecord("BTM2 ");
    }
    bottomQueens[0].addToTrackRecord("BTM2");
    bottomQueens[0].unfavoritism += 3;
    bottomQueens[0].ppe += 1;
    bottomQueens[0].QueenA.unfavoritism += 3;
    bottomQueens[0].QueenB.unfavoritism += 3;
    bottomQueens[0].QueenA.ppe += 1;
    bottomQueens[0].QueenB.ppe += 1;
    if (bottomQueens[1].lipsyncQueen.getName() == bottomQueens[1].QueenA.getName()) {
        bottomQueens[1].QueenA.addToTrackRecord("ELIM");
        bottomQueens[1].QueenB.addToTrackRecord("ELIM ");
    } else {
        bottomQueens[1].QueenA.addToTrackRecord("ELIM ");
        bottomQueens[1].QueenB.addToTrackRecord("ELIM");
    }
    bottomQueens[1].unfavoritism += 5;
    bottomQueens[1].QueenA.unfavoritism += 5;
    bottomQueens[1].QueenB.unfavoritism += 5;
    eliminatedCast.unshift(bottomQueens[1].QueenA);
    eliminatedCast.unshift(bottomQueens[1].QueenB);
    currentCast.splice(currentCast.indexOf(bottomQueens[1]), 1);
    if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else
        screen.createButton("Proceed", "newEpisode()");
}
function vsLipsync() {
    for (let i = 0; i < versusQueens.length; i++) {3
        versusQueens[i].getLipsync();
    }
    topQueens[0].lipstick.lipsyncScore += 3;
    versusQueens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let threeBots = false;
    let fourBots = false;
    let fiveBots = false;
    let sixBots = false;
    if (bottomQueens.length == 3) {
        threeBots = true;
    }
    else if (bottomQueens.length == 4) {
        fourBots = true;
    }
    else if (bottomQueens.length == 5) {
        fiveBots = true;
    }
    else if (bottomQueens.length == 6) {
        sixBots = true;
    }
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your fate! Good luck, and don't fuck it up.");
    lsSong();
    rolloverTip += 10;
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    if (versusQueens[0] == topQueens[0]) {
        screen.createImage(versusQueens[0].image, "darkblue");
        screen.createBold(versusQueens[0].getName() + ", you're a winner, baby.");
        versusQueens[0].addToTrackRecord("WIN");
        versusQueens[0].coinz += rolloverTip;
        rolloverTip = 0;
        if (splitpremiere == false) {
            immuneQueen = [];
        }
        versusQueens[0].favoritism += 2;
        immuneQueen.push(versusQueens[0]);
        if (goldticket == true && ticketSave == false && versusQueens[1] == goldenTicket[0]) {
            screen.createHorizontalLine();
            screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
            screen.createImage(versusQueens[1].image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + versusQueens[1].getName() + ", condragulations! You are safe to slay another day!");
            versusQueens[1].favoritism += 5;
            if (topQueens[0].lipstick == topQueens[1] || topQueens[0].lipstick == topQueens[2]) {
                topQueens[0].lipstick.addToTrackRecord("CHOC ");
            }
            else {
                topQueens[0].lipstick.addToTrackRecord("CHOC");
                topQueens[0].lipstick.ppe += 0;
            }
            ticketSave = true;
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
        }
        else if (goldticket == true && ticketSave == false && versusQueens[1] != goldenTicket[0]) {
            screen.createHorizontalLine();
            screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
            screen.createImage(versusQueens[1].image, "brown");
            screen.createBold("IT'S CHOCOLATE! <br>" + versusQueens[1].getName() + ", you are and will always be a Global Star. Now, sashay away.");
            if (topQueens[0].lipstick == topQueens[1] || topQueens[0].lipstick == topQueens[2]) {
                topQueens[0].lipstick.addToTrackRecord("ELIM ");
            }
            else {
                topQueens[0].lipstick.addToTrackRecord("ELIM");
                topQueens[0].lipstick.ppe += 0;
            }
            eliminatedCast.unshift(topQueens[0].lipstick);
            topQueens[0].lipstick.lastEpisode += episodeCount;
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(topQueens[0].lipstick), 1);
        }
        else {
            screen.createImage(versusQueens[1].image, "red");
            screen.createBold(versusQueens[1].getName() + ", you are and will always be a Global Star. Now, sashay away.");
            if (topQueens[0].lipstick == topQueens[1] || topQueens[0].lipstick == topQueens[2]) {
                topQueens[0].lipstick.addToTrackRecord("ELIM ");
            }
            else {
                topQueens[0].lipstick.addToTrackRecord("ELIM");
                topQueens[0].lipstick.ppe += 0;
            }
            eliminatedCast.unshift(topQueens[0].lipstick);
            topQueens[0].lipstick.lastEpisode += episodeCount;
            bottomQueens.splice(bottomQueens.indexOf(topQueens[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(topQueens[0].lipstick), 1);
        }
    }
    else {
        screen.createImage(versusQueens[0].image, "hotpink");
        screen.createBold(versusQueens[0].getName() + ", shantay, you stay.");
        versusQueens[0].favoritism += 2;
        versusQueens[0].lipsyncFave += 2;
        versusQueens[0].lipsyncScore -= 4;
        bottomQueens.splice(bottomQueens.indexOf(versusQueens[0]), 1);
        if (versusQueens[0] == topQueens [1] || versusQueens[0] == topQueens[2]) {
            if (threeBots == true) {
                versusQueens[0].addToTrackRecord("  BTM3  ");
            }
            else if (fourBots == true) {
                versusQueens[0].addToTrackRecord("  BTM4  ");
            }
            else if (fiveBots == true) {
                versusQueens[0].addToTrackRecord("  BTM5  ");
            }
            else if (sixBots == true) {
                versusQueens[0].addToTrackRecord("  BTM6  ");
            }
        }
        else {
            if (threeBots == true) {
                versusQueens[0].addToTrackRecord(" BTM3 ");
            }
            else if (fourBots == true) {
                versusQueens[0].addToTrackRecord(" BTM4 ");
            }
            else if (fiveBots == true) {
                versusQueens[0].addToTrackRecord(" BTM5 ");
            }
            else if (sixBots == true) {
                versusQueens[0].addToTrackRecord(" BTM6 ");
            }
        }
        screen.createImage(versusQueens[1].image, "cyan");
        screen.createBold(versusQueens[1].getName() + ", you are safe.");
        topQueens[0].addToTrackRecord("WIN ");
        if (splitpremiere == false) {
            immuneQueen = [];
        }
        screen.createHorizontalLine();
        screen.createBigText("That means...");
        if (goldticket == true && ticketSave == false && botChoice[0] == goldenTicket[0] && splitpremiere == false) {
            screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
            screen.createImage(botChoice[0].image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + botChoice[0].getName() + ", condragulations! You are safe to slay another day!");
            botChoice[0].favoritism += 5;
            if (botChoice[0] == topQueens[1] || botChoice[0] == topQueens[2]) {
                botChoice[0].addToTrackRecord("CHOC ");
            }
            else {
                botChoice[0].addToTrackRecord("CHOC");
                botChoice[0].ppe += 0;
            }
            ticketSave = true;
            bottomQueens.splice(bottomQueens.indexOf(botChoice[0]), 1);
        }
        else if (goldticket == true && ticketSave == false && botChoice[0] != goldenTicket[0] && splitpremiere == false) {
            screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
            screen.createImage(botChoice[0].image, "brown");
            screen.createBold("IT'S CHOCOLATE! <br>" + botChoice[0].getName() + ", you are and will always be a Global Star. Now, sashay away.");
            if (botChoice[0] == topQueens[1] || botChoice[0] == topQueens[2]) {
                botChoice[0].addToTrackRecord("ELIM ");
            }
            else {
                botChoice[0].addToTrackRecord("ELIM");
                botChoice[0].ppe += 0;
            }
            eliminatedCast.unshift(botChoice[0]);
            botChoice[0].lastEpisode += episodeCount;
            bottomQueens.splice(bottomQueens.indexOf(botChoice[0]), 1);
            currentCast.splice(currentCast.indexOf(botChoice[0]), 1);
        }
        else {
            screen.createImage(botChoice[0].image, "red");
            screen.createBold(botChoice[0].getName() + ", you are and will always be a Global Star. Now, sashay away.");
            if (botChoice[0] == topQueens[1] || botChoice[0] == topQueens[2]) {
                botChoice[0].addToTrackRecord("ELIM ");
            }
            else {
                botChoice[0].addToTrackRecord("ELIM");
                botChoice[0].ppe += 0;
            }
            eliminatedCast.unshift(botChoice[0]);
            botChoice[0].lastEpisode += episodeCount;
            bottomQueens.splice(bottomQueens.indexOf(botChoice[0]), 1);
            currentCast.splice(currentCast.indexOf(botChoice[0]), 1);
        }
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        if (threeBots == true) {
            bottomQueens[i].addToTrackRecord("BTM3");
            bottomQueens[i].ppe += 1;
            bottomQueens[i].unfavoritism += 4;
        }
        else if (fourBots == true) {
            if (bottomQueens[i] == topQueens[1] || bottomQueens[i] == topQueens[2]) {
                bottomQueens[i].addToTrackRecord("BTM4 ");
            }
            else {
                bottomQueens[i].addToTrackRecord("BTM4");
                bottomQueens[i].ppe += 1;
                bottomQueens[i].unfavoritism += 4;
            }
        }
        else if (fiveBots == true) {
            if (bottomQueens[i] == topQueens[1] || bottomQueens[i] == topQueens[2]) {
                bottomQueens[i].addToTrackRecord("BTM5 ");
            }
            else {
                bottomQueens[i].addToTrackRecord("BTM5");
                bottomQueens[i].ppe += 1;
                bottomQueens[i].unfavoritism += 4;
            }
        }
        else if (sixBots == true) {
            if (bottomQueens[i] == topQueens[1] || bottomQueens[i] == topQueens[2]) {
                bottomQueens[i].addToTrackRecord("BTM6 ");
            }
            else {
                bottomQueens[i].addToTrackRecord("BTM6");
                bottomQueens[i].ppe += 1;
                bottomQueens[i].unfavoritism += 4;
            }
        }
    }
    if (splitCastPremiere == true && splitCastDuration == true) {
        screen.createButton("Proceed", "splitCastEpisodes()");
    }
    else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && premiereCounter < 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (triplePremiere == true && premiereCounter <= 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if ((twinstwist || comedyRuvenge || groupsRuvenge) && currentCast.length == totalCastSize / 2 && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens), 1);
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else {
        ruvengeEpisode = false;
        screen.createButton("Proceed", "newEpisode()");
    }
}
function vsLegacy() {
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let threeBots = false;
    let fourBots = false;
    let fiveBots = false;
    let sixBots = false;
    if (bottomQueens.length == 3) {
        threeBots = true;
    }
    else if (bottomQueens.length == 4) {
        fourBots = true;
    }
    else if (bottomQueens.length == 5) {
        fiveBots = true;
    }
    else if (bottomQueens.length == 6) {
        sixBots = true;
    }
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your fates! Good luck, and don't fuck it up.");
    lsSong();
    rolloverTip += 10;
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    screen.createImage(top2[0].image, "darkblue");
    screen.createBold(top2[0].getName() + ", you're a winner, baby.");
    if (splitpremiere == false) {
        immuneQueen = [];
    }
    immuneQueen.push(top2[0]);
    top2[0].addToTrackRecord("WIN");
    top2[0].ppe += 5;
    top2[0].coinz += rolloverTip;
    rolloverTip = 0;
    top2[0].favoritism += 5;
    screen.createImage(top2[1].image, "cyan");
    screen.createBold(top2[1].getName() + ", you are safe.");
    top2[1].addToTrackRecord("WIN ");
    top2[1].ppe += 4;
    top2[1].favoritism += 3;
    screen.createHorizontalLine();
    screen.createBigText("That means...");
    if (goldticket == true && ticketSave == false && top2[0].lipstick == goldenTicket[0] && splitpremiere == false) {
        screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + top2[0].lipstick.getName() + ", condragulations! You are safe to slay another day!");
        top2[0].lipstick.favoritism += 5;
        top2[0].lipstick.addToTrackRecord("CHOC");
        top2[0].lipstick.ppe += 0;
        ticketSave = true;
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
    }
    else if (goldticket == true && ticketSave == false && top2[0].lipstick != goldenTicket[0] && splitpremiere == false) {
        screen.createBold("Your fate now rests at the hands of the Drag Gods. <br> You've been keeping your chocolate. Let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "brown");
        screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be a Global Star. Now, sashay away.");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        eliminatedCast.unshift(top2[0].lipstick);
        top2[0].lipstick.lastEpisode += episodeCount;
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
    }
    else {
        screen.createImage(top2[0].lipstick.image, "red");
        screen.createBold(top2[0].lipstick.getName() + ", you are and will always be a Global Star. Now, sashay away.");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        eliminatedCast.unshift(top2[0].lipstick);
        top2[0].lipstick.lastEpisode += episodeCount;
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        if (threeBots == true) {
            bottomQueens[i].addToTrackRecord("BTM3");
            bottomQueens[i].ppe += 1;
            bottomQueens[i].unfavoritism += 4;
        }
        else if (fourBots == true) {
            if (bottomQueens[i] == topQueens[1] || bottomQueens[i] == topQueens[2]) {
                bottomQueens[i].addToTrackRecord("BTM4 ");
            }
            else {
                bottomQueens[i].addToTrackRecord("BTM4");
                bottomQueens[i].ppe += 1;
                bottomQueens[i].unfavoritism += 4;
            }
        }
        else if (fiveBots == true) {
            if (bottomQueens[i] == topQueens[1] || bottomQueens[i] == topQueens[2]) {
                bottomQueens[i].addToTrackRecord("BTM5 ");
            }
            else {
                bottomQueens[i].addToTrackRecord("BTM5");
                bottomQueens[i].ppe += 1;
                bottomQueens[i].unfavoritism += 4;
            }
        }
        else if (sixBots == true) {
            if (bottomQueens[i] == topQueens[1] || bottomQueens[i] == topQueens[2]) {
                bottomQueens[i].addToTrackRecord("BTM6 ");
            }
            else {
                bottomQueens[i].addToTrackRecord("BTM6");
                bottomQueens[i].ppe += 1;
                bottomQueens[i].unfavoritism += 4;
            }
        }
    }
    if (splitCastPremiere == true && splitCastDuration == true) {
        screen.createButton("Proceed", "splitCastEpisodes()");
    }
    else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && premiereCounter < 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (triplePremiere == true && premiereCounter <= 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if ((twinstwist || comedyRuvenge || groupsRuvenge) && currentCast.length == totalCastSize / 2 && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens), 1);
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else {
        ruvengeEpisode = false;
        screen.createButton("Proceed", "newEpisode()");
    }
}
function asLipSync() {
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time...");
    screen.createBold("For you to lip-sync... for your legacy! Good luck, and don't fuck it up.");
    lsSong();
    screen.createHorizontalLine();
    screen.createBold("Ladies, I've made my decision...");
    if (top2[0].lipsyncScore == top2[1].lipsyncScore && top2[0].lipsyncScore > 7 && top2[1].lipsyncScore > 7 && currentCast.length > 7 && ruvengeEpisode == false && splitpremiere == false && vstheworld == false && eliminatedCast.length + 1 == currentCast.length) {
        screen.createImage(top2[0].image, "darkblue");
        screen.createImage(top2[1].image, "darkblue");
        screen.createBold("Condragulations, you're both winners baby!");
        top2[0].favoritism += 5;
        top2[1].favoritism += 5;
        top2[0].ppe += 5;
        top2[1].ppe += 5;
        top2[0].coinz += 5;
        top2[1].coinz += 5;
        top2[0].addToTrackRecord(" WIN");
        top2[1].addToTrackRecord(" WIN");
        screen.createHorizontalLine();
        assasintable.push(top2[0].getName() + " & " + top2[1].getName());
        assasintable.push(" ");
        if (top2[0].lipstick == top2[1].lipstick && (!goldticket || goldticket && ticketSave == true || goldticket && splitpremiere == true || goldticket && splitCastDuration == true)) {
            assasinlipstick.push(top2[0].lipstick.getName());
            assasinlipstick.push(" ");
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold(`${top2[0].lipstick.getName()}, you will always be an All Star, now, sashay away...`);
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            eliminatedCast.unshift(top2[0].lipstick);
            top2[0].lipstick.lastEpisode += episodeCount;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (top2[0].lipstick != top2[1].lipstick && (!goldticket || goldticket && ticketSave == true || goldticket && splitpremiere == true || goldticket && splitCastDuration == true)) {
            assasinlipstick.push(top2[0].lipstick.getName() + " & " + top2[1].lipstick.getName());
            assasinlipstick.push(" ");
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createImage(top2[1].lipstick.image, "red");
            screen.createBold(`${top2[0].lipstick.getName()}, ${top2[1].lipstick.getName()}, you will always be an All Star, now, sashay away...`);
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            top2[1].lipstick.addToTrackRecord("ELIM");
            top2[1].lipstick.ppe += 0;
            top2[1].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[1].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[1].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[1].lipstick), 1);
        }
        else if (top2[0].lipstick == top2[1].lipstick && goldticket && ticketSave == false && splitpremiere == false && splitCastDuration == false && top2[0].lipstick == goldenTicket[0]) {
            assasinlipstick.push(top2[0].lipstick.getName());
            assasinlipstick.push(" ");
            screen.createImage(top2[0].lipstick.image, "crimson");
            screen.createBold(top2[0].lipstick.getName() + ", now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            goldenTicket[0].addToTrackRecord("CHOC");
            goldenTicket[0].ppe += 0;
            ticketSave = true;
            bottomQueens.splice(bottomQueens.indexOf(goldenTicket[0]), 1);
        }
        else if (top2[0].lipstick == top2[1].lipstick && goldticket && ticketSave == false && splitpremiere == false && splitCastDuration == false && top2[0].lipstick != goldenTicket[0]) {
            assasinlipstick.push(top2[0].lipstick.getName());
            assasinlipstick.push(" ");
            screen.createImage(top2[0].lipstick.image, "crimson");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (top2[0].lipstick != top2[1].lipstick && goldticket && ticketSave == false && splitpremiere == false && splitCastDuration == false && (top2[0].lipstick == goldenTicket[0] || top2[1].lipstick) == goldenTicket[0]) {
            assasinlipstick.push(top2[0].lipstick.getName() + " & " + top2[1].lipstick.getName());
            assasinlipstick.push(" ");
            let lipstickChoice = [];
            lipstickChoice.push(top2[0].lipstick);
            lipstickChoice.push(top2[1].lipstick);
            screen.createImage(top2[0].lipstick.image, "crimson");
            screen.createImage(top2[1].lipstick.image, "crimson");
            screen.createBold(top2[0].lipstick.getName() + ", now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(goldenTicket[0].image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            goldenTicket[0].addToTrackRecord("CHOC");
            goldenTicket[0].ppe += 0;
            ticketSave = true;
            bottomQueens.splice(bottomQueens.indexOf(goldenTicket[0]), 1);
            lipstickChoice.splice(lipstickChoice.indexOf(goldenTicket[0]), 1);
            screen.createImage(lipstickChoice[0].image, "red");
            screen.createBold(lipstickChoice[0].getName() + ", you are and will always be an All Star, now, sashay away...");
            lipstickChoice[0].addToTrackRecord("ELIM");
            lipstickChoice[0].ppe += 0;
            lipstickChoice[0].lastEpisode += episodeCount;
            eliminatedCast.unshift(lipstickChoice[0]);
            bottomQueens.splice(bottomQueens.indexOf(lipstickChoice[0]), 1);
            currentCast.splice(currentCast.indexOf(lipstickChoice[0]), 1);
        }
        else if (top2[0].lipstick != top2[1].lipstick && goldticket && ticketSave == false && splitpremiere == false  && splitCastDuration == false && top2[0].lipstick != goldenTicket[0] && top2[1].lipstick != goldenTicket[0]) {
            assasinlipstick.push(top2[0].lipstick.getName() + " & " + top2[1].lipstick.getName());
            assasinlipstick.push(" ");
            screen.createImage(top2[0].lipstick.image, "crimson");
            screen.createImage(top2[1].lipstick.image, "crimson");
            screen.createBold(top2[0].lipstick.getName() + ", " + top2[1].lipstick.getName() + ", now, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createImage(top2[1].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", " + top2[1].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            top2[1].lipstick.addToTrackRecord("ELIM");
            top2[1].lipstick.ppe += 0;
            top2[1].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[1].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[1].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[1].lipstick), 1);
        }
    }
    else if (ruvengeEpisode == false) {
        if (!goldticket || goldticket && ticketSave == true || goldticket && splitpremiere == true || goldticket && splitCastDuration == true) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += 10;
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "red");
        screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        top2[0].lipstick.lastEpisode += episodeCount;
        eliminatedCast.unshift(top2[0].lipstick);
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0] && splitpremiere == false && splitCastDuration == false) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += 10;
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "crimson");
        screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        ticketSave = true;
        bottomQueens.splice(bottomQueens.indexOf(goldenTicket[0]), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0] && splitpremiere == false && splitCastDuration == false) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += 10;
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "crimson");
        screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "darkred");
        screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        top2[0].lipstick.lastEpisode += episodeCount;
        eliminatedCast.unshift(top2[0].lipstick);
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
    }
    else if (ruvengeEpisode == true) {
        if (top2[0] == ruvengeQueens[0]) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += 10;
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby! <br> You are officially back in the race!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        screen.createHorizontalLine();
        if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            ticketSave = true;
            top2[0].lipstick.addToTrackRecord("CHOC");
            top2[0].lipstick.ppe += 0;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        }
        else {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.lastEpisode += episodeCount;
            top2[0].lipstick.ppe += 0;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            }
        }
        else if (top2[0] == remainingQueens[0] && top2[0].lipstickTwo == top2[1]) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += 10;
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", please step at the back of the stage.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstickTwo.image, "hotpink");
        screen.createBold(top2[0].lipstickTwo.getName() + ", you are officially back in the race!");
        screen.createImage(top2[0].lipstick.image, "red");
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0]) {
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0]) {
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            ticketSave = true;
            top2[0].lipstick.addToTrackRecord("CHOC");
            top2[0].lipstick.ppe += 0;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        }
        else {
            screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            }
            }
        else if (top2[0] == remainingQueens[0] && top2[0].lipstickTwo != top2[1]) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += 10;
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        top2[1].episodesOn -= 1;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", please step at the back of the stage.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstickTwo.image, "hotpink");
        screen.createBold(top2[0].lipstickTwo.getName() + ", you are officially back in the race!")
        top2[0].lipstickTwo.addToTrackRecord("RTRN");
        outRuvenge.splice(outRuvenge.indexOf(top2[0].lipstickTwo), 1);
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        }
        let loserRuvenge = top2[1];
        outRuvenge.push(loserRuvenge);
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        top2[1].episodesOn += 1;
        screen.createImage(top2[0].lipstick.image, "red");
        if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0]) {
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0]) {
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            ticketSave = true;
            top2[0].lipstick.addToTrackRecord("CHOC");
            top2[0].lipstick.ppe += 0;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        }
        else {
            screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            }
        }
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        if (bottomQueens.length == 3)
            bottomQueens[i].addToTrackRecord("BTM4");
        else if (bottomQueens.length == 2)
            bottomQueens[i].addToTrackRecord("BTM3");
        else
            bottomQueens[i].addToTrackRecord("BTM2");
        bottomQueens[i].unfavoritism += 3;
        bottomQueens[i].ppe += 1;
    }
    if (splitCastPremiere == true && splitCastDuration == true) {
        screen.createButton("Proceed", "splitCastEpisodes()");
    }
    else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && premiereCounter < 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (triplePremiere == true && premiereCounter <= 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else if ((twinstwist || comedyRuvenge || groupsRuvenge) && (currentCast.length == totalCastSize / 2 || eliminatedCast.length + 1 == currentCast.length) && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens), 1);
      }
      if (currentCast.length % 2 !== 0) {
          immuneQueen.push(top2[0]);
          currentCast.splice(currentCast.indexOf(immuneQueen[0]), 1);
          remainingQueens.splice(remainingQueens.indexOf(immuneQueen[0]), 1);
          bringbackImmune = true;
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (ruvengeEpisode == true) {
        ruvengeUntucked = true;
        ruvengeEpisode = false;
        if (bringbackImmune == true) {
            currentCast.push(immuneQueen[0]);
            immuneQueen[0].addToTrackRecord("SAFE  ");
            bringbackImmune = false;
        }
        screen.createButton("Proceed", "newEpisode()");
    }
    else {
        screen.createButton("Proceed", "newEpisode()");
        ruvengeEpisode = false;
    }
}
let assasintable = [];
let assasinlipstick = [];
function lsaLipSync() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("It's time to ruveal...");
    for (let i = 0; i < currentCast.length; i++) {
        allQueens.splice(allQueens.indexOf(currentCast[i]), 1);
    }
    let queenWin = [];
    queenWin.push(top2[0]);
    let assassin = allQueens[randomNumber(0, allQueens.length - 1)];
    bottomQueens.sort((a, b) => b.votes - a.votes);
        if (bottomQueens[0].votes == bottomQueens[1].votes) {
        assassin.lipstick = top2[0].lipstick;
        }
        else {
        assassin.lipstick = bottomQueens[0];
        }
    top2.push(assassin);
    screen.createImage(assassin.image, "royalblue");
    screen.createBold("The lip-sync assassin is... " + assassin.getName() + "!");
    screen.createParagraph("Now, it's time for you to lip-sync... for your legacy!");
    lsSong();
    rolloverTip += 10;
    screen.createHorizontalLine();
    for (let i = 0; i < top2.length; i++) {
        top2[i].getASLipsync();
    }
    assassin.lipsyncScore += 1;
    top2.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    if (ruvengeEpisode == false && !goldticket) {
    screen.createImage(top2[0].image, "darkblue");
    screen.createBold(top2[0].getName() + ", you're a winner baby!");
        if (top2[0] == assassin) {
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you're safe.");
        top2[1].addToTrackRecord("WIN ");
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
    }
        else {
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", thanks for participating.");
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += rolloverTip;
        rolloverTip = 0;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
    }
    screen.createHorizontalLine();
    screen.createImage(top2[0].lipstick.image, "red");
    screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
    top2[0].lipstick.addToTrackRecord("ELIM");
    top2[0].lipstick.ppe += 0;
    top2[0].lipstick.lastEpisode += episodeCount;
    eliminatedCast.unshift(top2[0].lipstick);
    bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
    currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
    }
    else if (ruvengeEpisode == true) {
        if (top2[0] == ruvengeQueens[0]) {
        screen.createImage(top2[0].image, "darkblue");
        screen.createBold(top2[0].getName() + ", you're a winner baby! <br> You are now officially back in the race!");
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", thanks for participating.");
        top2[0].addToTrackRecord("WIN");
        top2[0].favoritism += 5;
        top2[0].ppe += 5;
        top2[0].coinz += rolloverTip;
        rolloverTip = 0;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        remainingQueens[0].addToTrackRecord("WIN");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        screen.createHorizontalLine();
        if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            ticketSave = true;
            top2[0].lipstick.addToTrackRecord("CHOC");
            top2[0].lipstick.ppe += 0;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        }
        else {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            }
        }
        else if (top2[0] == assassin && remainingQueens[0].lipstick == top2[1]) {
        screen.createImage(top2[0].image, "darkblue");
        screen.createBold(top2[0].getName() + ", you're a winner baby!");
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", please step at the back of the stage.");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        remainingQueens[0].addToTrackRecord("WIN ");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        screen.createHorizontalLine();
        screen.createImage(remainingQueens[0].lipstick.image, "gold");
        screen.createBold(remainingQueens[0].lipstick.getName() + ", you are officially back in the race!");
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            ticketSave = true;
            top2[0].lipstick.addToTrackRecord("CHOC");
            top2[0].lipstick.ppe += 0;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        }
        else {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            }
        }
        else if (top2[0] == assassin && remainingQueens[0].lipstick != top2[1]) {
        screen.createImage(top2[0].image, "darkblue");
        screen.createBold(top2[0].getName() + ", you're a winner baby!");
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", please step at the back of the stage.");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        top2[1].episodesOn -= 1;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        remainingQueens[0].addToTrackRecord("WIN ");
        remainingQueens[0].favoritism += 5;
        remainingQueens[0].ppe += 5;
        screen.createHorizontalLine();
        screen.createImage(remainingQueens[0].lipstick.image, "gold");
        screen.createBold(remainingQueens[0].lipstick.getName() + ", you are officially back in the race!")
        remainingQueens[0].lipstick.addToTrackRecord("RTRN");
        outRuvenge.splice(outRuvenge.indexOf(remainingQueens[0].lipstick), 1);
        for (let i = 0; i < outRuvenge.length; i++) {
        outRuvenge[i].addToTrackRecord("OUT ");
        }
        let loserRuvenge = top2[1];
        outRuvenge.push(loserRuvenge);
        outRuvenge.sort((a, b) => (a.episodesOn - b.episodesOn));
        for (let i = 0; i < outRuvenge.length; i++) {
        eliminatedCast.unshift(outRuvenge[i]);
        currentCast.splice(currentCast.indexOf(outRuvenge[i]), 1);
        }
        top2[1].episodesOn += 1;
        if (goldticket && ticketSave == false && top2[0].lipstick != goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "darkred");
            screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0]) {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
            screen.createImage(top2[0].lipstick.image, "gold");
            screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
            ticketSave = true;
            top2[0].lipstick.addToTrackRecord("CHOC");
            top2[0].lipstick.ppe += 0;
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        }
        else {
            screen.createImage(top2[0].lipstick.image, "red");
            screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
            top2[0].lipstick.addToTrackRecord("ELIM");
            top2[0].lipstick.ppe += 0;
            top2[0].lipstick.lastEpisode += episodeCount;
            eliminatedCast.unshift(top2[0].lipstick);
            bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
            currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
            }
        }
    }
    else if (goldticket == true) {
        if (!goldticket || goldticket && ticketSave == true && top2[0] == assassin || goldticket && (splitpremiere || splitCastDuration) == true && top2[0] == assassin) {
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "red");
        screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        top2[0].lipstick.lastEpisode += episodeCount;
        eliminatedCast.unshift(top2[0].lipstick);
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (!goldticket || goldticket && ticketSave == true && top2[0] != assassin || goldticket && (splitpremiere || splitCastDuration) == true && top2[0] != assassin) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += rolloverTip;
        rolloverTip = 0;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", thanks for participating.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "red");
        screen.createBold(top2[0].lipstick.getName() + ", you will always be an All Star, now, sashay away...");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        top2[0].lipstick.lastEpisode += episodeCount;
        eliminatedCast.unshift(top2[0].lipstick);
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0] && splitpremiere == false && splitCastDuration == false && top2[0] == assassin) {
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "crimson");
        screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        ticketSave = true;
        bottomQueens.splice(bottomQueens.indexOf(goldenTicket[0]), 1);
        }
        else if (goldticket && ticketSave == false && top2[0].lipstick == goldenTicket[0] && splitpremiere == false && splitCastDuration == false && top2[0] != assassin) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += rolloverTip;
        rolloverTip = 0;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", thanks for participating.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "crimson");
        screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "gold");
        screen.createBold("IT'S GOLDEN! <br>" + goldenTicket[0].getName() + ", condragulations, you're safe to slay another day.");
        goldenTicket[0].addToTrackRecord("CHOC");
        goldenTicket[0].ppe += 0;
        ticketSave = true;
        bottomQueens.splice(bottomQueens.indexOf(goldenTicket[0]), 1);
        }
        else if (goldticket&& ticketSave == false && top2[0].lipstick != goldenTicket[0] && splitpremiere == false && splitCastDuration == false && top2[0] == assassin) {
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        top2[1].addToTrackRecord("WIN ");
        top2[1].favoritism += 5;
        top2[1].ppe += 5;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", you are safe.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "crimson");
        screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "darkred");
        screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        top2[0].lipstick.lastEpisode += episodeCount;
        eliminatedCast.unshift(top2[0].lipstick);
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
        else if (goldticket&& ticketSave == false && top2[0].lipstick != goldenTicket[0] && splitpremiere == false && splitCastDuration == false && top2[0] != assassin) {
        top2[0].favoritism += 5;
        top2[0].addToTrackRecord("WIN");
        top2[0].ppe += 5;
        top2[0].coinz += rolloverTip;
        rolloverTip = 0;
        assasintable.push(top2[0].getName());
        assasinlipstick.push(top2[0].lipstick.getName());
        assasintable.push(top2[1].getName());
        assasinlipstick.push(top2[1].lipstick.getName());
        screen.createImage(top2[0].image, "royalblue");
        screen.createBold(top2[0].getName() + ", you're a winner, baby!");
        screen.createImage(top2[1].image, "cyan");
        screen.createParagraph(top2[1].getName() + ", thanks for participating.");
        screen.createHorizontalLine();
        screen.createImage(top2[0].lipstick.image, "crimson");
        screen.createBold("That means, your fate rests at the hands of the Drag Gods. <br> You've been keeping your chocolate, let's see what you got.");
        screen.createImage(top2[0].lipstick.image, "darkred");
        screen.createBold("IT'S CHOCOLATE! <br>" + top2[0].lipstick.getName() + ", you are and will always be an All Star. Now, sashay away...");
        top2[0].lipstick.addToTrackRecord("ELIM");
        top2[0].lipstick.ppe += 0;
        top2[0].lipstick.lastEpisode += episodeCount;
        eliminatedCast.unshift(top2[0].lipstick);
        bottomQueens.splice(bottomQueens.indexOf(top2[0].lipstick), 1);
        currentCast.splice(currentCast.indexOf(top2[0].lipstick), 1);
        }
    }
    for (let i = 0; i < bottomQueens.length; i++) {
        if (bottomQueens.length == 4) {
            bottomQueens[i].addToTrackRecord("BTM5");
        bottomQueens[i].unfavoritism += 1;
        bottomQueens[i].ppe += 2;
        bottomQueens[i].votes = 0;
        }
        else if (bottomQueens.length == 3) {
            bottomQueens[i].addToTrackRecord("BTM4");
        bottomQueens[i].unfavoritism += 1;
        bottomQueens[i].ppe += 2;
        bottomQueens[i].votes = 0;
        }
        else if (bottomQueens.length == 2) {
            bottomQueens[i].addToTrackRecord("BTM3");
        bottomQueens[i].unfavoritism += 1;
        bottomQueens[i].ppe += 1;
        bottomQueens[i].votes = 0;
        }
        else {
        bottomQueens[i].addToTrackRecord("BTM2");
        bottomQueens[i].unfavoritism += 1;
        bottomQueens[i].ppe += 1;
        bottomQueens[i].votes = 0;
        }
    }
    if (splitCastPremiere == true && splitCastDuration == true) {
        screen.createButton("Proceed", "splitCastEpisodes()");
    }
    else if ((s6Premiere || s12Premiere || porkchopPremiere || s14Premiere || porkelimPremiere) == true && premiereCounter < 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (triplePremiere == true && premiereCounter <= 3)
        screen.createButton("Proceed", "doublePremiere()");
    else if (CheckForReturning() == true)
        screen.createButton("Proceed", "returningQueenScreen()");
    else if ((twinstwist || comedyRuvenge || groupsRuvenge) && (currentCast.length == totalCastSize / 2 || eliminatedCast.length + 1 == currentCast.length) && ruvenge == false) {
      ruvengeQueens = [...eliminatedCast];
      remainingQueens = [...currentCast];
      for (let i = 0; i < ruvengeQueens.length; i++) {
      currentCast.push(ruvengeQueens[i]);
      eliminatedCast.splice(eliminatedCast.indexOf(ruvengeQueens), 1);
      }
      if (currentCast.length % 2 !== 0) {
          immuneQueen.push(queenWin[0]);
          currentCast.splice(currentCast.indexOf(immuneQueen[0]), 1);
          remainingQueens.splice(remainingQueens.indexOf(immuneQueen[0]), 1);
          bringbackImmune = true;
    }
      ruvenge = true;
      screen.createButton("Proceed", "newEpisode()");
    }
    else if (ruvengeEpisode == true) {
        ruvengeUntucked = true;
        ruvengeEpisode = false;
        if (bringbackImmune == true) {
            currentCast.push(immuneQueen[0]);
            immuneQueen[0].addToTrackRecord("SAFE  ");
            bringbackImmune = false;
        }
        screen.createButton("Proceed", "newEpisode()");
    }
    else {
        screen.createButton("Proceed", "newEpisode()");
        ruvengeEpisode = false;
    }
    lsaQueen.push(assassin);
    allQueens.splice(allQueens.indexOf(assassin), 1);
}
class Queen {
    constructor(name, acting, comedy, vocal, dance, lyrical, design, improv, runway, lipsync, image = "noimage") {
        this.trackRecord = [];
        this.runwayScore = 0;
        this.lipsyncScore = 0;
        this.performanceScore = 0;
        this.finaleScore = 0;
        this.winCount = 0;
        this.favoritism = 0;
        this.unfavoritism = 0;
        this.ppe = 0;
        this.coinz = 0;
        this.starpoints = 0;
        this.episodesOn = 0;
        this.lastEpisode = 0;
        this.lipsyncFave = 0;
        this.lipsyncRound = 0;
        this.votes = 0;
        this.withdraw = 0;
        this.krID = 0;
        this.namID = 0;
        this.euID = 0;
        this.phID = 0;
        this.ooID = 0;
        this._name = name;
        this._actingStat = acting;
        this._comedyStat = comedy;
        this._vocalStat = vocal;
        this._danceStat = dance;
        this._lyricalStat = lyrical;
        this._designStat = design;
        this._improvStat = improv;
        this._runwayStat = runway;
        this._lipsyncStat = lipsync;
        if (image == "noimage")
            this.image = "image/queens/noimage.jpg";
        else
            this.image = "image/queens/" + image + ".webp";
    }
    _calculateScores(min, max, stat = 0) {
        let score = randomNumber(min, max);
        return score - stat;
    }
    getName() {
        return this._name;
    }
    getLipSyncStat() {
        return this._lipsyncStat;
    }
    getActing() {
        this.performanceScore = this._calculateScores(15, 35, this._actingStat);
    }
    getComedy() {
        this.performanceScore = this._calculateScores(15, 35, this._comedyStat);
    }
    getLive() {
        this.performanceScore = this._calculateScores(15, 35, this._vocalStat);
    }
    getDance() {
        this.performanceScore = this._calculateScores(15, 35, this._danceStat);
    }
    getGroups() {
        this.performanceScore = this._calculateScores(15, 35, this._lyricalStat);
    }
    getDesign() {
        this.performanceScore = this._calculateScores(15, 35, this._designStat);
    }
    getImprov() {
        this.performanceScore = this._calculateScores(15, 35, this._improvStat);
    }
    //special 'gets':
    getSnatch() {
        this.performanceScore = this._calculateScores(15, 35, (this._improvStat + this._comedyStat) / 2);
    }
    getRucreate() {
        this.performanceScore = this._calculateScores(15, 35, (this._designStat + this._comedyStat) / 2);
    }
    getRusical() {
        this.performanceScore = this._calculateScores(15, 35, (this._danceStat + this._lipsyncStat + this._vocalStat) / 3);
    }
    getPageant() {
        this.performanceScore = this._calculateScores(15, 35, (this._runwayStat + this._actingStat) / 2);
    }
    getDecor() {
        this.performanceScore = this._calculateScores(15, 35, (this._actingStat + this._improvStat + this._lyricalStat) / 3);
    }
    getBall() {
        this.performanceScore = this._calculateScores(15, 35, (this._designStat + this._runwayStat) / 2);
    }
    getMakeover() {
        this.performanceScore = this._calculateScores(15, 35, (this._designStat + this._danceStat) / 2);
    }
    getRumix() {
        this.performanceScore = this._calculateScores(15, 35, (this._danceStat + this._lyricalStat) / 2);
    }
    getTalentShow() {
        this.performanceScore = this._calculateScores(15, 35, (this._actingStat + this._vocalStat + this._danceStat + this._designStat + this._improvStat + this._lipsyncStat + this._comedyStat) / 7);
    }
    getShowdown() {
        this.performanceScore = this._calculateScores(15, 35, (this._actingStat + this._vocalStat + this._danceStat + this._lipsyncStat + this._comedyStat + this.favoritism - this.unfavoritism) / 6);
    }
    getFinale() {
        this.finaleScore = this.favoritism - this.unfavoritism;
    }
    getRunway() {
        this.runwayScore = this._calculateScores(12, 35, this._runwayStat);
    }
    getLipsync() {
        this.lipsyncScore = this._calculateScores(this._lipsyncStat - 4, this._lipsyncStat, this.unfavoritism - (this.favoritism / 2));
    }
    getASLipsync() {
        this.lipsyncScore = this._calculateScores(0, this._lipsyncStat);
    }
    addToTrackRecord(placement) {
        this.trackRecord.push(placement);
    }
}
//QUEENS:
//SEASON 1:
let choerry = new Queen("Choerry", 9, 10, 9, 10, 9, 11, 10, 12, 12, "Choerry");
let chuu = new Queen("Chuu", 9, 13, 15, 10, 9, 12, 13, 12, 11, "Chuu");
let gowon = new Queen("Gowon", 8, 9, 8, 11, 8, 12, 10, 13, 10, "Gowon");
let haseul = new Queen("Haseul", 10, 9, 14, 8, 11, 12, 11, 13, 10, "Haseul");
let heejin = new Queen("Heejin", 12, 8, 11, 14, 10, 14, 8, 13, 13, "Heejin");
let hyunjin = new Queen("Hyunjin", 9, 13, 10, 9, 8, 11, 13, 14, 9, "Hyunjin");
let jinsoul = new Queen("JinSoul", 8, 9, 13, 10, 9, 9, 9, 12, 11, "JinSoul");
let kimlip = new Queen("Kim Lip", 9, 7, 12, 13, 11, 9, 8, 13, 11, "KimLip");
let oliviahye = new Queen("Olivia Hye", 8, 11, 8, 12, 8, 12, 11, 13, 12, "OliviaHye");
let vivi = new Queen("ViVi", 10, 9, 8, 8, 8, 13, 9, 14, 8, "ViVi");
let yeojin = new Queen("Yeojin" , 9, 14, 9, 8, 11, 10, 13, 13, 10, "Yeojin");
let yves = new Queen("Yves" , 10, 12, 10, 15, 8, 9, 12, 12, 14, "Yves");

let akashia = new Queen("Akashia", 3, 2, 7, 3, 2, 7, 12, "Akashia");
let bebe = new Queen("BeBe Zahara Benet", 7, 7, 7, 10, 7, 10, 9, "BeBe");
let jade = new Queen("Jade Sotomeyer", 3, 3, 6, 7, 3, 7, 7, "Jade");
let ninaf = new Queen("Nina Flowers", 4, 4, 5, 11, 3, 10, 4, "NinaFlowers");
let ongina = new Queen("Ongina", 10, 7, 7, 9, 10, 8, 8, "Ongina");
let rebecca = new Queen("Rebecca Glasscock", 3, 3, 6, 4, 2, 6, 5, "Rebecca");
let shannel = new Queen("Shannel", 5, 5, 5, 9, 4, 9, 7, "Shannel");
let tammie = new Queen("Tammie Brown", 10, 8, 5, 7, 8, 7, 6, "Tammie");
let victoria = new Queen("Victoria 'Porkchop' Parker", 10, 8, 4, 3, 9, 5, 4, "Victoria");
let us_season1 = [choerry, chuu, gowon, haseul, heejin, hyunjin, jinsoul, kimlip, oliviahye, vivi, yeojin, yves];
//SEASON 2:
let dino =  new Queen("Dino", 8, 10, 9, 13, 8, 9, 9, 12, 12, "Dino");
let dk = new Queen("DK", 14, 14, 15, 9, 9, 10, 13, 11, 10, "DK");
let hoshi = new Queen("Hoshi", 9, 14, 11, 15, 13, 10, 10, 13, 15, "Hoshi");
let jeonghan = new Queen("Jeonghan", 10, 13, 12, 10, 8, 12, 13, 13, 11, "Jeonghan");
let joshua = new Queen("Joshua", 8, 9, 12, 10, 9, 10, 9, 12, 9, "Joshua");
let jun = new Queen("Jun", 12, 11, 8, 14, 11, 13, 9, 13, 14, "Jun");
let mingyu = new Queen("Mingyu", 10, 11, 8, 12, 13, 8, 12, 12, 11, "Mingyu");
let scoups = new Queen("S.Coups", 9, 9, 8, 11, 14, 9, 12, 12, 10, "S.Coups");
let seungkwan = new Queen("Seungkwan", 10, 15, 14, 8, 11, 9, 14, 10, 12, "Seungkwan");
let the8 = new Queen("The8", 11, 12, 10, 14, 12, 15, 10, 15, 14, "The8");
let vernon = new Queen("Vernon", 12, 11, 8, 10, 13, 9, 9, 11, 9, "Vernon");
let wonwoo = new Queen("Wonwoo", 13, 12, 9, 11, 13, 12, 11, 12, 12, "Wonwoo");
let woozi = new Queen("Woozi", 8, 13, 13, 9, 15, 10, 12, 13, 9, "Woozi");

let jessica = new Queen("Jessica Wild", 8, 9, 7, 7, 8, 9, 9, "Jessica");
let jujubee = new Queen("Jujubee", 9, 10, 8, 6, 10, 6, 15, "Jujubee");
let morgan = new Queen("Morgan McMichaels", 6, 6, 8, 8, 3, 10, 9, "Morgan");
let mystique = new Queen("Mystique Summers Madison", 4, 6, 3, 3, 3, 6, 6, "Mystique");
let nicole = new Queen("Nicole Paige Brooks", 4, 4, 6, 6, 4, 7, 7, "Nicole");
let pandora = new Queen("Pandora Boxx", 9, 11, 7, 6, 10, 7, 9, "Pandora");
let raven = new Queen("Raven", 5, 8, 9, 10, 5, 8, 10, "Raven");
let sahara = new Queen("Sahara Davenport", 9, 7, 10, 4, 6, 7, 11, "Sahara");
let shangela = new Queen("Shangela", 10, 11, 7, 2, 10, 6, 9, "Shangela");
let sonique = new Queen("Kylie Sonique Love", 8, 7, 12, 10, 6, 9, 8, "Kylie");
let tatianna = new Queen("Tatianna", 8, 10, 7, 8, 10, 8, 10, "Tatianna");
let tyra = new Queen("Tyra Sanchez", 9, 4, 7, 11, 3, 9, 10, "Tyra");
let us_season2 = [dino, dk, hoshi, jeonghan, joshua, jun, mingyu, scoups, seungkwan, the8, vernon, wonwoo, woozi];
//SEASON 3:
let chaeyoung = new Queen("Chaeyoung", 8, 14, 10, 15, 8, 10, 12, 11, 13, "Chaeyoung");
let gyuri = new Queen("Gyuri", 14, 11, 12, 10, 8, 9, 13, 13, 10, "Gyuri");
let hayoung = new Queen("Hayoung", 7, 8, 14, 15, 14, 11, 10, 12, 13, "Hayoung");
let jiheon = new Queen("Jiheon", 11, 14, 8, 11, 9, 12, 14, 14, 12, "Jiheon");
let jisun = new Queen("Jisun", 9, 7, 8, 13, 8, 14, 9, 14, 11, "Jisun");
let jiwon = new Queen("Jiwon", 8, 11, 15, 9, 15, 10, 13, 11, 12, "Jiwon");
let nagyung = new Queen("Nagyung", 10, 11, 10, 13, 11, 14, 11, 14, 11, "Nagyung");
let saerom = new Queen("Saerom", 12, 10, 8, 14, 10, 13, 12, 14, 13, "Saerom");
let seoyeon = new Queen("Seoyeon", 9, 13, 9, 12, 13, 11, 11, 13, 11, "Seoyeon");

let alexis = new Queen("Alexis Mateo", 10, 11, 8, 6, 9, 7, 12, "Alexis");
let carmen = new Queen("Carmen Carrera", 3, 2, 6, 4, 2, 5, 8, "Carmen");
let delta = new Queen("Delta Work", 8, 7, 5, 5, 5, 7, 9, "Delta");
let india = new Queen("India Ferrah", 6, 4, 8, 8, 3, 10, 7, "India");
let manila = new Queen("Manila Luzon", 10, 9, 8, 11, 9, 10, 11, "Manila");
let mariah = new Queen("Mariah", 8, 5, 6, 8, 5, 9, 7, "Mariah");
let mimi = new Queen("Mimi Imfurst", 10, 8, 6, 9, 9, 8, 7, "Mimi");
let phoenix = new Queen("Phoenix", 3, 3, 6, 5, 3, 5, 4, "Phoenix");
let raja = new Queen("Raja", 9, 9, 7, 13, 9, 10, 11, "Raja");
let stacey = new Queen("Stacy Layne Matthews", 6, 10, 5, 4, 9, 5, 9, "Stacy");
let venus = new Queen("Venus D-Lite", 4, 5, 8, 2, 3, 5, 2, "Venus");
let yara = new Queen("Yara Sofia", 9, 10, 7, 10, 5, 10, 9, "Yara");
let us_season3 = [chaeyoung, gyuri, hayoung, jiheon, jisun, jiwon, nagyung, saerom, seoyeon];
//SEASON 4:
let chani = new Queen("Chani", 15, 10, 9, 15, 12, 9, 10, 13, 14, "Chani");
let dawon = new Queen("Dawon", 13, 14, 12, 11, 10, 8, 12, 11, 13, "Dawon");
let hwiyoung = new Queen("Hwiyoung", 12, 12, 8, 12, 14, 8, 11, 11, 12, "Hwiyoung");
let inseong = new Queen("Inseong", 13, 13, 15, 11, 12, 12, 13, 12, 12, "Inseong");
let jaeyoon = new Queen("Jaeyoon", 12, 14, 12, 12, 10, 10, 11, 11, 13, "Jaeyoon");
let rowoon = new Queen("Rowoon",  14, 12, 11, 10, 9, 9, 10, 14, 12, "Rowoon");
let yootaeyang = new Queen("Yoo Taeyang", 11, 8, 12, 15, 10, 12, 9, 15, 15, "YooTaeyang");
let youngbin = new Queen("Youngbin", 12, 8, 8, 12, 13, 8, 12, 11, 12, "Youngbin");
let zuho = new Queen("Zuho", 14, 12, 8, 12, 15, 10, 10, 12, 13, "Zuho");

let alisa = new Queen("Alisa Summers", 4, 4, 6, 2, 3, 5, 3, "Alisa");
let chad = new Queen("Chad Michaels", 9, 9, 8, 8, 9, 9, 9, "Chad");
let dida = new Queen("Dida Ritz", 6, 7, 7, 5, 7, 7, 11, "Dida");
let jiggly = new Queen("Jiggly Caliente", 6, 4, 7, 3, 3, 6, 9, "Jiggly");
let kenya = new Queen("Kenya Michaels", 5, 6, 6, 6, 4, 7, 8, "Kenya");
let leshauwn = new Queen("Lashauwn Beyond", 5, 4, 7, 11, 5, 9, 8, "Lashauwn");
let latrice = new Queen("Latrice Royale", 9, 9, 9, 6, 9, 5, 9, "Latrice");
let madame = new Queen("Madame LaQueer", 7, 7, 6, 6, 7, 7, 7, "Madame");
let milan = new Queen("Milan", 5, 5, 9, 6, 5, 8, 10, "Milan");
let phiphi = new Queen("Phi Phi O'Hara", 9, 7, 8, 9, 9, 10, 9, "PhiPhi");
let princess = new Queen("The Princess", 4, 4, 5, 8, 4, 7, 8, "Princess");
let willam = new Queen("Willam", 8, 9, 7, 10, 8, 9, 8, "Willam");
let us_season4 = [chani, dawon, hwiyoung, inseong, jaeyoon, rowoon, yootaeyang, youngbin, zuho];
//ALL STARS 1:
let allstars_1 = [dawon, gyuri, hayoung, heejin, hoshi, hwiyoung, inseong, jinsoul, jun, nagyung, wonwoo, yves];
//SEASON 5:
let eric = new Queen("Eric", 11, 13, 8, 13, 14, 9, 14, 12, 13, "Eric");
let haknyeon = new Queen("Haknyeon", 13, 15, 12, 12, 8, 8, 14, 11, 12, "Haknyeon");
let hyunjae = new Queen("Hyunjae", 12, 11, 13, 12, 9, 9, 12, 13, 13, "Hyunjae");
let jacob = new Queen("Jacob", 10, 13, 14, 11, 12, 10, 9, 11, 12, "Jacob");
let juyeon = new Queen("Juyeon", 12, 9, 8, 14, 10, 9, 12, 14, 14, "Juyeon");
let kevin = new Queen("Kevin", 9, 14, 13, 8, 13, 15, 12, 13, 10, "Kevin");
let chanhee = new Queen("New", 8, 9, 15, 8, 10, 14, 10, 15, 9, "New");
let jichangmin = new Queen("Q", 10, 11, 9, 15, 11, 9, 13, 14, 15, "Q");
let sangyeon = new Queen("Sangyeon", 11, 10, 15, 11, 13, 9, 12, 11, 10, "Sangyeon");
let sunwoo = new Queen("Sunwoo", 11, 13, 9, 12, 15, 8, 13, 13, 13, "Sunwoo");
let younghoon = new Queen("Younghoon", 14, 10, 10, 10, 8, 12, 12, 12, 11, "Younghoon");

let alaska = new Queen("Alaska", 10, 11, 7, 8, 9, 9, 11, "Alaska");
let alyssa = new Queen("Alyssa Edwards", 5, 9, 12, 5, 9, 7, 9, "Alyssa");
let coco = new Queen("Coco Montrese", 4, 9, 9, 8, 6, 9, 15, "Coco");
let detox = new Queen("Detox", 8, 10, 6, 8, 3, 9, 9, "Detox");
let honey = new Queen("Honey Mahogany", 3, 3, 3, 6, 2, 5, 3, "Honey");
let ivy = new Queen("Ivy Winters", 8, 8, 9, 9, 7, 9, 7, "Ivy");
let jadejolie = new Queen("Jade Jolie", 6, 5, 6, 6, 6, 6, 9, "JadeJ");
let jinkx = new Queen("Jinkx Monsoon", 11, 10, 8, 7, 10, 9, 9, "Jinkx");
let lineysha = new Queen("Lineysha Sparx", 9, 6, 8, 10, 6, 9, 8, "Lineysha");
let monica = new Queen("Monica Beverly Hillz", 4, 4, 9, 6, 3, 8, 9, "Monica");
let penny = new Queen("Penny Tration", 7, 9, 4, 5, 7, 5, 5, "Penny");
let roxxxy = new Queen("Roxxxy Andrews", 6, 4, 6, 10, 4, 9, 9, "Roxxxy");
let serena = new Queen("Serena ChaCha", 3, 3, 8, 4, 5, 5, 7, "Serena");
let vivienne = new Queen("Vivienne Pinay", 3, 3, 5, 5, 3, 6, 5, "Vivienne");
let us_season5 = [eric, haknyeon, hyunjae, jacob, juyeon, kevin, chanhee, jichangmin, sangyeon, sunwoo, younghoon];
//SEASON 6:
let chaewon = new Queen("Chaewon", 10, 9, 13, 12, 12, 11, 12, 13, 12, "Chaewon");
let chaeyeon = new Queen("Chaeyeon", 11, 12, 12, 15, 11, 13, 8, 12, 14, "Chaeyeon");
let eunbi = new Queen("Eunbi", 12, 8, 13, 13, 15, 12, 11, 12, 12, "Eunbi");
let hitomi = new Queen("Hitomi", 9, 10, 7, 11, 12, 11, 8, 14, 10, "Hitomi");
let hyewon = new Queen("Hyewon", 10, 13, 7, 7, 9, 12, 9, 13, 8, "Hyewon");
let minju = new Queen("Minju", 13, 9, 8, 9, 12, 12, 11, 14, 9, "Minju");
let nako = new Queen("Nako", 11, 9, 8, 8, 10, 12, 11, 13, 8, "Nako");
let sakura = new Queen("Sakura", 10, 14, 7, 8, 13, 12, 13, 14, 11, "Sakura");
let wonyoung = new Queen("Wonyoung", 12, 8, 9, 13, 11, 13, 12, 14, 12, "Wonyoung");
let yena = new Queen("Yena", 12, 15, 11, 14, 8, 9, 15, 13, 13, "Yena");
let yujin = new Queen("Yujin", 13, 10, 12, 11, 9, 8, 12, 14, 11, "Yujin");
let yuri = new Queen("Jo Yuri", 8, 9, 15, 9, 12, 11, 9, 12, 9, "JoYuri");

let adore = new Queen("Adore Delano", 9, 8, 8, 5, 9, 7, 9, "Adore");
let april = new Queen("April Carrión", 6, 5, 7, 9, 5, 9, 8, "April");
let bendelacreme = new Queen("BenDeLaCreme", 10, 8, 7, 8, 10, 9, 7, "Bendelacreme");
let bianca = new Queen("Bianca Del Rio", 11, 11, 8, 10, 10, 9, 6, "Bianca");
let courtney = new Queen("Courtney Act", 8, 8, 9, 8, 8, 9, 9, "Courtney");
let darienne = new Queen("Darienne Lake", 9, 9, 7, 4, 8, 7, 14, "Darienne");
let gia = new Queen("Gia Gunn", 5, 4, 8, 8, 3, 8, 8, "Gia");
let joslyn = new Queen("Joslyn Fox", 7, 9, 9, 5, 9, 6, 9, "Joslyn");
let kelly = new Queen("Kelly Mantle", 8, 8, 7, 5, 7, 7, 7, "Kellu");
let laganja = new Queen("Laganja Estranja", 8, 5, 8, 7, 4, 8, 9, "Laganja");
let magnolia = new Queen("Magnolia Crawford", 7, 7, 6, 4, 5, 7, 4, "Magnolia");
let milk = new Queen("Milk", 9, 8, 5, 7, 6, 7, 5, "Milk");
let trinityk = new Queen("Trinity K. Bonet", 5, 9, 8, 10, 6, 9, 12, "TrinityKB");
let vivacious = new Queen("Vivacious", 4, 5, 5, 4, 4, 7, 7, "Vivacious");
let us_season6 = [chaewon, chaeyeon, eunbi, hitomi, hyewon, minju, nako, sakura, wonyoung, yena, yujin, yuri];
//SEASON 7:
let chenle = new Queen("Chenle", 11, 12, 12, 9, 9, 8, 12, 12, 9, "Chenle");
let haechan = new Queen("Haechan", 8, 13, 14, 12, 8, 8, 13, 11, 11, "Haechan");
let hendery = new Queen("Hendery", 11, 9, 8, 11, 10, 9, 8, 13, 8, "Hendery");
let jaemin = new Queen ("Jaemin", 9, 10, 8, 10, 12, 9, 9, 13, 12, "Jaemin");
let jeno = new Queen("Jeno", 10, 8, 8, 12, 10, 10, 13, 13, 12, "Jeno");
let jisung = new Queen("Jisung", 10, 9, 9, 14, 12, 8, 8, 12, 12, "Jisung");
let kun = new Queen("Kun", 13, 8, 15, 9, 12, 11, 12, 11, 9, "Kun");
let lucas = new Queen("Lucas", 8, 7, 7, 7, 9, 9, 13, 11, 8, "Lucas");
let mark = new Queen("Mark", 8, 10, 9, 11, 13, 9, 10, 13, 10, "Mark");
let renjun = new Queen("Renjun", 10, 10, 12, 12, 8, 14, 8, 13, 9, "Renjun");
let ten = new Queen("Ten", 9, 15, 12, 15, 13, 9, 13, 14, 14, "Ten");
let winwin = new Queen("Winwin", 11, 8, 7, 14, 8, 11, 9, 14, 11, "Winwin");
let xiaojun = new Queen("Xiaojun", 12, 7, 13, 10, 9, 9, 11, 13, 9, "Xiaojun");
let yangyang = new Queen("Yangyang", 8, 9, 8, 13, 12, 9, 12, 11, 9, "Yangyang");

let ginger = new Queen("Ginger Minj", 12, 13, 8, 7, 13, 7, 12, "Ginger");
let jaidynn = new Queen("Jaidynn Diore Fierce", 8, 9, 7, 6, 8, 7, 9, "Jaidynn");
let jasmine = new Queen("Jasmine Masters", 3, 4, 6, 5, 2, 7, 7, "Jasmine");
let kandy = new Queen("Kandy Ho", 4, 5, 7, 5, 4, 7, 9, "KandyH");
let katya = new Queen("Katya", 9, 9, 9, 7, 9, 9, 9, "Katya");
let kennedy = new Queen("Kennedy Davenport", 9, 9, 8, 7, 9, 6, 11, "Kennedy");
let max = new Queen("Max", 10, 4, 6, 8, 3, 8, 3, "Max");
let fame = new Queen("Miss Fame", 4, 4, 5, 10, 3, 9, 4, "MissFame");
let kasha = new Queen("Mrs. Kasha Davis", 8, 8, 7, 7, 8, 8, 9, "Kasha");
let pearl = new Queen("Pearl", 3, 9, 8, 9, 8, 8, 5, "Pearl");
let sashab = new Queen("Sasha Belle", 6, 6, 6, 6, 6, 6, 6, "SashaB");
let tempest = new Queen("Tempest DuJour", 8, 8, 7, 3, 6, 7, 6, "Tempest");
let trixie = new Queen("Trixie Mattel", 10, 6, 6, 9, 9, 9, 6, "Trixie");
let violet = new Queen("Violet Chachki", 8, 7, 7, 14, 7, 10, 8, "Violet");
let us_season7 = [chenle, haechan, hendery, jaemin, jeno, jisung, kun, lucas, mark, renjun, ten, winwin, xiaojun, yangyang];
//SEASON 8:
let jungdahyun = new Queen("Jung Dahyun", 10, 7, 9, 10, 11, 12, 7, 12, 9, "JungDahyun");
let juri = new Queen("Juri", 12, 9, 8, 9, 11, 13, 11, 13, 9, "Juri");
let minnie = new Queen("Minnie", 12, 8, 14, 8, 12, 9, 13, 12, 10, "Minnie");
let miyeon = new Queen("Miyeon", 13, 8, 15, 7, 9, 11, 9, 14, 8, "Miyeon");
let shuhua = new Queen("Shuhua", 12, 13, 7, 8, 9, 12, 11, 13, 8, "Shuhua");
let sohee = new Queen("Sohee", 8, 10, 7, 13, 12, 8, 12, 13, 11, "Sohee");
let soojin = new Queen("Soojin", 9, 7, 9, 14, 7, 10, 8, 12, 13, "Soojin");
let soyeon = new Queen("Soyeon", 9, 9, 9, 11, 15, 13, 12, 13, 12, "Soyeon");
let suyun = new Queen("Suyun", 10, 8, 13, 12, 8, 12, 11, 11, 9, "Suyun");
let yeonhee = new Queen("Yeonhee", 11, 9, 9, 13, 9, 11, 12, 13, 12, "Yeonhee");
let yunkyoung = new Queen("Yunkyoung", 10, 7, 12, 14, 11, 8, 9, 13, 11, "Yunkyoung");
let yuqi = new Queen("Yuqi", 8, 12, 12, 11, 14, 8, 12, 12, 11, "Yuqi");

let acid = new Queen("Acid Betty", 8, 3, 7, 9, 2, 8, 7, "Acid");
let bob = new Queen("Bob The Drag Queen", 13, 15, 8, 7, 13, 7, 13, "Bob");
let chichi = new Queen("Chi Chi DeVayne", 7, 8, 12, 3, 5, 7, 9, "ChiChi");
let cynthia = new Queen("Cynthia Lee Fontaine", 5, 4, 8, 6, 4, 7, 6, "Cynthia");
let dax = new Queen("Dax ExclamationPoint", 5, 6, 6, 7, 6, 7, 4, "Dax");
let derrick = new Queen("Derrick Barry", 4, 9, 7, 3, 9, 7, 8, "Derrick");
let kim = new Queen("Kim Chi", 6, 7, 4, 13, 6, 10, 5, "Kim");
let laila = new Queen("Laila McQueen", 7, 7, 4, 4, 6, 8, 8, "Laila");
let naomi = new Queen("Naomi Smalls", 9, 9, 8, 8, 9, 10, 10, "Naomi");
let naysha = new Queen("Naysha Lopez", 4, 4, 4, 4, 3, 6, 4, "Naysga");
let robbie = new Queen("Robbie Turner", 5, 4, 6, 4, 3, 6, 6, "Robbie");
let thorgy = new Queen("Thorgy Thor", 9, 9, 7, 8, 9, 9, 9, "Thorgy");
let us_season8 = [jungdahyun, juri, minnie, miyeon, shuhua, sohee, soojin, soyeon, suyun, yeonhee, yunkyoung, yuqi];
//ALL STARS 2:
let allstars_2 = [chaeyeon, haknyeon, hyunjae, jaemin, jeonghan, kun, chanhee, jichangmin, sunwoo, yootaeyang];
//SEASON 9:
let hwanwoong = new Queen("Hwanwoong", 12, 10, 9, 15, 8, 9, 12, 13, 14, "Hwanwoong");
let intak = new Queen("Intak", 12, 9, 7, 13, 11, 8, 9, 12, 13, "Intak");
let jiung = new Queen("Jiung", 10, 12, 10, 13, 9, 8, 9, 13, 12, "Jiung");
let jongseob = new Queen("Jongseob", 9, 9, 8, 11, 12, 7, 8, 12, 9, "Jongseob");
let keeho = new Queen("Keeho", 13, 14, 13, 12, 12, 13, 14, 13, 14, "Keeho");
let keonhee = new Queen("Keonhee", 12, 14, 14, 10, 9, 10, 14, 13, 12, "Keonhee");
let leedo = new Queen("Leedo", 9, 8, 9, 13, 13, 9, 10, 13, 13, "Leedo");
let ravn = new Queen("Ravn", 10, 8, 8, 12, 15, 9, 13, 11, 11, "Ravn");
let seoho = new Queen("Seoho", 13, 13, 15, 12, 8, 8, 13, 12, 12, "Seoho");
let soul = new Queen("Soul", 10, 8, 7, 13, 11, 9, 8, 13, 10, "Soul");
let theo = new Queen("Theo", 11, 10, 15, 10, 8, 9, 9, 12, 9, "Theo");
let xion = new Queen("Xion", 13, 9, 7, 7, 8, 13, 10, 14, 8, "Xion");

let aja = new Queen("Aja", 7, 7, 9, 4, 7, 9, 9, "Aja");
let alexism = new Queen("Alexis Michelle", 8, 8, 8, 6, 9, 6, 11, "AlexisM");
let charlie = new Queen("Charlie Hides", 6, 7, 5, 7, 3, 9, 2, "Charlie");
let eureka = new Queen("Eureka O'Hara", 9, 8, 6, 6, 10, 7, 8, "Eureka");
let farrah = new Queen("Farrah Moan", 9, 5, 7, 3, 6, 8, 7, "Farrah");
let jaymes = new Queen("Jaymes Mansfield", 8, 8, 3, 6, 9, 7, 6, "Jaymes");
let kimora = new Queen("Kimora Blac", 5, 5, 4, 2, 5, 8, 3, "Kimora");
let ninab = new Queen("Nina Bo'Nina Brown", 4, 8, 8, 8, 8, 9, 12, "NinaBB");
let peppermint = new Queen("Peppermint", 8, 10, 7, 7, 3, 7, 14, "Peppermint");
let sasha = new Queen("Sasha Velour", 10, 9, 7, 9, 9, 10, 11, "Sasha");
let shea = new Queen("Shea Couleé", 10, 9, 9, 8, 10, 10, 11, "Shea");
let trinity = new Queen("Trinity The Tuck", 9, 8, 8, 9, 8, 9, 8, "TrinityTT");
let valentina = new Queen("Valentina", 9, 9, 9, 9, 9, 9, 7, "Valentina");
let us_season9 = [hwanwoong, intak, jiung, jongseob, keeho, keonhee, leedo, ravn, seoho, soul, theo, xion];
//ALL STARS 3:
let allstars_3 = [dk, haechan, haseul, hwanwoong, minju, saerom, sakura, soyeon, ten, yeonhee];
//SEASON 10:
let byeongkwan = new Queen("Byeongkwan", 10, 13, 10, 14, 11, 12, 11, 14, 13, "Byeongkwan");
let yuchan = new Queen("Chan", 12, 9, 12, 10, 10, 9, 9, 12, 9, "Chan");
let donghun = new Queen("Donghun", 11, 8, 13, 9, 8, 8, 11, 11, 9, "Donghun");
let irene = new Queen("Irene", 13, 8, 9, 13, 8, 12, 13, 14, 12, "Irene");
let joy = new Queen("Joy", 15, 12, 13, 9, 9, 10, 12, 13, 10, "Joy");
let junhee = new Queen("Junhee", 12, 10, 13, 12, 9, 8, 9, 11, 12, "Junhee");
let seulgi = new Queen("Seulgi", 9, 9, 14, 15, 9, 13, 12, 14, 14, "Seulgi");
let wendy = new Queen("Wendy", 8, 12, 15, 10, 10, 9, 12, 13, 11, "Wendy");
let wow = new Queen("Wow", 9, 8, 8, 12, 12, 10, 8, 12, 12, "Wow");
let yeri = new Queen("Yeri", 12, 13, 9, 8, 14, 10, 12, 12, 10, "Yeri");

let aquaria = new Queen("Aquaria", 9, 9, 8, 14, 9, 10, 10, "Aquaria");
let asia = new Queen("Asia O'Hara", 9, 5, 6, 6, 8, 9, 9, "Asia");
let blair = new Queen("Blair St. Clair", 9, 5, 6, 9, 7, 8, 7, "Blair");
let dusty = new Queen("Dusty Ray Bottoms", 7, 6, 8, 7, 6, 7, 6, "Dusty");
let kalorie = new Queen("Kalorie K. Williams", 6, 8, 6, 5, 7, 7, 8, "Kalorie");
let kameron = new Queen("Kameron Michaels", 5, 7, 9, 8, 6, 8, 14, "Kameron");
let mayhem = new Queen("Mayhem Miller", 6, 8, 8, 8, 5, 9, 8, "Mayhem");
let miz = new Queen("Miz Cracker", 9, 9, 5, 7, 9, 7, 7, "Miz");
let monet = new Queen("Monét X Change", 9, 10, 7, 5, 7, 9, 11, "Monet");
let monique = new Queen("Monique Heart", 9, 8, 7, 8, 10, 8, 9, "Monique");
let vanessa = new Queen("Vanessa 'Vanjie' Mateo", 10, 7, 7, 6, 7, 7, 8, "Vanjie");
let vixen = new Queen("The Vixen", 4, 4, 11, 9, 3, 8, 13, "Vixen");
let yuhua = new Queen("Yuhua Hamasaki", 5, 7, 6, 8, 6, 7, 7, "Yuhua");
let us_season10 = [byeongkwan, yuchan, donghun, irene, joy, junhee, seulgi, wendy, wow, yeri];
//ALL STARS 4:
let allstars_4 = [byeongkwan, hyewon, joy, jun, mark, miyeon, nagyung, ravn, theo, xion];
//SEASON 11:
let dami = new Queen("Dami", 8, 8, 8, 13, 15, 10, 11, 13, 10, "Dami");
let gahyeon = new Queen("Gahyeon", 11, 9, 8, 9, 8, 12, 12, 13, 12, "Gahyeon");
let handong = new Queen("Handong", 12, 8, 9, 9, 10, 13, 9, 13, 9, "Handong");
let jiu = new Queen("JiU", 12, 11, 12, 12, 13, 12, 11, 13, 12, "JiU");
let junji = new Queen("Junji", 9, 9, 12, 12, 8, 10, 7, 12, 11, "Junji");
let kb = new Queen("KB", 12, 8, 8, 9, 14, 8, 12, 13, 12, "KB");
let luv = new Queen("Love", 11, 8, 13, 10, 7, 8, 11, 12, 9, "Love");
let mill = new Queen("Mill", 7, 8, 7, 10, 12, 9, 8, 12, 9, "Mill");
let nine = new Queen("Nine", 7, 10, 9, 8, 8, 12, 8, 12, 8, "Nine");
let rie = new Queen("Rie", 13, 10, 11, 13, 8, 9, 8, 11, 13, "Rie");
let siyeon = new Queen("Siyeon", 8, 10, 15, 10, 8, 9, 9, 14, 10, "Siyeon");
let sua = new Queen("SuA", 9, 14, 11, 15, 9, 9, 13, 13, 13, "SuA");
let yoohyeon = new Queen("Yoohyeon", 9, 12, 14, 12, 8, 9, 12, 13, 11, "Yoohyeon");
let yoojung = new Queen("Yoojung", 8, 8, 9, 14, 9, 9, 11, 14, 11, "Yoojung");

let akeria = new Queen("A'keria C. Davenport", 10, 9, 9, 8, 8, 9, 9, "Akeria");
let ariel = new Queen("Ariel Versace", 6, 8, 7, 6, 8, 8, 8, "Ariel");
let brooke = new Queen("Brooke Lynn Hytes", 8, 6, 10, 8, 4, 9, 9, "Brooke");
let honeyd = new Queen("Honey Davenport", 6, 6, 7, 6, 6, 9, 4, "HoneyD");
let kahanna = new Queen("Kahanna Montrese", 4, 5, 5, 4, 5, 6, 7, "Kahanna");
let mercedes = new Queen("Mercedes Iman Diamond", 4, 6, 6, 6, 6, 8, 8, "Mercedes");
let ninaw = new Queen("Nina West", 10, 7, 6, 6, 9, 7, 5, "NinaW");
let plastique = new Queen("Plastique Tiara", 7, 7, 8, 9, 5, 8, 6, "Plastique");
let rajah = new Queen("Ra'Jah O'Hara", 7, 8, 14, 13, 6, 10, 12, "Rajah");
let scarlet = new Queen("Scarlet Envy", 10, 8, 6, 9, 7, 9, 8, "Scarlet");
let shuga = new Queen("Shuga Cain", 8, 7, 7, 5, 7, 10, 7, "Shuga");
let silky = new Queen("Silky Nutmeg Ganache", 8, 9, 7, 6, 9, 7, 7, "Silky");
let yvie = new Queen("Yvie Oddly", 10, 5, 8, 9, 5, 8, 11, "Yvie");
let us_season11 = [dami, donghun, gahyeon, handong, jiu, junji, kb, luv, mill, nine, rie, siyeon, sua, yoohyeon, yoojung];
//SEASON 12
let doyoung = new Queen("Doyoung" , 13, 11, 14, 11, 9, 12, 13, 13, 10, "Doyoung");
let jaehyun = new Queen("Jaehyun" , 12, 8, 9, 10, 7, 8, 10, 13, 9, "Jaehyun");
let johnny = new Queen("Johnny" , 9, 13, 8, 9, 8, 10, 14, 12, 11, "Johnny");
let jungwoo = new Queen("Jungwoo" , 9, 9, 11, 8, 8, 9, 9, 13, 9, "Jungwoo");
let shotaro = new Queen("Shotaro" , 7, 10, 7, 14, 8, 8, 8, 12, 10, "Shotaro");
let sungchan = new Queen("Sungchan" , 8, 8, 8, 11, 9, 11, 9, 9, 9, "Sungchan");
let taeil = new Queen("Taeil" , 10, 8, 15, 9, 9, 8, 10, 11, 8, "Taeil");
let taeyong = new Queen("Taeyong" , 8, 9, 9, 13, 13, 11, 10, 13, 12, "Taeyong");
let yuta = new Queen("Yuta" , 9, 11, 9, 11, 8, 9, 12, 12, 12, "Yuta");

let aiden = new Queen("Aiden Zhane", 9, 3, 6, 4, 3, 8, 7, "Aiden");
let brita = new Queen("Brita", 7, 6, 7, 4, 3, 7, 9, "Brita");
let crystal = new Queen("Crystal Methyd", 8, 7, 7, 8, 5, 9, 5, "CrystalM");
let dahlia = new Queen("Dahlia Sin", 4, 4, 8, 7, 6, 10, 3, "Dahlia");
let gigi = new Queen("Gigi Goode", 8, 7, 9, 8, 9, 9, 5, "Gigi");
let heidi = new Queen("Heidi N Closet", 9, 10, 5, 6, 9, 7, 12, "Heidi");
let jackie = new Queen("Jackie Cox", 8, 9, 5, 7, 10, 8, 11, "Jackie");
let jaida = new Queen("Jaida Essence Hall", 7, 9, 9, 14, 9, 10, 14, "Jaida");
let jan = new Queen("Jan", 8, 7, 9, 7, 8, 8, 7, "Jan");
let nicky = new Queen("Nicky Doll", 4, 4, 7, 10, 3, 10, 5, "Nicky");
let rock = new Queen("Rock M. Sakura", 6, 8, 6, 7, 8, 8, 6, "Rock");
let widow = new Queen("Widow Von'Du", 8, 9, 7, 7, 9, 8, 9, "Widow");
let us_season12 = [doyoung, jaehyun, johnny, jungwoo, luv, shotaro, sua, sungchan, taeil, taeyong, yuta];
//ALL STARS 5
let allstars_5 = [chaeyoung, yuchan, inseong, irene, jiwon, keeho, oliviahye, wendy, yves, yuqi];
//SEASON 13
let jennie = new Queen("Jennie", 9, 9, 9, 11, 8, 12, 9, 13, 12, "Jennie");
let jeongyeon = new Queen("Jeongyeon", 8, 8, 12, 8, 9, 9, 11, 12, 9, "Jeongyeon");
let jihyo = new Queen("Jihyo", 9, 10, 13, 12, 10, 12, 12, 13, 11, "Jihyo");
let jisoo = new Queen("Jisoo", 12, 8, 8, 9, 10, 13, 12, 14, 8, "Jisoo");
let kimdahyun = new Queen("Kim Dahyun", 10, 14, 8, 9, 12, 10, 13, 12, 10, "KimDahyun");
let lisa = new Queen("Lisa", 8, 8, 7, 14, 9, 12, 9, 13, 12, "Lisa");
let mina = new Queen("Mina", 11, 7, 9, 11, 9, 10, 9, 12, 9, "Mina");
let momo = new Queen("Momo", 7, 8, 7, 14, 9, 12, 9, 13, 13, "Momo");
let nayeon = new Queen("Nayeon", 9, 10, 13, 9, 9, 13, 12, 12, 10, "Nayeon");
let rosie = new Queen("Rosé", 8, 12, 12, 9, 13, 11, 9, 12, 8, "Rosei");
let sana = new Queen("Sana", 10, 10, 8, 12, 11, 13, 12, 13, 11, "Sana");
let sonchaeyoung = new Queen("Son Chaeyoung", 9, 11, 9, 8, 13, 13, 9, 12, 9, "SonChaeyoung");
let tzuyu = new Queen("Tzuyu", 12, 8, 9, 10, 7, 10, 9, 14, 9, "Tzuyu");

let denali = new Queen("Denali", 4, 7, 12, 7, 9, 9, 12, "Denali");
let elliott = new Queen("Elliott With 2 Ts", 4, 5, 10, 7, 3, 7, 10, "Elliott");
let mik = new Queen("Gottmik", 8, 9, 4, 13, 9, 10, 6, "Gottmik");
let joey = new Queen("Joey Jay", 5, 5, 8, 6, 4, 6, 4, "Joey");
let kahmora = new Queen("Kahmora Hall", 3, 4, 3, 9, 3, 10, 4, "Kahmora");
let kandym = new Queen("Kandy Muse", 9, 9, 7, 6, 9, 6, 13, "KandyM");
let lala = new Queen("LaLa Ri", 4, 6, 10, 2, 5, 7, 13, "Lala");
let olivia = new Queen("Olivia Lux", 8, 5, 9, 8, 4, 9, 10, "Olivia");
let rose = new Queen("Rosé", 10, 9, 12, 8, 9, 7, 6, "Rose");
let symone = new Queen("Symone", 12, 8, 8, 7, 12, 9, 13, "Symone");
let tamisha = new Queen("Tamisha Iman", 7, 6, 7, 6, 6, 7, 8, "Tamisha");
let tina = new Queen("Tina Burner", 7, 7, 8, 5, 8, 4, 8, "TinaB");
let utica = new Queen("Utica Queen", 7, 4, 4, 13, 4, 10, 12, "Utica");
let us_season13 = [jennie, jeongyeon, jihyo, jisoo, kimdahyun, lisa, mina, momo, nayeon, rosie, sana, sonchaeyoung, tzuyu];
//SUPERSTARS 1
let superstars_1 = [chaeyeon, dk, eric, haseul, hayoung, inseong, jiheon, jinsoul, jiu, johnny, juri, keonhee, mark, renjun, rowoon, sana, seulgi, the8, wonyoung];
//ALL STARS 6
let allstars_6 = [dami, hayoung, jaemin, nine, rie, sangyeon, seoho, seungkwan, siyeon, wonwoo, yena, youngbin, yuta];
//SEASON 14
let baekhyun = new Queen("Baekhyun", 10, 13, 14, 11, 8, 9, 12, 13, 10, "Baekhyun");
let chanyeol = new Queen("Chanyeol", 11, 11, 8, 7, 10, 7, 12, 11, 8, "Chanyeol");
let chen = new Queen("Chen", 9, 7, 15, 8, 11, 9, 10, 11, 8, "Chen");
let kyungsoo = new Queen("D.O", 14, 13, 14, 9, 10, 9, 10, 12, 9, "D.O");
let hyoyeon = new Queen("Hyoyeon", 9, 12, 9, 15, 9, 12, 12, 12, 13, "Hyoyeon");
let jessicajung = new Queen("Jessica Jung", 8, 9, 14, 11, 8, 15, 9, 14, 9, "JessicaJung");
let kai = new Queen("Kai", 8, 9, 8, 15, 7, 8, 8, 14, 13, "Kai");
let lay = new Queen("Lay", 9, 9, 9, 13, 9, 8, 10, 13, 11, "Lay");
let sehun = new Queen("Sehun", 9, 11, 7, 14, 7, 8, 9, 14, 12, "Sehun");
let seohyun = new Queen("Seohyun", 12, 8, 13, 10, 12, 13, 8, 13, 8, "Seohyun");
let sooyoung = new Queen("Sooyoung", 11, 13, 9, 12, 8, 9, 12, 11, 9, "Sooyoung");
let suho = new Queen("Suho", 13, 7, 10, 9, 9, 12, 11, 13, 10, "Suho");
let sunny = new Queen("Sunny", 9, 10, 12, 11, 7, 8, 11, 12, 10, "Sunny");
let taeyeon = new Queen("Taeyeon", 8, 9, 15, 10, 8, 11, 12, 13, 11, "Taeyeon");
let tiffany = new Queen("Tiffany", 11, 9, 13, 8, 11, 13, 12, 14, 9, "Tiffany");
let xiumin = new Queen("Xiumin", 10, 11, 10, 9, 8, 8, 12, 12, 12, "Xiumin");
let yoona = new Queen("Yoona", 13, 9, 8, 12, 9, 11, 9, 13, 11, "Yoona");
let kwonyuri = new Queen("Kwon Yuri", 12, 12, 9, 14, 7, 11, 13, 13, 13, "KwonYuri");
let us_season14 = [baekhyun, chanyeol, chen, kyungsoo, hyoyeon, jessicajung, kai, lay, sehun, seohyun, sooyoung, suho, sunny, taeyeon, tiffany, xiumin, yoona, kwonyuri];
//SUPERSTARS 2
let superstars_2 = [chaeyeon, dk, eric, haseul, hayoung, inseong, jiheon, jinsoul, jiu, johnny, juri, keonhee, mark, renjun, sana, seulgi, the8, wonyoung];
//SEASON 15
let babysoul = new Queen("BabySoul", 7, 8, 13, 8, 14, 12, 9, 12, 7, "BabySoul");
let hongjoong = new Queen("Hongjoong", 9, 10, 8, 11, 12, 10, 13, 11, 9, "Hongjoong");
let jiae = new Queen("Jiae", 11, 9, 9, 11, 7, 12, 8, 13, 8, "Jiae");
let jin = new Queen("JIN", 12, 9, 14, 9, 9, 10, 11, 12, 9, "JIN");
let seojisoo = new Queen("Seo Jisoo", 13, 12, 8, 12, 9, 12, 12, 14, 12, "SeoJisoo");
let jongho = new Queen("Jongho", 11, 12, 15, 9, 8, 8, 12, 12, 11, "Jongho");
let kei = new Queen("Kei", 13, 7, 14, 9, 8, 12, 9, 14, 8, "Kei");
let mijoo = new Queen("Mijoo", 12, 15, 10, 15, 7, 9, 13, 13, 13, "Mijoo");
let mingi = new Queen("Mingi", 7, 9, 7, 11, 12, 10, 8, 13, 10, "Mingi");
let san = new Queen("San", 11, 12, 9, 13, 8, 8, 10, 12, 13, "San");
let seonghwa = new Queen("Seonghwa", 12, 9, 11, 11, 7, 11, 9, 12, 10, "Seonghwa");
let sujeong = new Queen("Sujeong", 12, 7, 13, 12, 13, 12, 7, 14, 12, "Sujeong");
let wooyoung = new Queen("Wooyoung", 11, 9, 7, 14, 8, 11, 7, 13, 11, "Wooyoung");
let yein = new Queen("Yein", 12, 11, 9, 12, 8, 11, 13, 14, 13, "Yein");
let yeosang = new Queen("Yeosang", 8, 11, 7, 9, 7, 10, 13, 12, 7, "Yeosang");
let yunho = new Queen("Yunho", 12, 9, 9, 14, 7, 8, 11, 13, 12, "Yunho");
let us_season15 = [babysoul, hongjoong, jiae, jin, seojisoo, jongho, kei, mijoo, mingi, san, seonghwa, sujeong, wooyoung, yein, yeosang, yunho];
//PORKCHOPS 1
let porkchops_1 = [chani, hyunjin, intak, jeongyeon, kevin, mill, minnie, scoups, sungchan, yangyang, yuri, yujin];
//SEASON 16
let bangchan = new Queen("Bang Chan", 7, 9, 9, 8, 15, 10, 11, 13, 8, "BangChan");
let changbin = new Queen("Changbin", 8, 8, 8, 10, 13, 9, 12, 11, 9, "Changbin");
let doyeon = new Queen("Doyeon", 13, 9, 11, 10, 8, 13, 10, 14, 10, "Doyeon");
let elly = new Queen("Elly", 10, 9, 8, 12, 9, 9, 12, 13, 12, "Elly");
let felix = new Queen("Felix", 9, 12, 7, 13, 7, 12, 9, 13, 10, "Felix");
let han = new Queen("Han", 8, 7, 10, 8, 13, 7, 12, 11, 9, "Han");
let hwanghyunjin = new Queen("Hwang Hyunjin", 9, 6, 7, 13, 7, 6, 9, 12, 8, "HwangHyunjin");
let jeongin = new Queen("I.N", 7, 7, 9, 9, 9, 12, 8, 13, 9, "I.N");
let leeknow = new Queen("Lee Know", 10, 8, 7, 14, 7, 9, 8, 11, 12, "LeeKnow");
let lua = new Queen("Lua", 9, 10, 9, 15, 8, 11, 9, 13, 12, "Lua");
let lucy = new Queen("Lucy", 9, 11, 9, 12, 9, 10, 12, 13, 10, "Lucy");
let rina = new Queen("Rina", 7, 8, 8, 12, 8, 9, 12, 11, 8, "Rina");
let sei = new Queen("Sei", 8, 7, 8, 9, 9, 13, 8, 13, 8, "Sei");
let seungmin = new Queen("Seungmin", 9, 9, 12, 9, 8, 9, 11, 12, 9, "Seungmin");
let suyeon = new Queen("Suyeon", 8, 7, 15, 9, 8, 11, 10, 13, 7, "Suyeon");
let choiyoojung = new Queen("Choi Yoojung", 10, 11, 9, 14, 9, 9, 13, 12, 11, "ChoiYoojung");
let us_season16 = [bangchan, changbin, doyeon, elly, felix, han, hwanghyunjin, jeongin, leeknow, lua, lucy, mijoo, rina, sei, seonghwa, seungmin, suyeon, choiyoojung];
//ALL STARS 7
let allstars_7 = [baekhyun, dawon, gahyeon, haknyeon, jacob, jaehyun, jeonghan, jisoo, junhee, kei, nayeon, sakura, san, seonghwa, taeyeon, winwin, yeojin, yoona];
//SEASON 17
let ahnjaehyun = new Queen("Ahn Jaehyun", 13, 12, 8, 8, 8, 9, 12, 12, 9, "AhnJaehyun");
let choiwooshik = new Queen("Choi Wooshik", 13, 14, 9, 9, 8, 9, 13, 11, 9, "ChoiWooshik");
let goohyesun = new Queen("Goo Hyesun", 13, 12, 8, 8, 7, 13, 9, 13, 9, "GooHyesun");
let junjihyun = new Queen("Jun Jihyun", 14, 11, 9, 10, 9, 12, 10, 14, 8, "JunJihyun");
let kimjiwon = new Queen("Kim Jiwon", 14, 12, 9, 8, 10, 11, 9, 12, 10, "KimJiwon");
let kimjunghyun = new Queen("Kim Junghyun", 12, 13, 8, 8, 9, 9, 13, 12, 8, "KimJunghyun");
let kimseolhyun = new Queen("Kim Seolhyun", 11, 9, 9, 12, 8, 10, 9, 14, 12, "KimSeolhyun");
let kimsoohyun = new Queen("Kim Soohyun", 15, 12, 9, 11, 9, 8, 14, 13, 11, "KimSoohyun");
let kimwoobin = new Queen("Kim Woobin", 13, 13, 7, 8, 9, 8, 13, 12, 10, "KimWoobin");
let krystaljung = new Queen("Krystal Jung", 13, 11, 13, 13, 9, 13, 8, 14, 13, "KrystalJung");
let leedongwook = new Queen("Lee Dongwook", 14, 12, 9, 7, 9, 12, 9, 13, 9, "LeeDongwook");
let leesungkyung = new Queen("Lee Sungkyung", 13, 13, 10, 9, 9, 10, 12, 14, 12, "LeeSungkyung");
let namjoohyuk = new Queen("Nam Joohyuk", 13, 13, 8, 9, 9, 9, 13, 14, 12, "NamJoohyuk");
let seoinguk = new Queen("Seo Inguk", 12, 12, 11, 7, 9, 7, 13, 13, 9, "SeoInguk")
let seoyeji = new Queen("Seo Yeji", 14, 12, 8, 8, 9, 10, 11, 13, 8, "SeoYeji");
let songhyekyo = new Queen("Song Hyekyo", 12, 9, 9, 7, 9, 12, 8, 12, 9, "SongHyekyo");
let songjoongki = new Queen("Song Joongki", 12, 8, 9, 7, 8, 8, 13, 12, 9, "SongJoongki");
let songkang = new Queen("Song Kang", 12, 12, 9, 11, 8, 12, 9, 13, 11, "SongKang");
let us_season17 = [ahnjaehyun, choiwooshik, goohyesun, junjihyun, kimjiwon, kimjunghyun, kimseolhyun, kimsoohyun, kimwoobin, krystaljung, leedongwook, leesungkyung, namjoohyuk, seoinguk, seoyeji, songhyekyo, songjoongki, songkang];
//SEASON 18
let ailee = new Queen("Ailee", 11, 12, 15, 10, 10, 9, 11, 13, 11, "Ailee");
let alexa = new Queen("AleXa", 10, 13, 12, 12, 10, 9, 11, 12, 9, "AleXa");
let boakwon= new Queen("BoA", 8, 12, 14, 14, 11, 10, 11, 12, 13, "BoA");
let chungha = new Queen("Chung Ha", 9, 12, 12, 14, 10, 12, 11, 13, 12, "ChungHa");
let hasungwoon = new Queen("Ha Sungwoon", 7, 9, 12, 10, 8, 9, 9, 12, 9, "HaSungwoon");
let kangdaniel = new Queen("Kang Daniel", 10, 10, 8, 13, 12, 7, 10, 11, 12, "KangDaniel");
let kimdonghan = new Queen("Kim Donghan", 9, 12, 11, 13, 9, 10, 9, 12, 13, "KimDonghan");
let krieshachu = new Queen("Kriesha Chu", 9, 11, 12, 11, 10, 8, 9, 11, 8, "KrieshaChu");
let leehi = new Queen("Lee Hi", 11, 8, 13, 11, 10, 10, 11, 12, 9, "LeeHi");
let leejieun = new Queen("IU", 13, 11, 12, 10, 13, 12, 10, 13, 9, "IU");
let natty = new Queen("Natty", 8, 10, 10, 11, 11, 10, 8, 11, 8, "Natty");
let parkboram = new Queen("Park Boram", 8, 9, 13, 9, 12, 11, 9, 13, 8, "ParkBoram");
let parkjihoon = new Queen("Park Jihoon", 10, 10, 8, 15, 9, 9, 12, 12, 14, "ParkJihoon");
let somi = new Queen("Somi", 9, 10, 12, 11, 9, 10, 11, 13, 12, "Somi");
let sunmi = new Queen("Sunmi", 9, 9, 11, 12, 12, 13, 12, 13, 12, "Sunmi");
let woodz = new Queen("WOODZ", 10, 10, 11, 13, 12, 10, 12, 12, 10, "WOODZ");
let youha = new Queen("Youha", 9, 9, 13, 12, 11, 9, 9, 12, 12, "Youha");
let yukika = new Queen("Yukika", 9, 9, 12, 9, 13, 12, 8, 13, 9, "Yukika");
let us_season18 = [ailee, alexa, boakwon, chungha, hasungwoon, kangdaniel, kimdonghan, krieshachu, leehi, leejieun, natty, parkboram, parkjihoon, somi, sunmi, woodz, youha, yukika];
//SEASON 19
let bobby = new Queen("Bobby", 7, 15, 8, 9, 15, 10, 12, 13, 8, "Bobby");
let bomi = new Queen("Bomi", 10, 15, 12, 15, 8, 9, 12, 13, 13, "Bomi");
let chaeunwoo = new Queen("Cha Eunwoo", 10, 9, 9, 9, 10, 11, 11, 13, 9, "ChaEunwoo");
let chanwoo = new Queen("Chanwoo", 9, 8, 8, 9, 12, 11, 12, 13, 10, "Chanwoo");
let chorong = new Queen("Chorong", 12, 12, 9, 9, 13, 12, 9, 12, 11, "Chorong");
let leedonghyuk = new Queen("Donghyuk", 10, 12, 8, 14, 10, 10, 8, 10, 12, "Donghyuk");
let jungeunji = new Queen("Eunji", 15, 13, 15, 9, 9, 11, 13, 12, 12, "Eunji");
let jinhwan = new Queen("Jinhwan", 7, 12, 12, 9, 8, 12, 11, 11, 9, "Jinhwan");
let leejinwoo = new Queen("Jinjin", 8, 9, 8, 11, 12, 8, 9, 11, 11, "Jinjin");
let junhoe = new Queen("Junhoe", 11, 12, 12, 8, 12, 9, 11, 13, 12, "Junhoe");
let moonbin = new Queen("Moonbin", 12, 11, 12, 13, 10, 9, 11, 13, 12, "Moonbin");
let myungjun = new Queen("MJ", 11, 11, 15, 10, 9, 10, 13, 10, 9, "MJ");
let naeun = new Queen("Naeun", 13, 7, 8, 12, 8, 14, 10, 14, 8, "Naeun");
let namjoo = new Queen("Namjoo", 11, 13, 13, 12, 10, 9, 12, 12, 13, "Namjoo");
let ohhayoung = new Queen("Oh Hayoung", 13, 8, 9, 9, 12, 13, 9, 14, 9, "OhHayoung");
let rocky = new Queen("Rocky", 8, 12, 10, 10, 9, 10, 10, 12, 10, "Rocky");
let sanha = new Queen("Sanha", 10, 9, 9, 12, 11, 8, 13, 12, 10, "Sanha");
let yunhyeong = new Queen("Yunhyeong", 8, 9, 10, 11, 8, 12, 11, 12, 8, "Yunhyeong");
let us_season19 = [bobby, bomi, chaeunwoo, chanwoo, chorong, leedonghyuk, jungeunji, leejinwoo, jinhwan, junhoe, moonbin, myungjun, naeun, namjoo, ohhayoung, rocky, sanha, yunhyeong];
//ALL STARS 8
let allstars_8 = [ailee, boakwon, kyungsoo, doyeon, jiung, jongho, junhoe, krystaljung, mijoo, moonbin, naeun, seoyeon, songkang, vernon, vivi, yeri];
//SEASON 20
let baepunch = new Queen("Punch", 8, 8, 14, 9, 12, 11, 10, 12, 8, "Punch");
let baesuzy = new Queen("Bae Suzy", 12, 11, 10, 11, 7, 12, 13, 13, 10, "BaeSuzy");
let belle = new Queen("Belle", 8, 7, 9, 11, 11, 7, 12, 10, 10, "Belle");
let beomgyu = new Queen("Beomgyu", 9, 9, 8, 12, 8, 13, 9, 11, 9, "Beomgyu");
let dawn = new Queen("Dawn", 8, 8, 7, 12, 12, 12, 10, 12, 10, "Dawn");
let hajiwon = new Queen("Ha Jiwon", 13, 12, 8, 9, 9, 10, 12, 12, 9, "HaJiwon");
let hanhyunmin = new Queen("Han Hyunmin", 10, 11, 7, 9, 10, 12, 13, 12, 10, "HanHyunmin");
let holland = new Queen("Holland", 9, 9, 9, 10, 13, 13, 11, 13, 10, "Holland");
let hueningkai = new Queen("Huening Kai", 8, 12, 11, 10, 9, 9, 11, 12, 10, "HueningKai");
let hyuna = new Queen("HyunA", 11, 9, 7, 12, 12, 8, 12, 13, 12, "HyunA");
let janggeunsuk = new Queen("Jang Geunsuk", 12, 12, 8, 9, 8, 10, 12, 12, 10, "JangGeunsuk");
let jessi = new Queen("Jessi", 7, 9, 7, 11, 7, 12, 12, 11, 9, "Jessi");
let kikomizuhara = new Queen("Kiko Mizuhara", 8, 9, 9, 7, 12, 12, 11, 13, 9, "KikoMizuhara");
let kimsamuel = new Queen("Kim Samuel", 8, 12, 11, 11, 8, 9, 10, 12, 10, "KimSamuel");
let kimsohyun = new Queen("Kim Sohyun", 13, 10, 10, 8, 7, 8, 12, 12, 7, "KimSohyun");
let leejongsuk = new Queen("Lee Jongsuk", 11, 12, 8, 10, 8, 8, 11, 12, 8, "LeeJongsuk");
let shannonwilliams = new Queen("Shannon Williams", 10, 8, 13, 9, 10, 9, 8, 12, 9, "ShannonWilliams");
let soobin = new Queen("Soobin", 9, 11, 9, 12, 11, 8, 11, 13, 12, "Soobin");
let taehyun = new Queen("Taehyun", 8, 12, 12, 11, 10, 8, 12, 12, 11, "Taehyun");
let yeonjun = new Queen("Yeonjun", 9, 10, 10, 13, 11, 8, 9, 11, 11, "Yeonjun");
let us_season20 = [baepunch, baesuzy, belle, beomgyu, dawn, hajiwon, hanhyunmin, holland, hueningkai, hyuna, janggeunsuk, jessi, kikomizuhara, kimsamuel, kimsohyun, leejongsuk, shannonwilliams, soobin, taehyun, yeonjun];
//SEASON 21
let bada = new Queen("Bada", 13, 11, 15, 12, 8, 10, 12, 12, 11, "Bada");
let bompark = new Queen("Bom", 10, 10, 13, 9, 9, 12, 11, 13, 8, "Bom");
let bora = new Queen("Bora", 11, 12, 14, 12, 8, 11, 12, 12, 10, "Bora");
let chaerin = new Queen("Chaerin", 10, 10, 10, 13, 12, 9, 9, 11, 12, "Chaerin");
let cl = new Queen("CL", 8, 11, 10, 12, 14, 9, 12, 12, 11, "CL");
let dara = new Queen("Dara", 12, 12, 9, 10, 10, 10, 13, 13, 9, "Dara");
let eugene = new Queen("Eugene", 13, 8, 12, 10, 9, 13, 12, 13, 8, "Eugene");
let haeyoon = new Queen("Haeyoon", 11, 9, 14, 9, 10, 12, 10, 12, 9, "Haeyoon");
let heojiwon = new Queen("Heo Jiwon", 10, 11, 11, 12, 10, 10, 9, 13, 11, "HeoJiwon");
let hwasa = new Queen("Hwasa", 8, 8, 12, 11, 13, 7, 13, 11, 10, "Hwasa");
let mei = new Queen("May", 8, 10, 8, 13, 9, 13, 9, 13, 12, "May");
let minzy = new Queen("Minzy", 8, 9, 12, 14, 10, 11, 8, 12, 13, "Minzy");
let moonbyul = new Queen("Moonbyul", 7, 11, 11, 12, 13, 7, 13, 10, 10, "Moonbyul");
let remi = new Queen("Remi", 8, 9, 8, 14, 9, 12, 8, 13, 12, "Remi");
let shoo = new Queen("Shoo", 12, 7, 9, 12, 13, 10, 8, 13, 9, "Shoo");
let solarkim = new Queen("Solar", 9, 12, 13, 7, 12, 12, 12, 13, 10, "Solar");
let wheein = new Queen("Wheein", 9, 8, 13, 12, 10, 10, 9, 11, 9, "Wheein");
let yuju = new Queen("Yuju", 11, 8, 11, 10, 8, 10, 9, 12, 9, "Yuju");
let us_season21 = [bada, bompark, bora, chaerin, cl, dara, eugene, haeyoon, heojiwon, hwasa, mei, minzy, moonbyul, remi, shoo, solarkim, wheein, yuju];
//ALL STARS 9
let allstars_9 = [ailee, byeongkwan, hoshi, hwanwoong, hyunjae, jisoo, keeho, kei, moonbin, jichangmin, sakura, seungkwan, taeyeon, yena, yeonhee, yves];
//SEASON 22
let andy = new Queen("Andy", 8, 8, 10, 8, 9, 12, 13, 11, 8, "Andy");
let aron = new Queen("Aron", 10, 8, 7, 12, 13, 10, 13, 11, 10, "Aron");
let baekho = new Queen("Baekho", 11, 10, 14, 9, 12, 11, 13, 13, 9, "Baekho");
let dongwan = new Queen("Dongwan", 13, 11, 10, 8, 9, 10, 11, 10, 8, "Dongwan");
let ericmun = new Queen("Eric Mun", 13, 10, 8, 10, 9, 8, 13, 10, 9, "EricMun");
let hyesung = new Queen("Hyesung", 8, 12, 13, 8, 14, 9, 10, 12, 10, "Hyesung");
let jonghyun = new Queen("JR", 10, 10, 9, 13, 13, 9, 12, 13, 11, "JR");
let junghwan = new Queen("Junghwan", 9, 10, 12, 9, 11, 8, 7, 10, 9, "Junghwan");
let junjin = new Queen("Junjin", 10, 8, 9, 11, 8, 11, 12, 12, 9, "Junjin");
let kibum = new Queen("Key", 10, 13, 9, 12, 13, 13, 12, 15, 12, "Key");
let leeminwoo = new Queen("Lee Minwoo", 7, 8, 12, 13, 7, 11, 9, 11, 10, "LeeMinwoo");
let minho = new Queen("Minho", 12, 10, 8, 9, 11, 8, 13, 13, 10, "Minho");
let minhyun = new Queen("Minhyun", 12, 10, 11, 8, 12, 11, 13, 14, 8, "Minhyun");
let onew = new Queen("Onew", 11, 9, 13, 9, 10, 10, 12, 12, 9, "Onew");
let ren = new Queen("Ren", 13, 8, 9, 12, 13, 13, 10, 14, 11, "Ren");
let seongjun = new Queen("Seongjun", 8, 8, 10, 12, 8, 10, 8, 11, 9, "Seongjun");
let sihun = new Queen("Sihun", 9, 10, 8, 13, 11, 10, 11, 12, 11, "Sihun");
let taemin = new Queen("Taemin", 8, 11, 10, 15, 10, 8, 10, 12, 14, "Taemin");
let us_season22 = [andy, aron, baekho, dongwan, ericmun, hyesung, jonghyun, junghwan, junjin, kibum, leeminwoo, minho, minhyun, onew, ren, seongjun, sihun, taemin];
//SEASON 23
let choa = new Queen("Choa", 10, 10, 14, 9, 11, 12, 9, 13, 10, "Choa");
let daisy = new Queen("Daisy", 8, 12, 8, 14, 10, 11, 11, 12, 11, "Daisy");
let elkie = new Queen("Elkie", 12, 7, 12, 11, 10, 12, 8, 14, 10, "Elkie");
let hanbin = new Queen("Hanbin", 8, 11, 8, 14, 15, 9, 13, 11, 9, "Hanbin");
let hurhyunjun = new Queen("Hur Hyunjun", 10, 12, 9, 14, 11, 12, 7, 14, 13, "HurHyunjun");
let hyunjoo = new Queen("Hyunjoo", 11, 8, 8, 9, 11, 13, 12, 14, 8, "Hyunjoo");
let jaeseok = new Queen("Jaeseok", 8, 12, 7, 12, 10, 9, 11, 11, 9, "Jaeseok");
let jaypark = new Queen("Jay Park", 7, 7, 10, 10, 10, 9, 12, 10, 7, "JayPark");
let kimjaejoong = new Queen("Jaejoong", 12, 11, 14, 8, 12, 9, 13, 12, 10, "Jaejoong");
let kokoro = new Queen("Kokoro", 10, 9, 10, 13, 9, 12, 8, 14, 12, "Kokoro");
let laun = new Queen("Laun", 9, 11, 8, 14, 8, 10, 9, 11, 11, "Laun");
let namtaehyun = new Queen("Nam Taehyun", 8, 10, 13, 8, 12, 9, 11, 11, 7, "NamTaehyun");
let wonho = new Queen("Wonho", 8, 10, 11, 12, 11, 9, 13, 13, 11, "Wonho");
let woojin = new Queen("Woojin", 7, 7, 12, 8, 7, 6, 9, 9, 7, "Woojin");
let yeonwoo = new Queen("Yeonwoo", 10, 9, 9, 12, 9, 12, 9, 14, 12, "Yeonwoo");
let yookyung = new Queen("Yookyung", 8, 10, 11, 10, 8, 11, 9, 13, 9, "Yookyung");
let yulhee = new Queen("Yulhee", 10, 9, 10, 13, 12, 10, 9, 12, 12, "Yulhee");
let zitao = new Queen("Zitao", 11, 13, 8, 12, 9, 10, 13, 13, 11, "Zitao");
let us_season23 = [choa, daisy, elkie, hanbin, hurhyunjun, hyunjoo, jaeseok, jaypark, kimjaejoong, kokoro, laun, namtaehyun, wonho, woojin, yeonwoo, yookyung, yulhee, zitao];
//SEASON 24
let baeyoonjung = new Queen("Bae Yoonjung", 9, 10, 8, 14, 9, 12, 7, 11, 12, "BaeYoonjung");
let bravebros = new Queen("Brave Brothers", 7, 6, 9, 7, 12, 7, 10, 9, 8, "BraveBrothers");
let choikyusung = new Queen("Choi Kyusung", 8, 11, 13, 6, 11, 10, 12, 11, 7, "ChoiKyusung");
let choiyoungjoon = new Queen("Choi Youngjoon", 9, 7, 12, 14, 12, 9, 10, 12, 12, "ChoiYoungjoon");
let hwanghyun = new Queen("Hwang Hyun", 12, 8, 7, 6, 15, 10, 11, 13, 8, "HwangHyun");
let jadenjeong = new Queen("Jaden Jeong", 11, 6, 9, 7, 11, 13, 14, 11, 9, "JadenJeong");
let jangjinyoung = new Queen("Jang Jinyoung", 7, 11, 13, 11, 6, 8, 10, 13, 8, "JangJinyoung");
let jypark = new Queen("JYPark", 11, 8, 10, 9, 9, 6, 12, 10, 8, "JYPark");
let kenzie = new Queen("Kenzie", 12, 12, 9, 8, 13, 13, 8, 12, 10, "Kenzie");
let kimhyeim = new Queen("Kim Hyeim", 8, 13, 10, 9, 8, 13, 14, 10, 8, "KimHyeim");
let kimsungeun = new Queen("Kim Sungeun", 8, 9, 14, 12, 8, 8, 12, 11, 9, "KimSungeun");
let liakim = new Queen("Lia Kim", 11, 11, 7, 15, 6, 12, 11, 13, 13, "LiaKim");
let mihawk = new Queen("Mihawk", 7, 13, 6, 15, 10, 9, 12, 10, 12, "Mihawk");
let minheejin = new Queen("Min Heejin", 11, 9, 9, 8, 12, 13, 8, 13, 8, "MinHeejin");
let parknaejoo = new Queen("Park Naejoo", 12, 10, 10, 9, 9, 13, 12, 13, 10, "ParkNaejoo");
let parknayeon = new Queen("Park Nayeon", 7, 9, 8, 7, 12, 13, 9, 12, 8, "ParkNayeon");
let sai = new Queen("PSY", 12, 12, 10, 9, 6, 8, 13, 11, 10, "PSY");
let seongwonmo = new Queen("Seong Wonmo", 11, 10, 9, 8, 13, 13, 8, 12, 8, "SeongWonmo");
let us_season24 = [baeyoonjung, bravebros, choikyusung, choiyoungjoon, hwanghyun, jadenjeong, jangjinyoung, jypark, kenzie, kimhyeim, kimsungeun, liakim, mihawk, minheejin, parknaejoo, parknayeon, sai, seongwonmo];
//SEASON 25
let us_season25 = [alexa, aron, bora, dara, hueningkai, jypark, kimsungeun, kimsohyun, namjoo, seoinguk, sihun, songjoongki, wonho, woodz, woojin, yunhyeong];
//SEASON 26
let alexkim = new Queen("Alex Kim", 8, 11, 9, 12, 10, 8, 10, 9, 9, "AlexKim");
let changmin = new Queen("Changmin", 12, 10, 14, 8, 9, 8, 12, 10, 9, "Changmin");
let dasom = new Queen("Dasom", 8, 8, 9, 9, 12, 13, 12, 13, 9, "Dasom");
let hana = new Queen("Hana", 11, 9, 8, 12, 12, 10, 11, 12, 11, "Hana");
let hyolyn = new Queen("Hyolyn", 10, 10, 15, 12, 8, 9, 13, 13, 12, "Hyolyn");
let hyosung = new Queen("Hyosung", 9, 8, 12, 13, 10, 12, 9, 13, 13, "Hyosung");
let jieun = new Queen("Jieun", 12, 8, 14, 10, 8, 11, 8, 12, 10, "Jieun");
let jinwoon = new Queen("Jinwoon", 12, 9, 9, 7, 11, 10, 12, 12, 8, "Jinwoon");
let jokwon = new Queen("Jo Kwon", 11, 11, 12, 9, 10, 9, 13, 11, 10, "JoKwon");
let myunghan = new Queen("Myunghan", 7, 9, 13, 8, 11, 8, 11, 10, 8, "Myunghan");
let seulong = new Queen("Seulong", 13, 11, 10, 8, 9, 10, 9, 11, 8, "Seulong");
let soyou = new Queen("Soyou", 8, 9, 13, 10, 11, 12, 10, 11, 11, "Soyou");
let sunggu = new Queen("Sunggu", 8, 7, 13, 12, 9, 8, 11, 8, 7, "Sunggu");
let sunhwa = new Queen("Sunhwa", 13, 8, 8, 9, 12, 13, 10, 13, 7, "Sunhwa");
let yoonbora = new Queen("Yoon Bora", 12, 9, 9, 13, 8, 11, 8, 13, 13, "YoonBora");
let youngjun = new Queen("Youngjun", 10, 8, 8, 10, 11, 10, 9, 12, 9, "Youngjun");
let us_season26 = [alexkim, changmin, dasom, hana, hyolyn, hyosung, jieun, jinwoon, jokwon, myunghan, seulong, soyou, sunggu, sunhwa, yoonbora, youngjun];
//ALL STARS 10
let allstars_10 = [chani, eunbi, hanhyunmin, kevin, kimseolhyun, namjoo, ren, seojisoo, sooyoung, ten, wow, xiaojun, youha, younghoon];
//SEASON 27
let baejin = new Queen("Bae Jinyoung", 11, 8, 10, 12, 8, 10, 12, 14, 12, "Baejin");
let byunggon = new Queen("BX", 8, 10, 8, 9, 11, 10, 10, 12, 9, "BX");
let chaeryeong = new Queen("Chaeryeong", 9, 8, 9, 14, 12, 11, 7, 12, 13, "Chaeryeong");
let hyunsuk = new Queen("Hyunsuk", 10, 8, 10, 11, 11, 8, 13, 12, 11, "Hyunsuk");
let jisu = new Queen("Lia", 7, 9, 11, 7, 9, 12, 7, 13, 7, "Lia");
let ryujin = new Queen("Ryujin", 11, 8, 9, 12, 9, 13, 12, 12, 13, "Ryujin");
let seunghun = new Queen("Seunghun", 11, 12, 14, 11, 9, 8, 12, 11, 11, "Seunghun");
let yeji = new Queen("Yeji", 9, 9, 10, 13, 8, 11, 11, 13, 12, "Yeji");
let yonghee = new Queen("Yonghee", 10, 9, 9, 9, 10, 12, 10, 13, 10, "Yonghee");
let yuna = new Queen("Yuna", 8, 10, 8, 12, 8, 11, 13, 13, 12, "Yuna");
let us_season27 = [alexkim, baejin, byunggon, chaeryeong, dasom, hyunsuk, jisu, ryujin, seulong, seunghun, soyou, yeji, yonghee, yuna];
//ALL STARS 11
let allstars_11 = [bobby, choa, heojiwon, holland, hurhyunjun, jungeunji, jeno, joshua, jongseob, leedo, leejieun, shuhua, soul, zuho];
//SEASON 28
let aurorah = new Queen("Aurora", 8, 10, 9, 11, 9, 10, 11, 12, 10, "Aurora");
let chaebin = new Queen("Chaebin", 10, 11, 13, 8, 9, 9, 9, 13, 8, "Chaebin");
let diwon = new Queen("D1", 9, 11, 9, 13, 8, 9, 12, 13, 12, "D1");
let echan = new Queen("E-Chan", 10, 12, 9, 12, 12, 8, 12, 11, 12, "EChan");
let gwanghyun = new Queen("GK", 8, 9, 8, 9, 12, 10, 9, 10, 9, "GK");
let haru = new Queen("Haru", 7, 9, 10, 14, 8, 9, 11, 12, 13, "Haru");
let harryjune = new Queen("Harry June", 7, 7, 8, 11, 9, 10, 7, 11, 8, "HarryJune");
let heechan = new Queen("Heechan", 9, 9, 7, 13, 8, 12, 10, 12, 10, "Heechan");
let junseo = new Queen("Junseo", 6, 8, 9, 11, 6, 9, 10, 9, 9, "Junseo");
let kimsohee = new Queen("Kim Sohee", 11, 7, 13, 9, 11, 8, 10, 11, 11, "KimSohee");
let lohah = new Queen("Loha", 11, 9, 10, 13, 9, 11, 8, 11, 12, "Loha");
let luneh = new Queen("Lune", 12, 7, 9, 10, 7, 11, 6, 13, 8, "Lune");
let limhayoung = new Queen("Lu", 9, 8, 11, 9, 10, 12, 11, 9, 9, "Lu");
let saebom = new Queen("Saebom", 10, 10, 10, 12, 8, 12, 8, 12, 11, "Saebom");
let sunsyan = new Queen("Sunshine", 7, 7, 12, 9, 8, 12, 9, 10, 8, "Sunshine");
let teoh = new Queen("Teo", 7, 9, 13, 11, 11, 8, 9, 12, 10, "Teo");
let uchae = new Queen("Uchae", 7, 8, 8, 11, 8, 9, 10, 13, 10, "Uchae");
let yuku = new Queen("Yuku", 10, 11, 10, 13, 8, 9, 11, 12, 12, "Yuku");
let us_season28 = [aurorah, chaebin, diwon, echan, gwanghyun, haru, harryjune, heechan, junseo, kimsohee, lohah, luneh, limhayoung, saebom, sunsyan, teoh, uchae, yuku];
//ALL STARS 12
let allstars_12 = [beomgyu, hyolyn, jokwon, jungeunji, kimwoobin, leehi, mei, remi, ryujin, sungchan, taemin, winwin, woodz, yootaeyang];
//SEASON 29
let aquinas = new Queen("Aquinas", 9, 12, 9, 10, 13, 12, 9, 11, 10, "Aquinas");
let hanseohee = new Queen("Han Seohee", 10, 9, 7, 9, 10, 8, 11, 10, 9, "HanSeohee");
let jungilhoon = new Queen("Ilhoon", 11, 11, 9, 7, 13, 8, 14, 12, 12, "Ilhoon");
let kriswu = new Queen("Kris Wu", 11, 8, 7, 10, 7, 8, 9, 10, 9, "KrisWu");
let kwonmina = new Queen("Kwon Mina", 12, 10, 8, 8, 8, 12, 9, 13, 9, "KwonMina");
let kyulkyung = new Queen("Kyulkyung", 12, 9, 9, 9, 12, 10, 8, 14, 12, "Kyulkyung");
let marktuan = new Queen("Mark Tuan", 8, 8, 7, 11, 9, 7, 10, 9, 10, "MarkTuan");
let seohajun = new Queen("Seo Hajoon", 13, 9, 9, 7, 8, 11, 12, 11, 8, "SeoHajoon");
let seungri = new Queen("Seungri", 8, 7, 8, 8, 9, 8, 10, 8, 9, "Seungri");
let shinjimin = new Queen("Shin Jimin", 8, 11, 8, 10, 11, 9, 13, 12, 11, "ShinJimin");
let shownu = new Queen("Shownu", 8, 12, 11, 12, 10, 7, 8, 10, 11, "Shownu");
let siwon = new Queen("Siwon", 11, 6, 9, 10, 9, 8, 11, 12, 7, "Siwon");
let sorn = new Queen("Sorn", 9, 9, 12, 8, 9, 12, 7, 12, 9, "Sorn");
let choitop = new Queen("T.O.P", 10, 8, 7, 10, 8, 13, 11, 10, 9,  "TOP");
let taehyung = new Queen("V", 9, 11, 8, 10, 12, 10, 9, 13, 10, "V");
let us_season29 = [aquinas, hanseohee, jungilhoon, kriswu, kwonmina, kyulkyung, marktuan, seohajun, seungri, shinjimin, shownu, siwon, sorn, choitop, taehyung];
//SEASON 30
let caibing = new Queen("Cai Bing", 8, 8, 9, 10, 10, 9, 8, 12, 11, "CaiBing");
let fuyaning = new Queen("Fu Yaning", 10, 9, 9, 10, 9, 8, 13, 11, 10, "FuYaning");
let itomiyu = new Queen("Ito Miyu", 8, 7, 9, 8, 9, 13, 8, 13, 8, "ItoMiyu");
let kamikurarei = new Queen("Kamikura Rei", 9, 9, 8, 10, 8, 9, 12, 10, 9, "KamikuraRei");
let kotone = new Queen("Kamimoto Kotone", 10, 9, 9, 11, 11, 12, 8, 12, 10, "KamimotoKotone");
let kimdoah = new Queen("Kim Doah", 11, 12, 9, 12, 8, 11, 12, 13, 13, "KimDoah");
let kimhyerim = new Queen("Kim Hyerim", 7, 10, 13, 12, 10, 8, 8, 10, 8, "KimHyerim");
let kimsein = new Queen("Kim Sein", 6, 7, 12, 9, 8, 7, 10, 12, 7, "KimSein");
let leechaeyun = new Queen("Lee Chaeyun", 12, 10, 10, 8, 9, 10, 9, 11, 9, "LeeChaeyun");
let liangjiao = new Queen("Liang Jiao", 8, 12, 8, 11, 8, 9, 13, 12, 11, "LiangJiao");
let liangqiao = new Queen("Liang Qiao", 7, 12, 9, 12, 7, 9, 12, 12, 10, "LiangQiao");
let nagaimanami = new Queen("Nagai Manami", 10, 8, 10, 10, 12, 9, 11, 13, 10, "NagaiManami");
let nonakashana = new Queen("Nonaka Shana", 10, 11, 12, 8, 8, 11, 7, 13, 10, "NonakaShana");
let wenzhe = new Queen("Wen Zhe", 12, 13, 10, 8, 8, 8, 14, 11, 11, "WenZhe");
let wutammy = new Queen("Wu Tammy", 7, 9, 8, 10, 8, 12, 8, 11, 8, "WuTammy");
let yoonjia = new Queen("Yoon Jia", 7, 8, 9, 13, 12, 9, 11, 10, 12, "YoonJia");
let youdayeon = new Queen("You Dayeon", 10, 8, 10, 11, 10, 12, 7, 13, 12, "YouDayeon");
let yurina = new Queen("Kawaguchi Yurina", 13, 9, 10, 9, 11, 13, 8, 13, 10, "Yurina");
let us_season30 = [caibing, fuyaning, itomiyu, kamikurarei, kotone, kimdoah, kimhyerim, kimsein, leechaeyun, liangjiao, liangqiao, nagaimanami, nonakashana, wenzhe, wutammy, yoonjia, youdayeon, yurina];
//ALL STARS 13
let allstars_13 = [chaeryeong, chaeunwoo, choerry, choiyoojung, chuu, dino, doyoung, kikomizuhara, luv, rie, seohajun, theo, wonho, yeji];
//SEASON 31
let alexanderlee = new Queen("Alex", 9, 11, 8, 11, 9, 11, 12, 11, 10, "Alex");
let baeseungmin = new Queen("Bae Seungmin", 8, 8, 12, 8, 10, 10, 9, 9, 9, "BaeSeungmin");
let bomin = new Queen("Bomin", 12, 9, 8, 11, 12, 9, 12, 13, 9, "Bomin");
let bongjaehyun = new Queen("Bong Jaehyun", 9, 7, 10, 10, 9, 10, 13, 12, 10, "BongJae");
let chajunho = new Queen("Cha Junho", 10, 10, 11, 10, 10, 12, 9, 13, 10, "ChaJunho");
let daeyeol = new Queen("Daeyeol", 11, 10, 10, 10, 8, 8, 12, 10, 9, "Daeyeol");
let donghyun = new Queen("Donghyun", 8, 8, 9, 13, 12, 9, 11, 9, 11, "Donghyun");
let hwangyunseong = new Queen("Yunseong", 9, 10, 9, 14, 11, 8, 10, 12, 13, "Yunseong");
let jangjun = new Queen("Jangjun", 12, 15, 8, 9, 13, 7, 13, 11, 12, "Jangjun");
let jibeom = new Queen("Jibeom", 11, 11, 10, 9, 8, 12, 10, 13, 10, "Jibeom");
let joochan = new Queen("Joochan", 10, 12, 13, 8, 9, 10, 10, 11, 11, "Joochan");
let joochanguk = new Queen("Changuk", 9, 9, 11, 10, 8, 8, 10, 9, 9, "Changuk");
let kimdongyun = new Queen("Dongyun", 10, 8, 8, 11, 12, 9, 10, 10, 11, "Dongyun");
let kimminseo = new Queen("Kim Minseo", 11, 8, 9, 9, 8, 7, 8, 11, 7, "KimMinseo");
let leehyeop = new Queen("Lee Hyeop", 10, 11, 13, 9, 12, 9, 10, 11, 8, "LeeHyeop");
let youngtaek = new Queen("TAG", 10, 11, 9, 12, 11, 10, 9, 13, 10, "TAG");
let seongyoon = new Queen("Y", 11, 11, 14, 9, 9, 13, 9, 13, 10, "Y");
let us_season31 = [alexanderlee, baeseungmin, bomin, bongjaehyun, chajunho, daeyeol, donghyun, hwangyunseong, jangjun, jibeom, joochan, joochanguk, kimdongyun, kimminseo, leehyeop, youngtaek, seongyoon];
//SEASON 32
let bella = new Queen("Bella", 9, 9, 11, 10, 12, 11, 13, 13, 11, "Bella");
let byungchan = new Queen("Byungchan", 11, 11, 9, 10, 9, 12, 13, 13, 10, "Byungchan");
let chaejeong = new Queen("Chaejeong", 8, 9, 8, 13, 10, 9, 11, 12, 9, "Chaejeong");
let ej = new Queen("EJ", 8, 10, 9, 11, 11, 12, 12, 11, 10, "EJ");
let hanse = new Queen("Hanse", 8, 8, 8, 11, 13, 9, 10, 9, 9, "Hanse");
let heochan = new Queen("Heo Chan", 8, 10, 9, 13, 8, 9, 11, 10, 9, "HeoChan");
let hyeseong = new Queen("Hyeseong", 8, 9, 11, 11, 12, 9, 8, 12, 12, "Hyeseong");
let karin = new Queen("Karin", 11, 10, 11, 9, 10, 10, 12, 11, 11, "Karin");
let sejun = new Queen("Sejun", 11, 8, 11, 8, 8, 12, 10, 11, 8, "Sejun");
let seungsik = new Queen("Seungsik", 9, 10, 13, 8, 10, 9, 12, 11, 9, "Seungsik");
let seungwoo = new Queen("Seungwoo", 12, 9, 12, 12, 8, 9, 13, 13, 10, "Seungwoo");
let soheekim = new Queen("Sohee Kim", 10, 10, 12, 12, 10, 8, 11, 13, 12, "SoheeKim");
let subin = new Queen("Subin", 12, 10, 8, 9, 9, 11, 12, 12, 10, "Subin");
let yukyung = new Queen("Yukyung", 11, 9, 9, 14, 9, 12, 9, 13, 10, "Yukyung");
let us_season32 = [bella, byungchan, chaejeong, ej, hanse, heochan, hyeseong, karin, sejun, seungsik, seungwoo, soheekim, subin, yukyung];
//SEASON 33
let chahun = new Queen("Cha Hun", 9, 8, 10, 9, 9, 10, 9, 11, 8, "ChaHun");
let dojoon = new Queen("Dojoon", 10, 10, 12, 8, 10, 8, 10, 9, 9, "Dojoon");
let dongsung = new Queen("Dongsung", 7, 8, 9, 9, 11, 8, 8, 11, 7, "Dongsung");
let dowoon = new Queen("Dowoon", 8, 11, 8, 8, 9, 8, 12, 10, 8, "Dowoon");
let hajoon = new Queen("Hajoon", 9, 8, 8, 7, 9, 11, 8, 9, 8, "Hajoon");
let hweseung = new Queen("Hwesung", 8, 9, 13, 7, 11, 9, 10, 11, 8, "Hwesung");
let jaehyung = new Queen("Jae", 8, 8, 11, 7, 10, 7, 12, 10, 9, "Jae");
let jaehyeong = new Queen("Jaehyeong", 11, 9, 10, 7, 8, 10, 10, 10, 9, "Jaehyeong");
let kimjaehyun = new Queen("Kim Jaehyun", 12, 12, 8, 8, 9, 10, 12, 10, 9, "KimJaehyun");
let seunghyub = new Queen("Seunghyub", 12, 9, 9, 8, 10, 9, 12, 11, 9, "Seunghyub");
let sungjin = new Queen("Sungjin", 9, 10, 13, 8, 11, 8, 9, 10, 9, "Sungjin");
let wonpil = new Queen("Wonpil", 9, 8, 12, 8, 12, 11, 9, 12, 9, "Wonpil");
let woosung = new Queen("Woosung", 10, 9, 11, 9, 12, 10, 12, 11, 9, "Woosung");
let youngk = new Queen("Young K", 9, 9, 11, 9, 14, 9, 12, 8, 10, "YoungK");
let us_season33 = [chahun, dojoon, dongsung, dowoon, hajoon, hweseung, jaehyung, jaehyeong, kimjaehyun, seunghyub, subin, sungjin, wonpil, woosung, youngk];
//SEASON 34
let arin = new Queen("Arin", 11, 8, 8, 10, 8, 10, 12, 13, 8, "Arin");
let binnie = new Queen("Yubin", 12, 9, 10, 10, 8, 11, 8, 12, 8, "Yubin");
let heeseung = new Queen("Heeseung", 10, 8, 11, 11, 9, 9, 8, 10, 11, "Heeseung");
let hyojung = new Queen("Hyojung", 10, 11, 13, 9, 8, 12, 13, 12, 10, "Hyojung");
let jake = new Queen("Jake", 8, 9, 9, 10, 8, 10, 9, 11, 11, "Jake");
let jongseong = new Queen("Jay", 10, 8, 9, 10, 11, 10, 10, 12, 10, "Jay");
let jiho = new Queen("Jiho", 11, 8, 10, 9, 9, 13, 8, 13, 9, "Jiho");
let jungwon = new Queen("Jungwon", 9, 8, 10, 12, 9, 8, 11, 11, 9, "Jungwon");
let mimee = new Queen("Mimi", 10, 10, 9, 13, 12, 8, 8, 11, 11, "Mimi");
let nikee = new Queen("Ni-ki", 9, 11, 8, 13, 8, 11, 9, 12, 12, "Niki");
let seunghee = new Queen("Seunghee", 11, 14, 13, 9, 8, 8, 13, 11, 10, "Seunghee");
let sunghoon = new Queen("Sunghoon", 11, 11, 8, 9, 8, 8, 10, 11, 8, "Sunghoon");
let sunoo = new Queen("Sunoo", 11, 12, 11, 8, 9, 9, 9, 13, 10, "Sunoo");
let yooa = new Queen("YooA", 9, 8, 10, 14, 8, 10, 8, 11, 13, "YooA");
let us_season34 = [arin, binnie, dongsung, heeseung, hyojung, jake, jongseong, jiho, jungwon, mimee, nikee, seunghee, sunghoon, sunoo, yooa];
//SEASON 35
let choiyujin = new Queen("Choi Yujin", 11, 9, 9, 12, 8, 11, 10, 12, 11, "ChoiYujin");
let eunbin = new Queen("Eunbin", 11, 8, 8, 9, 9, 12, 12, 12, 9, "Eunbin");
let ezakihikaru = new Queen("Ezaki Hikaru", 8, 11, 8, 14, 8, 10, 9, 10, 12, "EzakiHikaru");
let gaeul = new Queen("Gaeul", 9, 9, 8, 13, 8, 11, 9, 12, 11, "Gaeul");
let hueningbahiyyih = new Queen("Huening Bahiyyih", 7, 9, 8, 9, 10, 10, 7, 11, 8, "HueningBahiyyih");
let kangyeseo = new Queen("Kang Yeseo", 13, 10, 9, 11, 9, 11, 12, 13, 10, "KangYeseo");
let kimchaehyun = new Queen("Kim Chaehyun", 8, 9, 13, 8, 9, 11, 8, 12, 9, "KimChaehyun");
let kimdayeon = new Queen("Kim Dayeon", 9, 10, 9, 12, 10, 9, 11, 11, 11, "KimDayeon");
let leeseo = new Queen("Leeseo", 10, 11, 10, 9, 8, 10, 10, 13, 10, "Leeseo");
let leez = new Queen("Liz", 9, 9, 11, 9, 9, 11, 8, 13, 9, "Liz");
let ohseunghee = new Queen("Oh Seunghee", 9, 12, 14, 8, 9, 9, 9, 12, 9, "OhSeunghee");
let reinaoi = new Queen("Rei", 8, 9, 8, 10, 8, 13, 10, 13, 10, "Rei");
let sakamotomashiro = new Queen("Sakamoto Mashiro", 10, 8, 10, 9, 9, 11, 11, 12, 8, "SakamotoMashiro");
let shenxiaoting = new Queen("Shen Xiaoting", 10, 10, 9, 12, 8, 12, 10, 13, 11, "ShenXiaoting");
let seoyoungeun = new Queen("Seo Youngeun", 10, 12, 10, 11, 9, 8, 11, 11, 12, "SeoYoungeun");
let seungyeon = new Queen("Seungyeon", 9, 8, 10, 14, 9, 9, 13, 11, 14, "Seungyeon");
let yeeun = new Queen("Yeeun", 8, 10, 9, 10, 12, 10, 13, 13, 12, "Yeeun");
let us_season35 = [choiyujin, eunbin, ezakihikaru, gaeul, hueningbahiyyih, kangyeseo, kimchaehyun, kimdayeon, leeseo, leez, ohseunghee, reinaoi, sakamotomashiro, shenxiaoting, seoyoungeun, seungyeon, yeeun];
//SEASON 36
let bangyongguk = new Queen("Bang Yongguk", 9, 10, 9, 10, 13, 8, 12, 11, 10, "BangYongguk");
let choiyuju = new Queen("Choi Yuju", 9, 9, 13, 10, 9, 10, 8, 11, 9, "ChoiYuju");
let eunha = new Queen("Eunha", 10, 9, 11, 9, 8, 12, 9, 12, 9, "Eunha");
let himchan = new Queen("Himchan", 8, 9, 8, 9, 9, 8, 12, 9, 9, "Himchan");
let jongup = new Queen("Jongup",  8, 8, 9, 13, 10, 9, 10, 10, 8, "Jongup");
let jungdaehyun = new Queen("Jung Daehyun", 12, 8, 13, 9, 8, 8, 12, 12, 10, "JungDaehyun");
let sinb = new Queen("SinB", 9, 9, 9, 13, 8, 10, 11, 12, 12, "SinB");
let sowon = new Queen("Sowon", 11, 9, 8, 9, 8, 10, 11, 12, 8, "Sowon");
let umji = new Queen("Umji", 8, 8, 9, 10, 9, 10, 9, 12, 8, "Umji");
let yerin = new Queen("Yerin", 9, 11, 9, 13, 10, 8, 13, 13, 11, "Yerin");
let yooyoungjae = new Queen("Yoo Youngjae", 9, 10, 11, 9, 8, 10, 9, 11, 8, "YooYoungjae");
let zelo = new Queen("Zelo", 9, 10, 8, 11, 10, 9, 10, 12, 10, "Zelo");
let us_season36 = [bangyongguk, choiyuju, eunha, himchan, jongup, jungdaehyun, sinb, sowon, umji, yerin, yooyoungjae, zelo];
//SEASON 37
let baejinsol = new Queen("BAE", 9, 9, 7, 11, 10, 10, 7, 11, 7, "BAE");
let haewon = new Queen("Haewon", 9, 9, 10, 9, 9, 9, 8, 10, 9, "Haewon");
let haram = new Queen("Haram", 8, 8, 13, 8, 9, 12, 8, 10, 9, "Haram");
let haruna = new Queen("Haruna", 7, 8, 7, 8, 9, 13, 8, 13, 8, "Haruna");
let isa = new Queen("Isa", 11, 7, 9, 13, 9, 12, 8, 12, 11, "Isa");
let jei = new Queen("J", 9, 8, 7, 7, 12, 11, 8, 11, 9, "J");
let jinni = new Queen("Jinni", 8, 7, 11, 11, 10, 8, 9, 11, 8, "Jinni");
let jiwoo = new Queen("Jiwoo", 10, 8, 9, 9, 9, 11, 7, 10, 9, "Jiwoo");
let kyujin = new Queen("Kyujin", 8, 11, 12, 12, 7, 7, 12, 11, 11, "Kyujin");
let lily = new Queen("Lily", 8, 10, 14, 8, 10, 10, 11, 11, 8, "Lily");
let moonsua = new Queen("Moon Sua", 9, 9, 10, 10, 11, 8, 9, 11, 10, "MoonSua");
let saay = new Queen("SAAY", 8, 10, 12, 13, 11, 8, 8, 11, 11, "SAAY");
let seeun = new Queen("Seeun", 11, 9, 8, 10, 8, 8, 10, 13, 9, "Seeun");
let sheon = new Queen("Sheon", 8, 8, 9, 12, 9, 10, 10, 11, 12, "Sheon");
let sieun = new Queen("Sieun", 13, 12, 11, 10, 7, 9, 11, 10, 10, "Sieun");
let siyoon = new Queen("Siyoon", 11, 10, 7, 11, 10, 8, 8, 12, 11, "Siyoon");
let suhyeon = new Queen("Suhyeon", 9, 8, 12, 11, 9, 9, 10, 11, 9, "Suhyeon");
let sullyoon = new Queen("Sullyoon", 10, 8, 10, 10, 8, 10, 7, 11, 10, "Sullyoon");
let sumin = new Queen("Sumin", 12, 9, 7, 12, 8, 11, 10, 12, 10, "Sumin");
let tsuki = new Queen("Tsuki", 11, 10, 8, 11, 8, 12, 11, 12, 12, "Tsuki");
let yoon = new Queen("Yoon", 9, 13, 10, 7, 11, 9, 12, 12, 10, "Yoon");
let us_season37 = [baejinsol, haewon, haram, haruna, isa, jei, jinni, jiwoo, kyujin, lily, moonsua, saay, seeun, sheon, sieun, siyoon, suhyeon, sullyoon, sumin, tsuki, yoon];
//NAM SEASON 1
let adele = new Queen("Adele", 10, 11, 14, 8, 13, 9, 13, 11, 8, "Adele");
let arianagrande = new Queen("Ariana Grande", 12, 8, 15, 12, 9, 12, 10, 12, 10, "ArianaGrande");
let carlyrae = new Queen("Carly Rae Jepsen", 12, 10, 12, 9, 10, 12, 11, 13, 9, "CarlyRaeJepsen");
let katyperry = new Queen("Katy Perry", 10, 10, 12, 12, 11, 12, 12, 13, 11, "KatyPerry");
let kesha = new Queen("Kesha", 11, 8, 12, 12, 11, 10, 10, 11, 10, "Kesha");
let ladygaga = new Queen("Lady Gaga", 14, 11, 13, 12, 14, 10, 10, 15, 13, "LadyGaga");
let lanadelrey = new Queen("Lana Del Rey", 8, 9, 11, 9, 12, 10, 11, 10, 8, "LanaDelRey");
let lorde = new Queen("Lorde", 7, 13, 10, 9, 15, 10, 12, 11, 9, "Lorde");
let marina = new Queen("MARINA", 9, 12, 13, 10, 14, 10, 9, 13, 11, "MARINA");
let onika = new Queen("Nicki Minaj", 8, 11, 10, 13, 13, 8, 11, 12, 12, "NickiMinaj");
let rihanna = new Queen("Rihanna", 11, 8, 11, 12, 10, 15, 12, 14, 12, "Rihanna");
let taylorswift = new Queen("Taylor Swift", 11, 11, 11, 10, 15, 10, 12, 11, 9, "TaylorSwift");
let nam_season1 = [adele, arianagrande, carlyrae, katyperry, kesha, ladygaga, lanadelrey, lorde, marina, onika, rihanna, taylorswift];
//NAM SEASON 2
let avamax = new Queen("Ava Max", 8, 9, 12, 9, 8, 12, 12, 13, 10, "AvaMax");
let billie = new Queen("Billie Eilish", 8, 10, 10, 6, 11, 7, 8, 13, 8, "BillieEilish");
let camilla = new Queen("Camila Cabello", 12, 9, 12, 8, 6, 8, 11, 12, 9, "CamilaCabello");
let cardib = new Queen("Cardi B", 8, 13, 8, 12, 9, 9, 12, 13, 10, "CardiB");
let charlixcx = new Queen("Charli XCX", 9, 8, 11, 10, 12, 10, 8, 12, 9, "CharliXCX");
let dojacat = new Queen("Doja Cat", 9, 12, 11, 13, 10, 8, 9, 12, 11, "DojaCat");
let dualipa = new Queen("Dua Lipa", 7, 9, 11, 9, 8, 13, 8, 11, 8, "DuaLipa");
let halsey = new Queen("Halsey", 12, 8, 12, 8, 11, 8, 12, 12, 7, "Halsey");
let megantheestallion = new Queen("Megan Thee Stallion", 9, 11, 7, 13, 12, 11, 7, 12, 12, "MeganTheeStallion");
let melaniemartinez = new Queen("Melanie Martinez", 13, 12, 11, 10, 13, 12, 8, 13, 10, "MelanieMartinez");
let oliviarodrigo = new Queen("Olivia Rodrigo", 10, 11, 12, 7, 10, 9, 11, 11, 9, "OliviaRodrigo");
let siza = new Queen("SZA", 9, 11, 10, 10, 11, 8, 9, 11, 10, "SZA");
let nam_season2 = [avamax, billie, camilla, cardib, charlixcx, dojacat, dualipa, halsey, megantheestallion, melaniemartinez, oliviarodrigo, siza];
//NAM SEASON 3
let alliex = new Queen("Allie X", 8, 10, 12, 8, 11, 13, 9, 13, 9, "AllieX");
let avril = new Queen("Avril Lavigne", 9, 8, 12, 9, 13, 11, 10, 11, 10, "AvrilLavigne");
let dababy = new Queen("DaBaby", 1, 1, 1, 1, 1, 1, 1, 1, 1, "DaBaby");
let demilovato = new Queen("Demi Lovato", 12, 9, 12, 10, 9, 9, 11, 10, 10, "DemiLovato");
let jamescharles = new Queen("James Charles", 2, 2, 1, 3, 3, 12, 1, 1, 1, "JamesCharles");
let jenniferlopez = new Queen("Jennifer Lopez", 9, 7, 9, 13, 8, 9, 10, 11, 10, "JenniferLopez");
let joejonas = new Queen("Joe Jonas", 10, 8, 11, 9, 10, 9, 11, 10, 9, "JoeJonas");
let joshuabassett = new Queen("Joshua Bassett", 10, 8, 8, 7, 8, 7, 9, 9, 8, "JoshuaBassett");
let justinbieber = new Queen("Justin Bieber", 7, 7, 9, 7, 6, 7, 8, 6, 8, "JustinBieber");
let madonna = new Queen("Madonna", 10, 8, 11, 10, 11, 11, 12, 13, 11, "Madonna");
let mariahcarey = new Queen("Mariah Carey", 9, 12, 15, 10, 12, 9, 12, 13, 10, "MariahCarey");
let sabrinacarpenter = new Queen("Sabrina Carpenter", 8, 8, 9, 9, 10, 11, 8, 12, 9, "SabrinaCarpenter");
let selenagomez = new Queen("Selena Gomez", 10, 8, 11, 11, 10, 13, 8, 12, 10, "SelenaGomez");
let shakira = new Queen("Shakira", 12, 8, 10, 14, 10, 8, 12, 13, 12, "Shakira");
let shawnmendes = new Queen("Shawn Mendes", 7, 7, 9, 7, 7, 9, 9, 8, 7, "ShawnMendes");
let theweeknd = new Queen("The Weeknd", 9, 10, 11, 9, 12, 11, 9, 12, 11, "TheWeeknd");
let nam_season3 = [alliex, avril, dababy, demilovato, jamescharles, jenniferlopez, joejonas, joshuabassett, justinbieber, madonna, mariahcarey, sabrinacarpenter, selenagomez, shakira, shawnmendes, theweeknd];
//NAM SEASON 4
let azealiabanks = new Queen("Azealia Banks", 11, 12, 8, 11, 14, 10, 11, 10, 12, "AzealiaBanks");
let britneyspears = new Queen("Britney Spears", 12, 9, 13, 13, 10, 9, 11, 13, 15, "BritneySpears");
let celinedion = new Queen("Céline Dion", 13, 10, 14, 8, 12, 12, 13, 13, 10, "CelineDion");
let cher = new Queen("Cher", 15, 13, 11, 7, 11, 10, 12, 11, 9, "Cher");
let christinaaguilera = new Queen("Christina Aguilera", 12, 10, 14, 13, 10, 10, 9, 9, 11, "ChristinaAguilera");
let hayleywilliams = new Queen("Hayley Williams", 9, 9, 13, 11, 15, 10, 11, 14, 11, "HayleyWilliams");
let jessicasimpson = new Queen("Jessica Simpson", 10, 8, 12, 10, 9, 11, 13, 11, 8, "JessicaSimpson");
let justintimberlake = new Queen("Justin Timberlake", 7, 6, 11, 14, 7, 7, 8, 9, 11, "JustinTimberlake");
let lindsaylohan = new Queen("Lindsay Lohan", 14, 13, 8, 7, 8, 9, 12, 10, 9, "LindsayLohan");
let lizgillies = new Queen("Liz Gillies", 13, 13, 12, 12, 11, 10, 13, 11, 12, "LizGillies");
let parishilton = new Queen("Paris Hilton", 7, 11, 8, 9, 6, 13, 14, 14, 9, "ParisHilton");
let rickymartin = new Queen("Ricky Martin", 11, 10, 11, 15, 12, 9, 8, 9, 13, "RickyMartin");
let ryangosling = new Queen("Ryan Gosling", 11, 11, 11, 12, 9, 8, 12, 7, 11, "RyanGosling");
let shaniahtwain = new Queen("Shaniah Twain", 10, 9, 12, 12, 14, 10, 12, 10, 11, "ShaniahTwain");
let thalia = new Queen("Thalía", 13, 12, 10, 13, 9, 9, 12, 10, 12, "Thalia");
let victoriajustice = new Queen("Victoria Justice", 10, 10, 11, 11, 10, 9, 11, 10, 10, "VictoriaJustice");
let nam_season4 = [azealiabanks, britneyspears, celinedion, cher, christinaaguilera, hayleywilliams, jessicasimpson, justintimberlake, lindsaylohan, lizgillies, parishilton, rickymartin, ryangosling, shaniahtwain, thalia, victoriajustice];
//EU SEASON 1
let bjork = new Queen("Björk", 11, 12, 14, 7, 13, 11, 8, 13, 10, "Bjork");
let elliegoulding = new Queen("Ellie Goulding", 8, 9, 12, 10, 12, 8, 9, 11, 9, "EllieGoulding");
let fwelch = new Queen("Florence Welch", 9, 8, 12, 7, 10, 10, 10, 12, 8, "FlorenceWelch");
let jessglynne = new Queen("Jess Glynne", 9, 8, 12, 9, 11, 8, 11, 11, 7, "JessGlynne");
let jessiej = new Queen("Jessie J", 8, 10, 13, 10, 11, 10, 12, 12, 10, "JessieJ");
let jessieware = new Queen("Jessie Ware", 10, 9, 12, 9, 12, 11, 13, 11, 8, "JessieWare");
let kimpetras = new Queen("Kim Petras", 9, 11, 11, 13, 9, 10, 8, 12, 11, "KimPetras");
let leonalewis = new Queen("Leona Lewis", 12, 7, 11, 9, 12, 11, 10, 12, 8, "Leona");
let perrie = new Queen("Perrie Edwards", 8, 8, 10, 10, 9, 7, 13, 11, 10, "PerrieEdwards");
let rinasawayama = new Queen("Rina Sawayama", 11, 12, 12, 11, 12, 9, 9, 13, 12, "RinaSawayama");
let ritaora = new Queen("Rita Ora", 11, 10, 11, 12, 11, 8, 8, 10, 10, "RitaOra");

let baga = new Queen("Baga Chipz", 11, 12, 6, 7, 11, 8, 9, "Baga");
let blu = new Queen("Blu Hydrangea", 5, 8, 3, 9, 9, 11, 8, "Blu");
let cheryl = new Queen("Cheryl Hole", 5, 5, 10, 6, 6, 9, 10, "Cheryl");
let crystaluk = new Queen("Crystal", 6, 5, 7, 9, 4, 8, 6, "Crystal");
let divina = new Queen("Divina De Campo", 8, 6, 7, 12, 9, 9, 9, "Divina");
let gothy = new Queen("Gothy Kendall", 4, 5, 4, 3, 5, 8, 4, "Gothy");
let scaredy = new Queen("Scaredy Kat", 3, 5, 6, 4, 4, 6, 4, "Scaredy");
let sumting = new Queen("Sum Tin Wong", 9, 9, 7, 8, 9, 8, 8, "Sum");
let viv = new Queen("The Vivienne", 10, 12, 9, 12, 12, 10, 11, "TVivienne");
let vinegar = new Queen("Vinegar Strokes", 7, 7, 7, 4, 4, 6, 7, "Vinegar");
let uk_season1 = [bjork, elliegoulding, fwelch, jessglynne, jessiej, jessieware, kimpetras, leonalewis, perrie, rinasawayama, ritaora];
//EU SEASON 2
let annemarie = new Queen("Anne-Marie", 8, 8, 10, 10, 9, 8, 10, 10, 8, "AnneMarie");
let edsheeran = new Queen("Ed Sheeran", 7, 9, 10, 9, 8, 8, 7, 9, 7, "EdSheeran");
let emmawatson = new Queen("Emma Watson", 13, 12, 8, 8, 10, 8, 11, 13, 9, "EmmaWatson");
let emilyblunt = new Queen("Emily Blunt", 13, 10, 7, 8, 8, 10, 11, 12, 9, "EmilyBlunt");
let gordonramsay = new Queen("Gordon Ramsay", 8, 11, 7, 7, 11, 9, 13, 9, 8, "GordonRamsay");
let harrystyles = new Queen("Harry Styles", 9, 9, 10, 9, 10, 9, 12, 11, 10, "HarryStyles");
let henrycavill = new Queen("Henry Cavill", 11, 8, 8, 9, 7, 9, 8, 9, 8, "HenryCavill");
let iggyazalea = new Queen("Iggy Azalea", 8, 10, 9, 10, 10, 11, 8, 12, 11, "IggyAzalea");
let joealwyn = new Queen("Joe Alwyn", 11, 10, 9, 8, 11, 9, 11, 9, 8, "JoeAlwyn");
let katewinslet = new Queen("Kate Winslet", 12, 10, 8, 8, 10, 11, 8, 11, 8, "KateWinslet");
let kylieminogue = new Queen("Kylie Minogue", 10, 9, 12, 10, 11, 9, 9, 13, 11, "KylieMinogue");
let mattyhealy = new Queen("Matty Healy", 9, 9, 10, 7, 12, 9, 9, 12, 10, "MattyHealy");
let samsmith = new Queen("Sam Smith", 10, 9, 11, 10, 9, 9, 9, 13, 9, "SamSmith");
let tovelo = new Queen("Tove Lo", 10, 10, 10, 11, 9, 11, 9, 12, 11, "ToveLo");

let awhora = new Queen("A'Whora", 9, 8, 7, 12, 9, 8, 9, "Awhora");
let asttina = new Queen("Asttina Mandella", 8, 7, 10, 9, 9, 9, 11, "Asttina");
let bimini = new Queen("Bimini Bon-Boulash", 11, 14, 9, 6, 12, 11, 12, "Bimini");
let cherry = new Queen("Cherry Valentine", 5, 6, 5, 10, 6, 11, 4, "Cherry");
let ellie = new Queen("Ellie Diamond", 8, 5, 5, 10, 7, 9, 9, "Ellie");
let ginny = new Queen("Ginny Lemon", 6, 8, 5, 7, 7, 8, 4, "Ginny");
let joe = new Queen("Joe Black", 8, 7, 4, 9, 7, 10, 8, "Joe");
let lawrence = new Queen("Lawrence Chaney", 14, 13, 3, 11, 9, 12, 14, "Lawrence");
let sister = new Queen("Sister Sister", 8, 6, 6, 4, 7, 8, 10, "Sister");
let tayce = new Queen("Tayce", 9, 9, 12, 5, 9, 9, 14, "Tayce");
let tia = new Queen("Tia Kofi", 9, 11, 8, 3, 6, 5, 12, "Tia");
let veronica = new Queen("Veronica Green", 7, 7, 11, 8, 5, 10, 8, "Veronica");
let uk_season2 = [annemarie, edsheeran, emmawatson, emilyblunt, gordonramsay, harrystyles, henrycavill, iggyazalea, joealwyn, katewinslet, kylieminogue, mattyhealy, samsmith, tovelo];
//EU SEASON 3
let caradelevingne = new Queen("Cara Delevingne", 11, 10, 7, 7, 6, 12, 11, 15, 9, "CaraDelevingne");
let chrismartin = new Queen("Chris Martin", 8, 8, 12, 8, 12, 8, 8, 6, 8, "ChrisMartin");
let danielradcliffe = new Queen("Daniel Radcliffe", 13, 11, 8, 8, 9, 9, 12, 11, 9, "DanielRadcliffe");
let eltonjohn = new Queen("Elton John", 10, 9, 13, 6, 15, 9, 12, 9, 6, "EltonJohn");
let imogenheap = new Queen("Imogen Heap", 9, 11, 11, 10, 12, 8, 9, 9, 10, "ImogenHeap");
let julieandrews = new Queen("Julie Andrews", 14, 13, 13, 9, 11, 8, 12, 11, 11, "JulieAndrews");
let leighanne = new Queen("Leigh-Anne Pinnock", 9, 10, 11, 13, 10, 11, 12, 11, 12, "LeighAnnePinnock");
let lilycollins = new Queen("Lily Collins", 11, 12, 9, 7, 7, 12, 13, 13, 9, "LilyCollins");
let milliebobby = new Queen("Millie Bobby Brown", 12, 11, 8, 6, 6, 8, 12, 11, 10, "MillieBobbyBrown");
let naomicampbell = new Queen("Naomi Campbell", 8, 8, 7, 12, 9, 14, 12, 15, 13, "NaomiCampbell");
let olivianewton = new Queen("Olivia Newton-John", 14, 10, 13, 13, 10, 11, 11, 9, 10, "OliviaNewtonJohn");
let robyn = new Queen("Robyn", 12, 8, 12, 12, 15, 14, 7, 14, 12, "Robyn");
let tildaswinton = new Queen("Tilda Swinton", 15, 13, 7, 4, 9, 13, 12, 13, 9, "TildaSwinton");
let victoriabeckham = new Queen("Victoria Beckham", 12, 7, 9, 12, 9, 13, 13, 14, 11, "VictoriaBeckham");
let uk_season3 = [caradelevingne, chrismartin, danielradcliffe, eltonjohn, imogenheap, julieandrews, leighanne, lilycollins, milliebobby, naomicampbell, olivianewton, robyn, tildaswinton, victoriabeckham];
//UK SEASON 3
let anubis = new Queen("Anubis", 6, 6, 7, 4, 5, 6, 4, "Anubis");
let charity = new Queen("Charity Kase", 8, 7, 6, 8, 8, 7, 7, "Charity");
let choriza = new Queen("Choriza May", 9, 9, 6, 9, 7, 8, 10, "Choriza");
let elektraF = new Queen("Elektra Fence", 5, 6, 5, 4, 5, 4, 9, "ElektraF");
let ella = new Queen("Ella Vaday", 9, 9, 9, 8, 7, 9, 8, "Ella");
let kitty = new Queen("Kitty Scott Claus", 10, 10, 8, 8, 8, 7, 7, "Kitty");
let krystal = new Queen("Krystal Versace", 7, 6, 8, 9, 9, 9, 8, "Krystal");
let river = new Queen("River Medway", 8, 8, 7, 5, 6, 5, 7, "River");
let scarlett = new Queen("Scarlett Harlett", 8, 7, 8, 8, 5, 8, 8, "ScarlettH");
let vanity = new Queen("Vanity Milan", 6, 9, 6, 8, 8, 7, 9, "Vanity");
let victoriaS = new Queen("Victoria Scone", 10, 10, 8, 10, 9, 9, 8, "VictoriaS");
//INTERNATIONAL ALL STARS 1
let ias_season1 = [arianagrande, bjork, carlyrae, dojacat, irene, jessiej, juyeon, kimpetras, mingyu, onika, rinasawayama, rosie];
//PH SEASON 1
let angellocsin = new Queen("Angel Locsin", 13, 10, 8, 7, 10, 11, 9, 13, 10, "AngelLocsin");
let annecurtis = new Queen("Anne Curtis", 12, 11, 7, 9, 9, 9, 13, 14, 9, "AnneCurtis");
let barbieforteza = new Queen("Barbie Forteza", 11, 10, 9, 9, 8, 9, 12, 11, 10, "BarbieForteza");
let claudinebarretto = new Queen("Claudine Barretto", 14, 10, 10, 7, 8, 8, 12, 12, 8, "Claudine");
let heartevangelista = new Queen("Heart Evangelista", 12, 9, 8, 9, 7, 9, 11, 13, 8, "HeartEvangelista");
let jolinamagdangal = new Queen("Jolina Magdangal", 11, 12, 11, 7, 8, 10, 13, 11, 9, "JolinaMagdangal");
let judyannsantos = new Queen("Judy Ann Santos", 13, 11, 8, 7, 11, 12, 11, 12, 9, "JudyAnnSantos");
let kimchiu = new Queen("Kim Chiu", 10, 12, 8, 9, 7, 11, 11, 14, 8, "KimChiu");
let lizasoberano = new Queen("Liza Soberano", 11, 8, 8, 10, 7, 12, 11, 14, 11, "LizaSoberano");
let nadinelustre = new Queen("Nadine Lustre", 11, 7, 8, 9, 8, 9, 12, 12, 9, "NadineLustre");
let reginevelasquez = new Queen("Regine Velasquez", 10, 10, 14, 7, 9, 8, 12, 11, 9, "RegineVelasquez");
let rhianramos = new Queen("Rhian Ramos", 11, 7, 9, 8, 8, 9, 10, 12, 10, "RhianRamos");
let sharoncuneta = new Queen("Sharon Cuneta", 11, 11, 12, 7, 7, 8, 11, 11, 10, "SharonCuneta");
let sunshinegarcia = new Queen("Sunshine Garcia", 9, 8, 8, 13, 11, 10, 9, 12, 12, "SunshineGarcia");

let anastarzia = new Queen("Anastarzia Anaquway", 7, 7, 6, 10, 8, 9, 11, "Starzy");
let boa = new Queen("BOA", 6, 9, 6, 7, 6, 8, 8, "BOA");
let ilona = new Queen("Ilona Verley", 7, 8, 5, 8, 8, 10, 10, "Ilona");
let jimbo = new Queen("Jimbo", 10, 11, 4, 6, 10, 11, 4, "Jimbo");
let juice = new Queen("Juice Boxx", 7, 9, 8, 4, 6, 10, 9, "Juice");
let kiara = new Queen("Kiara", 8, 7, 9, 8, 6, 8, 13, "Kiara");
let kyne = new Queen("Kyne", 5, 4, 6, 6, 6, 7, 7, "Kyne");
let lemon = new Queen("Lemon", 9, 9, 10, 4, 8, 5, 10, "Lemon");
let priyanka = new Queen("Priyanka", 12, 9, 10, 11, 6, 10, 15, "Priyanka");
let rita = new Queen("Rita Baga", 10, 9, 5, 10, 9, 12, 13, "Rita");
let bobo = new Queen("Scarlett BoBo", 9, 9, 9, 9, 9, 10, 12, "Scarlett");
let tynomi = new Queen("Tynomi Banks", 5, 7, 7, 8, 5, 9, 12, "Tynomi");
let can_season1 = [angellocsin, annecurtis, barbieforteza, claudinebarretto, heartevangelista, jolinamagdangal, judyannsantos, kimchiu, lizasoberano, nadinelustre, reginevelasquez, rhianramos, sharoncuneta, sunshinegarcia];
//PH SEASON 2
let alexgonzaga = new Queen("Alex Gonzaga", 9, 10, 8, 7, 7, 8, 12, 8, 7, "AlexGonzaga");
let beaalonzo = new Queen("Bea Alonzo", 12, 8, 8, 9, 9, 10, 8, 12, 8, "BeaAlonzo");
let cristinereyes = new Queen("Cristine Reyes", 12, 10, 7, 12, 8, 10, 8, 13, 12, "CristineReyes");
let ellenadarna = new Queen("Ellen Adarna", 11, 9, 8, 10, 8, 10, 12, 12, 10, "EllenAdarna");
let gladysreyes = new Queen("Gladys Reyes", 13, 8, 9, 7, 7, 9, 11, 12, 8, "GladysReyes");
let jodistamaria = new Queen("Jodi Sta. Maria", 14, 11, 9, 8, 8, 9, 13, 11, 10, "JodiStaMaria");
let jopaypaguia = new Queen("Jopay Paguia", 10, 9, 11, 13, 8, 10, 9, 11, 11, "JopayPaguia");
let juliabarretto = new Queen("Julia Barretto", 11, 7, 8, 10, 8, 11, 11, 13, 10, "JuliaBarretto");
let julieannesanjose = new Queen("Julie Anne San Jose", 10, 10, 10, 8, 10, 7, 10, 9, 9, "JulieAnne");
let kathrynbernardo = new Queen("Kathryn Bernardo", 12, 9, 9, 9, 9, 8, 12, 13, 9, "KathrynBernardo");
let mainemendoza = new Queen("Maine Mendoza", 12, 12, 8, 8, 9, 8, 13, 11, 12, "MaineMendoza");
let majasalvador = new Queen("Maja Salvador", 13, 8, 10, 12, 8, 10, 11, 11, 11, "MajaSalvador");
let marianrivera = new Queen("Marian Rivera", 12, 8, 9, 10, 7, 8, 12, 13, 10, "MarianRivera");
let marisracal = new Queen("Maris Racal", 11, 9, 11, 9, 10, 8, 9, 11, 9, "MarisRacal");
let melaicantiveros = new Queen("Melai Cantiveros", 12, 12, 8, 8, 11, 9, 13, 11, 11, "MelaiCantiveros");

let adriana = new Queen("Adriana", 9, 7, 7, 7, 8, 8, 5, "Adriana");
let beth = new Queen("Beth", 5, 5, 6, 4, 6, 5, 6, "Beth");
let eve = new Queen("Eve 6000", 5, 5, 5, 4, 5, 7, 7, "Eve");
let giametric = new Queen("Gia Metric", 8, 7, 7, 4, 6, 7, 7, "Giametric");
let icesis = new Queen("Icesis Couture", 6, 7, 4, 10, 7, 9, 8, "Icesis");
let kendall = new Queen("Kendall Gender", 8, 9, 8, 4, 7, 8, 8, "Kendall");
let kimoraA = new Queen("Kimora Amour", 6, 5, 5, 6, 7, 7, 5, "KimoraA");
let oceane = new Queen("Océane Aqua-Black", 6, 7, 5, 7, 7, 7, 6, "Oceane");
let pythia = new Queen("Pythia", 8, 6, 9, 8, 7, 8, 6, "Pythia");
let stephanie = new Queen("Stephanie Prince", 7, 6, 6, 8, 5, 5, 6, "Stephanie");
let suki = new Queen("Suki Doll", 7, 7, 7, 9, 7, 9, 5, "Suki");
let synthia = new Queen("Synthia Kiss", 8, 5, 5, 7, 5, 7, 8, "Synthia");
let can_season2 = [alexgonzaga, beaalonzo, cristinereyes, ellenadarna, gladysreyes, jodistamaria, jopaypaguia, juliabarretto, julieannesanjose, kathrynbernardo, mainemendoza, majasalvador, marianrivera, marisracal, melaicantiveros, reginevelasquez];
//PH SEASON 3
let beabinene = new Queen("Bea Binene", 11, 12, 11, 10, 9, 9, 11, 8, 12, "BeaBinene");
let bellapadilla = new Queen("Bella Padilla", 12, 11, 11, 10, 12, 9, 13, 10, 9, "BellaPadilla");
let deniselaurel = new Queen("Denise Laurel", 11, 12, 12, 10, 10, 9, 8, 10, 9, "DeniseLaurel");
let jeangarcia = new Queen("Jean Garcia", 14, 8, 6, 5, 7, 8, 12, 11, 12, "JeanGarcia");
let jessicasoho = new Queen("Jessica Soho", 8, 9, 4, 3, 7, 6, 15, 8, 8, "JessicaSoho");
let katrinahalili = new Queen("Katrina Halili", 12, 12, 7, 10, 8, 10, 10, 10, 11, "KatrinaHalili");
let korinasanchez = new Queen("Korina Sanchez", 7, 8, 3, 3, 5, 9, 11, 10, 8, "KorinaSanchez");
let pokwang = new Queen("Pokwang", 12, 15, 12, 9, 9, 7, 15, 9, 11, "Pokwang");
let popsfernandez = new Queen("Pops Fernandez", 8, 8, 13, 13, 11, 11, 10, 9, 11, "PopsFernandez");
let roxannebarcelo = new Queen("Roxanne Barcelo", 12, 14, 14, 13, 10, 9, 13, 12, 14, "RoxanneBarcelo");
let sueramirez = new Queen("Sue Ramirez", 11, 11, 12, 10, 9, 8, 10, 10, 9, "SueRamirez");
let viceganda = new Queen("Vice Ganda", 12, 15, 12, 11, 12, 11, 15, 14, 14, "ViceGanda");
let can_season3 = [beabinene, bellapadilla, deniselaurel, jeangarcia, jessicasoho, julieannesanjose, katrinahalili, korinasanchez, mainemendoza, pokwang, popsfernandez, roxannebarcelo, sueramirez, viceganda];
//OO SEASON 1
let aamirkhan = new Queen("Aamir Khan", 13, 12, 8, 7, 7, 9, 13, 11, 11, "AamirKhan");
let anggun = new Queen("Anggun", 9, 9, 11, 10, 11, 10, 13, 12, 11, "Anggun");
let ariellin = new Queen("Ariel Lin", 12, 8, 10, 8, 8, 10, 9, 13, 9, "ArielLin");
let barbiehsu = new Queen("Barbie Hsu", 12, 9, 10, 9, 8, 9, 12, 11, 9, "BarbieHsu");
let brightvachirawit = new Queen("Bright Vachirawit", 9, 9, 10, 10, 9, 9, 13, 13, 9, "Bright");
let elaizaikeda = new Queen("Elaiza Ikeda", 10, 7, 11, 9, 9, 12, 9, 13, 9, "ElaizaIkeda");
let kentoyamazaki = new Queen("Kento Yamazaki", 12, 10, 8, 8, 8, 11, 13, 10, 10, "Kento");
let lanacondor = new Queen("Lana Condor", 10, 9, 11, 8, 10, 9, 8, 11, 8, "LanaCondor");
let luhan = new Queen("Luhan", 9, 9, 10, 11, 9, 8, 8, 13, 12, "Luhan");
let vicchou = new Queen("Vic Chou", 11, 9, 7, 9, 8, 9, 12, 11, 8, "VicChou");
let victoriasong = new Queen("Victoria", 11, 10, 9, 12, 10, 12, 9, 13, 12, "Victoria");
let winmetawin = new Queen("Win Metawin", 10, 9, 10, 11, 9, 9, 13, 13, 10, "Metawin");

let chelsea = new Queen("Chelsea Boy", 8, 9, 6, 9, 9, 11, 5, "Chelsea");
let envy = new Queen("Envy Peru", 10, 10, 9, 10, 9, 13, 12, "Envy");
let janey = new Queen("Janey Jacké", 7, 8, 7, 11, 9, 12, 9, "Janey");
let madamem = new Queen("Madame Madness", 6, 6, 6, 8, 5, 8, 7, "MadameM");
let mama = new Queen("Ma'Ma Queen", 7, 7, 5, 6, 8, 10, 7, "Mama");
let megan = new Queen("Megan Schoonbrood", 7, 8, 7, 5, 6, 9, 11, "Megan");
let abby = new Queen("Miss Abby OMG", 9, 8, 12, 8, 7, 8, 11, "Abby");
let patty = new Queen("Patty Pam-Pam", 8, 6, 6, 8, 8, 9, 7, "Patty");
let roem = new Queen("Roem", 8, 8, 5, 5, 7, 6, 5, "Roem");
let sederginne = new Queen("Sederginne", 8, 6, 6, 10, 7, 13, 5, "Sederginne");
let hol_season1 = [aamirkhan, anggun, ariellin, barbiehsu, brightvachirawit, elaizaikeda, kentoyamazaki, lanacondor, luhan, vicchou, victoriasong, winmetawin];
//OO SEASON 2
let hayleykiyoko = new Queen("Hayley Kiyoko", 11, 9, 12, 11, 13, 10, 11, 11, 12, "HayleyKiyoko");
let henrygolding = new Queen("Henry Golding", 13, 11, 9, 9, 8, 10, 12, 12, 8, "HenryGolding");
let jackiechan = new Queen("Jackie Chan", 11, 14, 3, 3, 6, 5, 11, 9, 10, "JackieChan");
let kenta = new Queen("Kenta", 10, 11, 13, 11, 10, 11, 11, 11, 10, "Kenta");
let kimlee = new Queen("Kim Lee", 10, 12, 5, 8, 6, 9, 12, 11, 10, "KimLee");
let kittychicha = new Queen("Kitty Chicha Amatayakul", 12, 10, 8, 7, 8, 11, 12, 13, 10, "KittyChichaAmatayakul");
let kyarypamyupamyu = new Queen("Kyary Pamyu Pamyu", 8, 11, 11, 9, 12, 15, 11, 13, 12, "KyaryPamyuPamyu");
let kygo = new Queen("Kygo", 7, 7, 5, 9, 10, 9, 8, 9, 7, "Kygo");
let laiguanlin = new Queen("Lai Guanlin", 11, 8, 11, 13, 8, 10, 9, 12, 9, "LaiGuanlin");
let mariomaurer = new Queen("Mario Maurer", 14, 13, 11, 13, 10, 9, 12, 13, 9, "MarioMaurer");
let mindykaling = new Queen("Mindy Kaling", 12, 9, 9, 6, 8, 7, 12, 6, 9, "MindyKaling");
let priyankachopra = new Queen("Priyanka Chopra", 10, 9, 7, 10, 8, 14, 11, 14, 11, "PriyankaChopra");
let ryosukeyamada = new Queen("Ryosuke Yamada", 12, 13, 12, 11, 10, 10, 14, 13, 10, "RyosukeYamada");
let vannesswu = new Queen("Vanness Wu", 13, 10, 13, 13, 12, 13, 11, 13, 10, "VannessWu");

let ivyelise = new Queen("Ivy-Elise", 5, 5, 5, 4, 6, 5, 9, "IvyE");
let juicy = new Queen("Juicy Kouture", 5, 6, 5, 5, 7, 7, 6, "Juicy");
let keta = new Queen("Keta Minaj", 8, 9, 7, 9, 9, 9, 7, "Keta");
let love = new Queen("Love Masisi", 6, 7, 7, 8, 8, 10, 10, "Love");
let mlp = new Queen("My Little Puny", 7, 6, 9, 9, 6, 9, 8, "MLP");
let reggy = new Queen("Reggy B", 7, 6, 9, 7, 8, 8, 8, "Reggy");
let tabitha = new Queen("Tabitha", 7, 7, 7, 7, 6, 8, 8, "Tabitha");
let countess = new Queen("The Countess", 8, 9, 7, 9, 8, 8, 8, "Countess");
let vanessaC = new Queen("Vanessa Van Cartier", 7, 8, 8, 10, 9, 11, 10, "VanessaC");
let vivaldi = new Queen("Vivaldi", 8, 9, 7, 7, 9, 9, 9, "Vivaldi");
let hol_season2 = [hayleykiyoko, henrygolding, jackiechan, kenta, kimlee, kittychicha, kyarypamyupamyu, kygo, laiguanlin, mariomaurer, mindykaling, priyankachopra, ryosukeyamada, vannesswu];
//INTERNATIONAL ALL STARS 2
let ias_season2 = [annemarie, beaalonzo, fwelch, gordonramsay, harrystyles, jessicajung, jolinamagdangal, juliabarretto, junji, keeho, ladygaga, lorde, melaicantiveros, onika, taylorswift];
//INTERNATIONAL ALL STARS 3
let ias_season3 = [alliex, claudinebarretto, danielradcliffe, emmawatson, haknyeon, hwiyoung, iggyazalea, jeonghan, joshuabassett, kylieminogue, nadinelustre, oliviarodrigo, pokwang, sabrinacarpenter, saerom];
//DRT SEASON 1
let amadiva = new Queen("Amadiva", 9, 6, 7, 9, 3, 13, 6, "Amadiva");
let annee = new Queen("Anneé Maywong", 9, 9, 7, 13, 4, 14, 9, "Annee");
let b = new Queen("B Ella", 7, 9, 6, 8, 11, 7, 7, "B");
let bunny = new Queen("Bunny Be Fly", 7, 5, 5, 8, 5, 8, 6, "Bunny");
let dearis = new Queen("Dearis Doll", 7, 7, 7, 10, 10, 11, 10, "Dearis");
let jaja = new Queen("JAJA", 8, 6, 7, 9, 5, 11, 9, "Jaja");
let meannie = new Queen("Meannie Minaj", 7, 5, 5, 6, 5, 5, 5, "Meannie");
let morrigan = new Queen("Morrigan", 5, 6, 7, 5, 7, 7, 7, "Morrigan");
let natalia = new Queen("Natalia Pliacam", 9, 9, 7, 13, 9, 14, 12, "Natalia");
let petchra = new Queen("Petchra", 7, 7, 6, 7, 8, 7, 9, "Petchra");
let drt_season1 = [amadiva, annee, b, bunny, dearis, jaja, meannie, morrigan, natalia, petchra];
//DRT SEASON 2
let angele = new Queen("Angele Anang", 9, 9, 9, 12, 8, 14, 10, "Angele");
let bandit = new Queen("Bandit", 7, 7, 7, 10, 6, 14, 9, "Bandit");
let genie = new Queen("Genie", 9, 8, 9, 9, 7, 9, 8, "Genie");
let kana = new Queen("Kana Warrior", 8, 8, 8, 7, 7, 9, 13, "Kana");
let kandyz = new Queen("Kandy Zyanide", 9, 9, 9, 9, 9, 12, 7, "KandyZ");
let katy = new Queen("Katy Killer", 7, 8, 7, 8, 7, 10, 8, "Katy");
let m = new Queen("M Stranger Fox", 5, 6, 5, 6, 6, 8, 8, "M");
let maya = new Queen("Maya B'haro", 9, 8, 6, 9, 9, 10, 7, "Maya");
let mocha = new Queen("Mocha Diva", 9, 9, 6, 10, 9, 7, 9, "Mocha");
let gimhuay = new Queen("Miss Gimhuay", 8, 9, 7, 11, 10, 12, 8, "Gimhuay");
let silver = new Queen("Silver Sonic", 5, 5, 7, 6, 7, 7, 8, "Silver");
let srimala = new Queen("Srimala", 7, 7, 8, 7, 8, 11, 12, "Srimala");
let tormai = new Queen("Tormai", 8, 8, 7, 7, 6, 8, 9, "Tormai");
let vanda = new Queen("Vanda Miss Joaquim", 9, 8, 9, 7, 7, 11, 10, "Vanda");
let drt_season2 = [angele, bandit, genie, kana, kandyz, katy, m, maya, mocha, gimhuay, silver, srimala, tormai, vanda];
//DRAG RACE DOWN UNDER
let anita = new Queen("Anita Wigl'it", 9, 9, 8, 7, 8, 7, 8, "Anita");
let art = new Queen("Art Simone", 5, 4, 5, 10, 4, 10, 2, "Art");
let cocoj = new Queen("Coco Jumbo", 7, 6, 7, 6, 5, 8, 9, "CocoJ");
let elektra = new Queen("Elektra Shock", 8, 6, 7, 5, 4, 6, 10, "Elektra");
let etc = new Queen("Etcetera Etcetera", 7, 8, 7, 6, 7, 8, 8, "Etc");
let jojo = new Queen("Jojo Zaho", 5, 5, 5, 5, 5, 6, 8, "Jojo");
let karen = new Queen("Karen From Finance", 6, 6, 7, 7, 5, 7, 5, "Karen");
let kita = new Queen("Kita Mean", 8, 8, 7, 8, 9, 9, 10, "Kita");
let maxi = new Queen("Maxi Shield", 6, 7, 7, 9, 7, 8, 9, "Maxi");
let drdu = [anita, art, cocoj, elektra, etc, jojo, karen, kita, maxi];
//DRAG RACE ESPAÑA
let arantxa = new Queen("Arantxa Castilla La Mancha", 8, 8, 7, 7, 4, 9, 9, "Arantxa");
let carmenf = new Queen("Carmen Farala", 8, 7, 9, 9, 5, 11, 9, "CarmenF");
let dovima = new Queen("Dovima Nurmi", 6, 5, 5, 4, 5, 8, 8, "Dovima");
let drag = new Queen("Drag Vulcano", 6, 6, 5, 7, 7, 8, 6, "Drag");
let hugaceo = new Queen("Hugáceo Crujiente", 7, 6, 7, 11, 6, 8, 9, "Hugaceo");
let inti = new Queen("Inti", 7, 7, 7, 7, 7, 12, 7, "Inti");
let killer = new Queen("Killer Queen", 7, 8, 6, 7, 9, 9, 7, "Killer");
let pupi = new Queen("Pupi Poisson", 8, 8, 8, 6, 9, 9, 9, "Puppy");
let sagittaria = new Queen("Sagittaria", 7, 8, 9, 9, 8, 9, 8, "Sagittaria");
let macarena = new Queen("The Macarena", 6, 7, 6, 5, 5, 7, 7, "Macarena");
let dres = [arantxa, carmenf, dovima, drag, hugaceo, inti, killer, pupi, sagittaria, macarena];
//DRAG RACE ITALIA
let ava = new Queen("Ava Hangar", 6, 6, 5, 5, 5, 6, 6, "Ava");
let divinity = new Queen("Divinity", 6, 6, 8, 7, 7, 8, 7, "Divinity");
let elecktra = new Queen("Elecktra Bionic", 7, 7, 7, 7, 7, 7, 7, "Elecktra");
let enorma = new Queen("Enorma Jean", 7, 7, 6, 6, 5, 7, 6, "Enorma");
let farida = new Queen("Farida Kant", 7, 7, 7, 7, 7, 7, 7, "Farida");
let ivana = new Queen("Ivana Vamp", 6, 5, 6, 8, 6, 6, 5, "Ivana");
let riche = new Queen("Le Riche", 7, 6, 6, 7, 7, 6, 8, "Riche");
let luquisha = new Queen("Luquisha Lubamba", 6, 6, 7, 8, 7, 8, 9, "Luquisha");
let italia = [ava, divinity, elecktra, enorma, farida, ivana, riche, luquisha];
//SPECIAL
let pangina = new Queen("Pangina Heals", 10, 10, 9, 12, 9, 13, 11);
let international_as = [baga, blu, cheryl, janey, jimbo, jujubee, lemon, monique, pangina];
//all possible queens:
let allCustomQueens = [];
if (localStorage.getItem("customQueens") != null)
    allCustomQueens = JSON.parse(localStorage.getItem("customQueens") || "{}");
let customLength = allCustomQueens.length;
for (let i = 0; i < customLength; i++) {
    let queen = new Queen('', 0, 0, 0, 0, 0, 0, 0, '');
    Object.assign(queen, allCustomQueens[i]);
    allCustomQueens.push(queen);
}
allCustomQueens.splice(0, customLength);
let allQueens = [
    choerry, chuu, gowon, haseul, heejin, hyunjin, jinsoul, kimlip, oliviahye, vivi, yeojin, yves,
    dino, dk, hoshi, jeonghan, joshua, jun, mingyu, scoups, seungkwan, the8, vernon, wonwoo, woozi,
    chaeyoung, gyuri, hayoung, jiheon, jisun, jiwon, nagyung, saerom, seoyeon,
    chani, dawon, hwiyoung, inseong, jaeyoon, rowoon, yootaeyang, youngbin, zuho,
    eric, haknyeon, hyunjae, jacob, juyeon, kevin, chanhee, jichangmin, sangyeon, sunwoo, younghoon,
    chaewon, chaeyeon, eunbi, hitomi, hyewon, minju, nako, sakura, wonyoung, yena, yujin, yuri,
    chenle, haechan, hendery, jaemin, jeno, jisung, kun, lucas, mark, renjun, ten, winwin, xiaojun, yangyang,
    jungdahyun, juri, minnie, miyeon, shuhua, sohee, soojin, soyeon, suyun, yeonhee, yunkyoung, yuqi,
    hwanwoong, intak, jiung, jongseob, keeho, keonhee, leedo, ravn, seoho, soul, theo, xion,
    byeongkwan, yuchan, donghun, irene, joy, junhee, seulgi, wendy, wow, yeri,
    dami, gahyeon, handong, jiu, junji, kb, luv, mill, nine, rie, siyeon, sua, yoohyeon, yoojung,
    doyoung, jaehyun, johnny, jungwoo, shotaro, sungchan, taeil, taeyong, yuta,
    jennie, jeongyeon, jihyo, jisoo, kimdahyun, lisa, mina, momo, nayeon, rosie, sana, sonchaeyoung, tzuyu,
    baekhyun, chanyeol, chen, kyungsoo, hyoyeon, jessicajung, kai, lay, sehun, seohyun, sooyoung, suho, sunny, taeyeon, tiffany, xiumin, yoona, kwonyuri,
    babysoul, hongjoong, jiae, jin, seojisoo, jongho, kei, mijoo, mingi, san, seonghwa, sujeong, wooyoung, yein, yeosang, yunho,
    bangchan, changbin, doyeon, elly, felix, han, hwanghyunjin, jeongin, leeknow, lua, lucy, rina, sei, seungmin, suyeon, choiyoojung,
    ahnjaehyun, choiwooshik, goohyesun, junjihyun, kimjiwon, kimjunghyun, kimseolhyun, kimsoohyun, kimwoobin, krystaljung, leedongwook, leesungkyung, namjoohyuk, seoinguk, seoyeji, songhyekyo, songjoongki, songkang,
    ailee, alexa, boakwon, chungha, hasungwoon, kangdaniel, kimdonghan, krieshachu, leehi, leejieun, natty, parkboram, parkjihoon, somi, sunmi, woodz, youha, yukika,
    bobby, bomi, chaeunwoo, chanwoo, chorong, leedonghyuk, jungeunji, leejinwoo, jinhwan, junhoe, moonbin, myungjun, naeun, namjoo, ohhayoung, rocky, sanha, yunhyeong,
    baepunch, baesuzy, belle, beomgyu, dawn, hajiwon, hanhyunmin, holland, hueningkai, hyuna, janggeunsuk, jessi, kikomizuhara, kimsamuel, kimsohyun, leejongsuk, shannonwilliams, soobin, taehyun, yeonjun,
    bada, bompark, bora, chaerin, cl, dara, eugene, haeyoon, heojiwon, hwasa, mei, minzy, moonbyul, remi, shoo, solarkim, wheein, yuju,
    andy, aron, baekho, dongwan, ericmun, hyesung, jonghyun, junghwan, junjin, kibum, leeminwoo, minho, minhyun, onew, ren, seongjun, sihun, taemin,
    choa, daisy, elkie, hanbin, hurhyunjun, hyunjoo, jaeseok, jaypark, kimjaejoong, kokoro, laun, namtaehyun, wonho, woojin, yeonwoo, yookyung, yulhee, zitao,
    baeyoonjung, bravebros, choikyusung, choiyoungjoon, hwanghyun, jadenjeong, jangjinyoung, jypark, kenzie, kimhyeim, kimsungeun, liakim, mihawk, minheejin, parknaejoo, parknayeon, sai, seongwonmo,
    alexkim, changmin, dasom, hana, hyolyn, hyosung, jieun, jinwoon, jokwon, myunghan, seulong, soyou, sunggu, sunhwa, yoonbora, youngjun,
    baejin, byunggon, chaeryeong, hyunsuk, jisu, ryujin, seunghun, yeji, yonghee, yuna,
    aurorah, chaebin, diwon, echan, gwanghyun, haru, harryjune, heechan, junseo, kimsohee, lohah, luneh, limhayoung, saebom, sunsyan, teoh, uchae, yuku,
    aquinas, hanseohee, jungilhoon, kriswu, kwonmina, kyulkyung, marktuan, seohajun, seungri, shinjimin, shownu, siwon, sorn, choitop, taehyung,
    caibing, fuyaning, itomiyu, kamikurarei, kotone, kimdoah, kimhyerim, kimsein, leechaeyun, liangjiao, liangqiao, nagaimanami, nonakashana, wenzhe, wutammy, yoonjia, youdayeon, yurina,
    alexanderlee, baeseungmin, bomin, bongjaehyun, chajunho, daeyeol, donghyun, hwangyunseong, jangjun, jibeom, joochan, joochanguk, kimdongyun, kimminseo, leehyeop, youngtaek, seongyoon,
    bella, byungchan, chaejeong, ej, hanse, heochan, hyeseong, karin, sejun, seungsik, seungwoo, soheekim, subin, yukyung,
    chahun, dojoon, dongsung, dowoon, hajoon, hweseung, jaehyung, jaehyeong, kimjaehyun, seunghyub, sungjin, wonpil, woosung, youngk,
    arin, binnie, heeseung, hyojung, jake, jongseong, jiho, jungwon, mimee, nikee, seunghee, sunghoon, sunoo, yooa,
    choiyujin, eunbin, ezakihikaru, gaeul, hueningbahiyyih, kangyeseo, kimchaehyun, kimdayeon, leeseo, leez, ohseunghee, reinaoi, sakamotomashiro, shenxiaoting, seoyoungeun, seungyeon, yeeun,
    bangyongguk, choiyuju, eunha, himchan, jongup, jungdaehyun, sinb, sowon, umji, yerin, yooyoungjae, zelo,
    baejinsol, haewon, haram, haruna, isa, jei, jinni, jiwoo, kyujin, lily, moonsua, saay, seeun, sheon, sieun, siyoon, suhyeon, sullyoon, sumin, tsuki, yoon,
    adele, arianagrande, carlyrae, katyperry, kesha, ladygaga, lanadelrey, lorde, marina, onika, rihanna, taylorswift,
    avamax, billie, camilla, cardib, charlixcx, dojacat, dualipa, halsey, megantheestallion, melaniemartinez, oliviarodrigo, siza,
    alliex, avril, dababy, demilovato, jamescharles, jenniferlopez, joejonas, joshuabassett, justinbieber, madonna, mariahcarey, sabrinacarpenter, selenagomez, shakira, shawnmendes, theweeknd,
    azealiabanks, britneyspears, celinedion, cher, christinaaguilera, hayleywilliams, jessicasimpson, justintimberlake, lindsaylohan, lizgillies, parishilton, rickymartin, ryangosling, shaniahtwain, thalia, victoriajustice,
    bjork, elliegoulding, fwelch, jessglynne, jessiej, jessieware, kimpetras, leonalewis, perrie, rinasawayama, ritaora,
    annemarie, edsheeran, emmawatson, emilyblunt, gordonramsay, harrystyles, henrycavill, iggyazalea, joealwyn, katewinslet, kylieminogue, mattyhealy, samsmith, tovelo,
    caradelevingne, chrismartin, danielradcliffe, eltonjohn, imogenheap, julieandrews, leighanne, lilycollins, milliebobby, naomicampbell, olivianewton, robyn, tildaswinton, victoriabeckham,
    angellocsin, annecurtis, barbieforteza, claudinebarretto, heartevangelista, jolinamagdangal, judyannsantos, kimchiu, lizasoberano, nadinelustre, reginevelasquez, rhianramos, sharoncuneta, sunshinegarcia,
    alexgonzaga, beaalonzo, cristinereyes, ellenadarna, gladysreyes, jodistamaria, jopaypaguia, juliabarretto, julieannesanjose, kathrynbernardo, mainemendoza, majasalvador, marianrivera, marisracal, melaicantiveros,
    beabinene, bellapadilla, deniselaurel, jeangarcia, jessicasoho, katrinahalili, korinasanchez, pokwang, popsfernandez, roxannebarcelo, sueramirez, viceganda,
    aamirkhan, anggun, ariellin, barbiehsu, brightvachirawit, elaizaikeda, kentoyamazaki, lanacondor, luhan, vicchou, victoriasong, winmetawin,
    hayleykiyoko, henrygolding, jackiechan, kenta, kimlee, kittychicha, kyarypamyupamyu, kygo, laiguanlin, mariomaurer, mindykaling, priyankachopra, ryosukeyamada, vannesswu,
].concat(allCustomQueens).sort((a, b) => a.getName().toLowerCase().localeCompare(b.getName().toLowerCase()));
let allQueensCopy = [];
let krCast = [...us_season1, ...us_season2, ...us_season3, ...us_season4, ...us_season5, ...us_season6, ...us_season7, ...us_season8, ...us_season9, ...us_season10, ...us_season11, ...us_season12, ...us_season13, ...us_season14, ...us_season15, ...us_season16, ...us_season17, ...us_season18, ...us_season19, ...us_season20, ...us_season21, ...us_season22, ...us_season23, ...us_season24, ...us_season25, ...us_season26, ...us_season27, ...us_season28, ...us_season29, ...us_season30, ...us_season31, ...us_season32, ...us_season33, ...us_season34, ...us_season35, ...us_season36];
let namCast = [...nam_season1, ...nam_season2, ...nam_season3, ...nam_season4];
let euCast = [...uk_season1, ...uk_season2, ...uk_season3];
let phCast = [...can_season1, ...can_season2, ...can_season3];
let ooCast = [...hol_season1, ...hol_season2];
let comedyRuvenge = false;
let twinstwist = false;
let groupsRuvenge = false;
let lalaparuza = false;
let voteReturn = false;
let randomReturn = false;
let pickReturn = false;
let ownpick = false;
let rurupalooza = false;
let smackdown = false;
let lscombats = false;
let lsbattles = false;
let secretPageant = false;
let secretDanceOffs = false;
let secretSitcoms = false;
let goldticket = false;
function CheckForReturning() {
    if ((randomReturn || pickReturn || voteReturn) == true && currentCast.length < totalCastSize - 4 && returningQueen == false && eliminatedCast.length > 0) {
        if (randomNumber(0, 100) < 5 * episodeCount || currentCast.length == 4) {
            returningQueen = true;
            return true;
        }
        return false;
    }
    if (smackdown && currentCast.length == 4 && (all_stars || savequeen || top4 || lipsync_assassin || throwqueen) && returningQueen == false || smackdown && currentCast.length == 5 && top3 && forFinaleLS == true && returningQueen == false || smackdown && currentCast.length == 5 && vstheworld && returningQueen == false || showgirlShowdown == true && (top4 || savequeen) && currentCast.length == 5 && returningQueen == false && smackdown == true || smackdown == true && currentCast.length == 3 && returningQueen == false) {
        returningQueen = true;
        return true;
    }
    if (lalaparuza && (totalCastSize % 2 == 0 && currentCast.length == totalCastSize / 2 || totalCastSize % 2 == 1 && currentCast.length == (totalCastSize + 1) / 2) && returningQueen == false) {
        returningQueen = true;
        return true;
    }
    return false;
}
function returningQueenScreen() {
    let screen = new Scene();
    screen.clean();
    screen.createHeader("A lovely surprise...");
    if (randomReturn)
        queenReturns();
    if (lalaparuza)
        LaLaPaRUza();
    if (voteReturn)
        queenReturnsVote();
    if (smackdown)
        lipsyncSmackdown();
    if (!pickReturn)
    screen.createButton("Proceed", "newEpisode()");
    if (pickReturn)
        queenReturnsPick();
}
function queenReturns() {
    let screen = new Scene();
    screen.createParagraph("I've decided that one of my queens have gone a bit too soon... I'd like to welcome back...");
    let queen = eliminatedCast[(randomNumber(0, eliminatedCast.length - 1))];
    currentCast.push(queen);
    queen.lastEpisode -= queen.lastEpisode;
    eliminatedCast.splice(eliminatedCast.indexOf(queen), 1);
    screen.createBold(queen.getName());
}
function queenReturnsPick() {
    let screen = new Scene();
    screen.createBold("Select which eliminated queen deserves a second chance.");
    let main = document.querySelector("div#MainBlock");
    let castSelection = document.createElement("p");
    castSelection.setAttribute("id", "castSelection");
    castSelection.innerHTML = '';
    let select = document.createElement("select");
    select.setAttribute("id", "queenList");
    select.setAttribute("onchange", "returnImg()");
    let img = document.createElement("img");
    img.setAttribute("id", "images");
    img.setAttribute("style", "width: 105px; height: 105px;");
    let p = document.createElement("p");
    p.appendChild(img);
    for (let k = 0; k < eliminatedCast.length; k++) {
        let option = document.createElement("option");
        option.innerHTML = eliminatedCast[k].getName();
        option.value = eliminatedCast[k].image;
        select.add(option);
    }
    select.selectedIndex = randomNumber(0, eliminatedCast.length - 1);
    let br = document.createElement("br");
    castSelection.appendChild(p);
    castSelection.appendChild(select);
    castSelection.appendChild(br);
    main.appendChild(castSelection);
    returnImg();
    screen.createButton("Choose Queen", "queenPickReturns()", "pickQueen");
}
function queenPickReturns() {
    let screen = new Scene();
    let select = document.getElementById("queenList");
    let value = select.options[select.selectedIndex].text;
    let button = document.getElementById("pickQueen");
    let queen;
    for (let k = 0; k < eliminatedCast.length; k++) {
        if (value == eliminatedCast[k].getName()) {
            queen = eliminatedCast[k];
        }
    }
    button.remove();
    select.remove();
    screen.createBold(queen.getName() + " is now back in the competition!");
    currentCast.push(queen);
    queen.lastEpisode -= queen.lastEpisode;
    eliminatedCast.splice(eliminatedCast.indexOf(queen), 1);
    screen.createButton("Proceed", "newEpisode()");
}
function queenReturnsVote() {
    let screen = new Scene();
    screen.createParagraph("I've decided that one of my quens deserve a second chance... you'll vote for which of the eliminated queens will come back!");
    screen.createHorizontalLine();
    screen.createBold("The queens vote...");
    for (let i = 0; i < currentCast.length; i++) {
        currentCast[i].lipstick = eliminatedCast[randomNumber(0, eliminatedCast.length - 1)];
        currentCast[i].lipstick.votes++;
        screen.createParagraph(`${currentCast[i].getName()} voted for ${currentCast[i].lipstick.getName()}!`);
    }
    for (let i = 0; i < eliminatedCast.length; i++) {
        screen.createBold(`${eliminatedCast[i].getName()}: ${eliminatedCast[i].votes.toString()} votes`);
    }
    screen.createHorizontalLine();
    let queen = [...eliminatedCast].sort((a, b) => b.votes - a.votes)[0];
    screen.createBold(`${queen.getName()} returns to the competition!`);
    currentCast.push(queen);
    queen.lastEpisode -= queen.lastEpisode;
    eliminatedCast.splice(eliminatedCast.indexOf(queen), 1);
    queen.votes -= queen.votes;
    for (let i = 0; i < eliminatedCast.length; i++) {
        eliminatedCast[i].votes -= eliminatedCast[i].votes;
    }
}
function lipsyncSmackdown() {
    var screen = new Scene();
    screen.clean();
    document.body.style.backgroundImage = "linear-gradient(to bottom right, #55CDFC, #F7A8B8, #FFFFFF)";
    screen.createHeader("Let the Lipsync Smackdown begin!!");
    screen.createParagraph("The eliminated queens are back to compete in an epic Lipsync Smackdown and a chance to return to the competition.");
    let nonReturn = [];
    for (var i = 0; i < eliminatedCast.length; i++) {
        if (eliminatedCast[i].withdraw == 1) {
            nonReturn.push(eliminatedCast[i]);
            eliminatedCast[i].addToTrackRecord("");
            eliminatedCast.splice(i, 1);
        }
    }
    var smack = eliminatedCast.slice();
    var capitulo = 2;
    var cappork = 5;
    var caps6 = 4;
    var caps9 = 3;
    smackdownCharts = true;
    for (var i = 0; i < eliminatedCast.length - 1; i++) {
        screen.createHorizontalLine();
        if (smack.length == 2) {
            var queen1 = smack[0];
            var queen2 = smack[1];
        }else{
        var queen1 = smack[smack.length - 1];
        var queen2 = smack[smack.length - 2];
        }
        queen1.lipsyncRound++;
        queen2.lipsyncRound++;
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
        screen.createBold("The time has come for you to lip-sync... for your rudemption! Good luck, and don't fuck it up." + queen2.episodesOn);
        lsSong();
        screen.createBold("I've made my decision.");
        var lipSync = [queen1, queen2];
        for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
            lipSync[i_1].getASLipsync();
        }
        lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
        screen.createImage(lipSync[0].image, "royalblue");
        screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
        if (eliminatedCast.length - i != 2) {
            smackdownRounds.push(lipSync[0].getName());
            smackdownRounds.push(lipSync[1].getName());
            }
        screen.createBold(lipSync[1].getName() + ", sashay away. ");
        capitulo++;
        cappork++;
        caps6++;
        caps9++;
        if (lipSync[0] == queen1) {
            smack.splice(smack.indexOf(queen2), 1);
        }else{
            smack.splice(smack.indexOf(queen1), 1);
        }
    }
    for (var o = 0; o <= currentCast.length - 1; o++) {
        currentCast[o].addToTrackRecord("SAFE  ");
    }
    smackdownRounds.push(lipSync[0].getName());
    smackdownRounds.push(lipSync[1].getName());
    lipSync[0].addToTrackRecord("RTRN");
    currentCast.push(lipSync[0]);
    lipSync[0].lastEpisode -= lipSync[0].lastEpisode;
    eliminatedCast.splice(eliminatedCast.indexOf(lipSync[0]), 1);
    for (var i = 0; i <= eliminatedCast.length - 1; i++) {
        eliminatedCast[i].addToTrackRecord("OUT ");
    }
    episodeChallenges.push("Smackdown");
    lsaQueen.push(" ");
    if (withdrawOut == true) {
        eliminatedCast.unshift(nonReturn[0]);
    }
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
}
let smackdownRounds = [];
function LaLaPaRUza() {
    var screen = new Scene();
    screen.clean();
    episodeCount++;
    document.body.style.backgroundImage = "linear-gradient(to bottom right, #55CDFC, #F7A8B8, #FFFFFF)";
    screen.createHeader("LaLaPaRUZa!!");
    screen.createParagraph("All of the eliminated queens are back to get a chance to return into the competition. But first they have to send home a remaining queen in a shocking mid-season lipsync smackdown.");
    let nonReturn = [];
    for (var i = 0; i < eliminatedCast.length; i++) {
        if (eliminatedCast[i].withdraw == 1) {
            nonReturn.push(eliminatedCast[i]);
            eliminatedCast[i].addToTrackRecord("");
            eliminatedCast.splice(i, 1);
        }
    }
    var smack = eliminatedCast.slice();
    var smack1 = currentCast.slice();
    for (var i = 0; i < smack1.length; i++){
        var trds = smack1[i].trackRecord.length - 1;
        if (smack1[i].trackRecord[trds] == "WIN") {
            smack1[i].addToTrackRecord("SAFE  ");
            smack1.splice(i, 1);
            i--;
        }else if (smack1[i].trackRecord[trds] == "TOP2") {
            smack1[i].addToTrackRecord("SAFE  ");
            smack1.splice(i, 1);
            i--;
        }else if (smack1[i].trackRecord[trds] == " WIN"){
            smack1[i].addToTrackRecord("SAFE  ;");
            smack1.splice(i, 1);
            i--;
        }else if (smack1[i].trackRecord[trds] == "WIN " && !all_stars && !vstheworld){
            smack1[i].addToTrackRecord("SAFE  ");
            smack1.splice(i, 1);
            i--;
        }else if (smack1[i].trackRecord[trds] == "WIN " && vstheworld == true && eliminatedCast.length < currentCast.length){
            smack1[i].addToTrackRecord("SAFE  ");
            smack1.splice(i, 1);
            i--;
        }
    }
    let currentSmack = smack1.length;
    for (var i = 0; i < smack.length; i++) {
        screen.createHorizontalLine();
        var queen1 = smack[i];
        var queen2 = smack1[randomNumber(0,smack1.length-1)];
        screen.createImage(queen1.image);
        screen.createImage(queen2.image);
        smack1.splice(smack1.indexOf(queen2), 1);
        if (currentSmack != smack.length && smack1.length == 0) {
            var queen3 = smack[smack.length - 1];
            screen.createImage(queen3.image);
            screen.createBold(queen1.getName() + ", " + queen2.getName() + " and " + queen3.getName() + " will lipsync...");
            lsSong();
            var lipSync_1 = [queen1, queen2, queen3];
            for (var i_1 = 0; i_1 < lipSync_1.length; i_1++) {
                lipSync_1[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            queen3.lipsyncScore += (queen3.favoritism / 10) - (queen3.unfavoritism / 10) + queen3.episodesOn;
            lipSync_1.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            screen.createImage(lipSync_1[0].image, "royalblue");
            screen.createBold(lipSync_1[0].getName() + ", shantay you stay!");
                if (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && lipSync_1[0] == queen2) {
                    screen.createBold(lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", sashay away...");
                        if (lipSync_1[0] != queen2) {
                            queen2.addToTrackRecord("ELIM");
                        queen2.lastEpisode += episodeCount;
                        eliminatedCast.unshift(queen2);
                        currentCast.splice(currentCast.indexOf(queen2), 1);
                        }
                }
                else if (goldticket == true && ticketSave == false && queen2 == goldenTicket [0] && lipSync_1[0] != queen2) {
                    screen.createBold("It's time to unwrap the chocolate!");
                    screen.createImage(goldenTicket[0].image, "gold");
                    screen.createBold(goldenTicket[0].getName() + ", IT'S GOLDEN! <br> You are safe to slay another day!");
                    lipSync_1.splice(lipSync_1.indexOf(goldenTicket[0]), 1);
                    goldenTicket[0].addToTrackRecord("CHOC");
                    screen.createBold(lipSync_1[1].getName() + ", sashay away...");
                    ticketSave = true;
                }
                else if (goldticket == true && ticketSave == false && queen2 != goldenTicket [0] && lipSync_1[0] != queen2) {
                    screen.createBold("It's time to unwrap the chocolate!");
                    screen.createImage(queen2.image, "red");
                    screen.createBold(queen2.getName() + ", IT'S CHOCOLATE! <br> I am sorry, my dear, but this is not your time. <br>" + lipSync_1[1].getName() + " and " + lipSync_1[2].getName() + ", sashay away...");
                    queen2.addToTrackRecord("ELIM");
                    queen2.lastEpisode += episodeCount;
                    eliminatedCast.unshift(queen2);
                    currentCast.splice(currentCast.indexOf(queen2), 1);
                }
            if (queen1 == lipSync_1[0]) {
                currentCast.push(lipSync_1[0]);
                lipSync_1[0].addToTrackRecord("RTRN");
                lipSync_1[0].lastEpisode -= lipSync_1[0].lastEpisode;
                eliminatedCast.splice(eliminatedCast.indexOf(lipSync_1[0]), 1);
                queen3.addToTrackRecord("OUT ");
            }else if(queen3 == lipSync_1[0]){
                currentCast.push(lipSync_1[0]);
                lipSync_1[0].addToTrackRecord("RTRN");
                lipSync_1[0].lastEpisode -= lipSync_1[0].lastEpisode;
                eliminatedCast.splice(eliminatedCast.indexOf(lipSync_1[0]), 1);
                queen1.addToTrackRecord("OUT ");
            }else{
                lipSync_1[0].addToTrackRecord("SAFE ");
                queen1.addToTrackRecord("OUT ");
                queen3.addToTrackRecord("OUT ");
            }
            i++;
        }else{
            screen.createBold(queen1.getName() + " and " + queen2.getName() + " will lipsync...");
            screen.createBold("The time has come for you to lip-sync... for your lives! Good luck, and don't fuck it up.");
            lsSong();
            screen.createBold("I've made my decision.");
            var lipSync = [queen1, queen2];
            for (var i_1 = 0; i_1 < lipSync.length; i_1++) {
                lipSync[i_1].getASLipsync();
            }
            queen1.lipsyncScore += (queen1.favoritism / 10) - (queen1.unfavoritism / 10) + queen1.episodesOn;
            queen2.lipsyncScore += (queen2.favoritism / 10) - (queen2.unfavoritism / 10) + queen2.episodesOn;
            lipSync.sort(function (a, b) { return (b.lipsyncScore - a.lipsyncScore); });
            if (queen1 == lipSync[0] && queen2.lipsyncScore + 3 >= queen1.lipsyncScore) {
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createImage(lipSync[1].image, "royalblue");
            screen.createBold("Condragulations! Shantay, you both stay.");
            currentCast.push(lipSync[0]);
            lipSync[0].addToTrackRecord("RTRN");
            lipSync[0].lastEpisode -= lipSync[0].lastEpisode;
            eliminatedCast.splice(eliminatedCast.indexOf(lipSync[0]), 1);
            lipSync[1].addToTrackRecord("SAFE ");
            }
            else {
            screen.createImage(lipSync[0].image, "royalblue");
            screen.createBold(lipSync[0].getName() + ", shantay you stay! ");
                if (goldticket == false || goldticket == true && ticketSave == true || goldticket == true && ticketSave == false && lipSync[0] == queen2) {
                    screen.createBold(lipSync[1].getName() + ", sashay away...");
                    if (lipSync[0] != queen2) {
                    lipSync[1].addToTrackRecord("ELIM");
                    lipSync[1].lastEpisode += episodeCount;
                    eliminatedCast.unshift(lipSync[1]);
                    currentCast.splice(currentCast.indexOf(lipSync[1]), 1);
                    }
                }
                else if (goldticket == true && ticketSave == false && lipSync[1] == goldenTicket [0] && lipSync[0] != queen2) {
                    screen.createBold("It's time to unwrap the chocolate!");
                    screen.createImage(goldenTicket[0].image, "gold");
                    screen.createBold(goldenTicket[0].getName() + ", IT'S GOLDEN! <br> You are safe to slay another day!");
                    goldenTicket[0].addToTrackRecord("CHOC");
                    ticketSave = true;
                }
                else if (goldticket == true && ticketSave == false && queen2 != goldenTicket [0] && lipSync[0] != queen2) {
                    screen.createBold("It's time to unwrap the chocolate!");
                    screen.createImage(queen2.image, "red");
                    screen.createBold(queen2.getName() + ", IT'S CHOCOLATE! <br> I am sorry, my dear, but this is not your time. <br>" + lipSync[1].getName() + ", sashay away...");
                    lipSync[1].addToTrackRecord("ELIM");
                    lipSync[1].lastEpisode += episodeCount;
                    eliminatedCast.unshift(lipSync[1]);
                    currentCast.splice(currentCast.indexOf(lipSync[1]), 1);
                }
            if (queen1 == lipSync[0]) {
                currentCast.push(lipSync[0]);
                lipSync[0].addToTrackRecord("RTRN");
                lipSync[0].lastEpisode -= lipSync[0].lastEpisode;
                eliminatedCast.splice(eliminatedCast.indexOf(lipSync[0]), 1);
            }else{
                lipSync[0].addToTrackRecord("SAFE ");
                lipSync[1].addToTrackRecord("OUT ");
            }
            }
        }
    }
    immuneQueen = [];
    episodeChallenges.push("LaLaPaRUZa");
    lsaQueen.push(" ");
    if (withdrawOut == true) {
        eliminatedCast.unshift(nonReturn[0]);
    }
    eliminatedCast.sort((a, b) => b.lastEpisode - a.lastEpisode);
}
function smackdownLS(queens) {
    for (let i = 0; i < queens.length; i++) {
        queens[i].getASLipsync();
    }
    queens.sort((a, b) => (b.lipsyncScore - a.lipsyncScore));
    return queens[0];
}
class Scene {
    constructor() {
        this._MainBlock = document.querySelector("div#MainBlock");
    }
    clean() {
        this._MainBlock.innerHTML = '';
    }
    createHeader(text) {
        let title = document.getElementById("MainTitle");
        title.innerHTML = text;
    }
    createBigText(text) {
        let big = document.createElement("big");
        let p = document.createElement("p");
        big.innerHTML = text;
        p.appendChild(big);
        this._MainBlock.appendChild(p);
    }
    createParagraph(text, id = '') {
        let p = document.createElement("p");
        p.innerHTML = text;
        p.setAttribute("id", id);
        this._MainBlock.appendChild(p);
    }
    createBold(text, id = '') {
        let p = document.createElement("p");
        let bold = document.createElement("b");
        bold.innerHTML = text;
        bold.setAttribute("id", id);
        p.appendChild(bold);
        this._MainBlock.appendChild(p);
    }
    createButton(text, method, id = '') {
        let button = document.createElement("button");
        button.innerHTML = text;
        button.setAttribute("onclick", method);
        button.setAttribute("id", id);
        this._MainBlock.appendChild(button);
    }
    createHorizontalLine() {
        let hr = document.createElement("hr");
        this._MainBlock.appendChild(hr);
    }
    createImage(source, color = "black") {
        let image = document.createElement("img");
        image.src = source;
        image.setAttribute("style", `border-color: ${color}`);
        this._MainBlock.appendChild(image);
    }
}
function lsSong() {
    let screen = new Scene();
    let song = randomNumber(0, lsSongs.length - 1);
    screen.createBold(`The lip-sync song is... ${lsSongs[song]}!`);
    lsSongs.splice(song, 1);
}
let allLsSongs = [
    "Supermodel by RuPaul",
    "We Break The Dawn by Michelle Williams",
    "The Greatest Love Of All by Whitney Houstoun",
    "Would I Lie to You by Eurythmics",
    "Stronger by Britney Spears",
    "Shackles (Praise You) by Mary Mary",
    "Cover Girl (Put The Bass In Your Walk) by RuPaul",
    "My Lovin' (You're Never Gonna Get It) by En Vogue",
    "I Hear You Knocking by Wynnona Judd",
    "Two of Hearts by Stacey Q",
    "Carry On by Martha Wash",
    "Black Velvet by Alannah Myles",
    "He's The Greatest Dancer by Sister Sledge",
    "Shake Your Love by Debbie Gibson",
    "Something He Can Feel by Aretha Franklin",
    "Jealous of My Boogie by RuPaul",
    "The Right Stuff by Vanessa Williams",
    "Bad Romance by Lady Gaga",
    "Don't Leave Me This Way by Thelma Houston",
    "Unnatural by WJSN",
    "Pantomime by WJSN",
    "Knock On Wood by Amii Stewart",
    "MacArthur Park by Donna Summer",
    "Hey Mickey by Toni Basil",
    "Believe by Cher",
    "Even Angels by Fantasia",
    "Straight Up by Paula Abdul",
    "I Think About You by Patti LaBelle",
    "Champion by RuPaul",
    "Toxic by Britney Spears",
    "Bad Girls by Donna Summer",
    "This Will Be (An Everlasting Love) by Natalie Cole",
    "Trouble by P!nk",
    "Vogue by Madonna",
    "Born This Way by Lady Gaga",
    "Mi Vida Loca by Pam Tillis",
    "It's Raining Men (The Sequel) by Martha Wash and RuPaul",
    "I've Got To Use My Imagination by Gladys Knight",
    "(You Make Me Feel Like) A Natural Woman by Aretha Franklin",
    "No One Else On Earth by Wynnona Judd",
    "Glamazon by RuPaul",
    "Party in the U.S.A by Miley Cyrus",
    "Only Girl (In The World) by Rihanna",
    "When I Grow Up by Pussycat Dolls",
    "Oops!...I Did It Again by Britney Spears",
    "Take Me Home by Cher",
    "I'm So Excited by The Pointer Sisters",
    "Whip My Hair by Willow Smith",
    "Catallena by Orange Caramel",
    "Cold Hearted by Paula Abdul",
    "(It Takes) Two To Make It Right by Seduction",
    "Malambo No. 1 by Yma Sumac",
    "The Beginning by RuPaul",
    "Express Yourself by Madonna",
    "Turn The Beat Around by Vicky Sue Robinson",
    "Shake it Up by Selena Gomez",
    "I'm Every Woman by Chaka Khan",
    "Head to Toe by Lisa Lisa & Cult Jam",
    "Whatta Man by Salt-n-Pepa feat. En Vogue",
    "Point of No Return by Exposé",
    "Stupid Girls by P!nk",
    "Vibeology by Paula Abdul",
    "Think by Aretha Franklin",
    "Stronger (What Doesn't Kill You) by Kelly Clarkson",
    "Sissy That Walk by RuPaul",
    "MAGO by GFRIEND",
    "Twist of Fate by Olivia Newton-John",
    "I Was Gonna Cancel by Kylie Minogue",
    "Dreaming by Blondie",
    "love4eva by LOONA/yyxy ft. Grimes",
    "Lovergirl by Teena Marie",
    "Break Free by Ariana Grande",
    "No More Lies by Michel'le",
    "I Think We're Alone Now by Tiffany",
    "Really Don't Care by Demi Lovato",
    "Show Me Love by Robin S.",
    "Roar by Katy Perry",
    "Born Naked by RuPaul",
    "Applause by Lady Gaga",
    "I Will Survive by Gloria Gaynor",
    "Mesmerized by Faith Evans",
    "Call Me by Blondie",
    "Causing A Commotion by Madonna",
    "I Don't Care by Icona Pop",
    "And I Am Telling You I'm Not Going by Jennifer Holliday",
    "You Make Me Feel (Mighty Real) by Sylvester",
    "The Realness by RuPaul",
    "Love Shack by The B-52's",
    "Holding Out For A Hero by Bonnie Tyler",
    "I Wanna Go by Britney Spears",
    "Woman Up by Meghan Trainor",
    "Music by Madonna",
    "Finally by Cece Peniston",
    "Rosy by Olivia Hye & Gowon (ft. Heejin)",
    "Baby I'm Burnin' by Dolly Parton",
    "Greedy by Ariana Grande",
    "Cool For The Summer by Demi Lovato",
    "Macho Man by The Village People",
    "U Wear It Well by RuPaul",
    "So Emotional by Whitney Houston",
    "It's Not Right But It's Okay by Whitney Houston",
    "Ain't No Other Man by Christina Aguilera",
    "Best Of My Love by The Emotions",
    "Celebrity Skin by Hole",
    "Pound The Alarm by Nicki Minaj",
    "Man! I Feel Like A Woman by Shania Twain",
    "I'm Coming Out by Diana Ross",
    "Cut To The Feeling by Carly Rae Jepsen",
    "Groove Is In The Heart by Deee-Lite",
    "New Attitude by Patti LaBelle",
    "Good As Hell by Lizzo",
    "Nasty Girl by Vanity 6",
    "Call Me Mother by RuPaul",
    "Nasty by Janet Jackson",
    "If by Janet Jackson",
    "Bang Bang by Jessie J, Ariana Grande and Nicki Minaj",
    "Best of Both Worlds by Hannah Montana",
    "Work Bitch by Britney Spears",
    "4 Walls by f(x)",
    "Living in America by James Brown",
    "I'm Your Baby Tonight by Whitney Houston",
    "Last Dance by Donna Summer",
    "Strut by Sheena Easton",
    "Sorry Not Sorry by Demi Lovato",
    "Hood Boy by Fantasia",
    "No More Drama by Mary J. Blige",
    "No Scrubs by TLC",
    "Pride: A Deeper Love by Aretha Franklin",
    "Bootylicious by Destiny's Child",
    "SOS by Rihanna",
    "The Edge of Glory by Lady Gaga",
    "Starships by Nicki Minaj",
    "Call Your Girlfriend by Robyn",
    "Problem by Ariana Grande and Iggy Azalea",
    "S&M by Rihanna",
    "Gotta Go by Chungha",
    "Stay Tonight by Chungha",
    "Siren by SUNMI",
    "Adrenaline by Girls' Generation-TTS",
    "Heart to Break by Kim Petras",
    "Let It Go by Caissie Levy",
    "Burning Up by Madonna",
    "This Is My Night by Chaka Khan",
    "Firework by Katy Perry",
    "Kill The Lights by Alex Newell",
    "1999 by Prince",
    "On The Floor by Jennifer Lopez and Pitbull",
    "Bring Back My Girls by RuPaul",
    "Survivor by Destiny's Child",
    "Call Me Maybe by Carly Rae Jepsen",
    "The Pleasure Principle by Janet Jackson",
    "Rumors by Lindsay Lohan",
    "Ex's & Oh's by Elle King",
    "Lady Marmalade by Christina Aguilera, Lil' Kim, Mya & Pink",
    "Break My Heart by Dua Lipa",
    "If U Seek Amy by Britney Spears",
    "100% Pure Love by Crystal Waters",
    "Fancy by Iggy Azalea and Charli XCX",
    "Hit 'Em Up Style (Oops!) by Blue Cantrell",
    "Whole Lotta Woman by Kelly Clarkson",
    "BO$$ by Fifth Harmony",
    "Fascinated by Company B",
    "My Humps by Black Eyed Peas",
    "No Tears Left To Cry by Ariana Grande",
    "Strong Enough by Cher",
    "I Learned from the Best by Whitney Houston",
    "Gimme More by Britney Spears",
    "Till the World Ends by Britney Spears",
    "Turn Me On by David Guetta and Nicki Minaj",
    "Ignorance by Paramore",
    "Tightrope by Janelle Monae",
    "In The Next Life by Kim Petras",
    "Dancing Queen by ABBA",
    "Bring Me To Life by Evanescence",
    "Sk8er Boi by Avril Lavigne",
    "Kiss by Prince",
    "Hung Up by Madonna",
    "Cannibal by Kesha",
    "Candyman by Christina Aguilera",
    "Bohemian Rhapsody by Queen",
    "Venus by Lady Gaga",
    "Hair by Lady Gaga",
    "Dancing Queen by ABBA",
    "STFU by Rina Sawayama",
    "HOT HOT by Bree Runway",
    "I Can Love You by Mary J. Blige and Lil Kim",
    "Superbass by Nicki Minaj",
    "Can't Get You Out of My Head by Kylie Minogue",
    "Misery Business by Paramore",
    "The Promise by Girls Aloud",
    "Star Love by Cheryl Lynn",
    "Freeway of Love by Aretha Franklin",
    "Tell It To My Heart by Taylor Dayne",
    "Bon Bon Chocolat by EVERGLOW",
    "Dirrty by Christina Aguilera",
    "34+35 by Ariana Grande",
    "Barbie Girl by Aqua",
    "Va Va Voom by Nicki Minaj",
    "Hallucinate by Dua Lipa",
    "Bubblegum Bitch by MARINA",
    "Boss Bitch by Doja Cat",
    "Hopelessly Devote to You by Olivia Newton John",
    "Your Disco Needs You by Kylie Minogue",
    "Froot by MARINA",
    "She Works Hard For The Money by Donna Summer",
    "Supernova by Carly Rae Jepsen",
    "Detention by Melanie Martinez",
    "Complicated by Avril Lavigne",
    "So What by P!nk",
    "good 4 u by Olivia Rodrigo",
    "Take A Chance On Me by ABBA",
    "Casanova by Allie X",
    "Tik Tok by Kesha",
    "Telephone by Lady Gaga ft. Beyoncé",
    "Heart of Glass by Blondie",
    "When I Think of You by Janet Jackson",
    "Prisoner by Miley Cyrus (ft. Dua Lipa)",
    "Homemade Dynamite by Lorde",
    "claws by Charli XCX",
    "NASA by Ariana Grande",
    "Say So by Doja Cat",
    "Captain Hook by Megan Thee Stallion",
    "Pynk by Janelle Monaé (ft. Grimes)",
    "Into the Groove by Madonna",
    "Cool Girl by Tove Lo",
    "Break The Ice by Britney Spears",
    "Still Into You by Paramore",
    "Vroom Vroom by Charlie XCX",
    "XS by Rina Sawayama",
    "Teenage Dream by Katy Perry",
    "Unwritten by Natasha Bedingfield",
    "Hollaback Girl by Gwen Stefani",
    "Miss You Much by Janet Jackson",
    "I Feel Love by Donna Summer",
    "Don't Stop The Music by Rihanna",
    "Love On The Brain by Rihanna",
    "Valerie by Amy Winehouse",
    "Killer Queen by Queen",
    "Ribs by Lorde",
    "Solar Power by Lorde",
    "Jerome by Lizzo",
    "Kinky by Kesha",
    "G.U.Y by Lady Gaga",
    "Waka Waka (This Time For Africa) by Shakira",
    "Dangerous Woman by Ariana Grande",
    "Whenever, Whenever by Shakira",
    "Lowlife by Poppy",
    "Conqueror by Estelle",
    "Dynasty by Rina Sawayama",
    "Fergalicious by Fergie",
    "Meet Me Halfway by Black Eyed Peas",
    "I Say A Little Prayer by Aretha Franklin",
    "Aura by Lady Gaga",
    "Now That You Got It by Gwen Stefani",
    "Skyfall by Adele",
    "Back To Black by Amy Winehouse",
    "Tears Dry On Their Own by Amy Winehouse",
    "Seven Wonders by Fleetwood Mac",
    "Baby One More Time by Britney Spears",
    "Naked by Ava Max",
    "A Little Party Never Killed Nobody by Fergie",
    "Tears by Clean Bandit",
    "Sweetest Pie by Megan Thee Stallion (ft. Dua Lipa)",
    "Say My Name by Tove Styrke",
    "Do It by Chloe X Halle",
    "Like A Virgin by Madonna",
    "Chun Li by Nicki Minaj",
    "ATM by Bree Runway",
    "Star Love by Cheryl Lynn",
    "Express by Christina Aguillera",
    "Kill V. Main by Grimes",
    "Taki Taki by DJ Snake (ft. Selena Gomez, Cardi B)",
    "Black Cat by Janet Jackson",
    "Tainted Love by Gloria Jones",
    "Private Dancer by Tina Turner",
    "Sweet Dreams by Beyoncé",
    "Kiss Me More by Doja Cat (ft. SZA)",
    "Take A Chance On Me by ABBA",
    "Mine by Slayyyter",
    "Baby One More Time by Britney Spears",
    "Troubled Paradise by Slayyyter",
    "Swine by Lady Gaga",
    "Vacation by GRL",
    "Weekend by Taeyeon",
    "Now That I Found You by Carly Rae Jepsen",
    "IDGAF by Dua Lipa",
    "In My Bed by Amy Winehouse",
    "Get Outta My Way by Kylie Minogue",
    "I Drove All Night by Celine Dion",
    "Bad Bitch Tip by LaLa Ri",
    "Run The World (Girls) by Beyoncé",
    "Focus by Charli XCX",
    "Judas by Lady Gaga",
    "Circus by Britney Spears",
    "Buttons by The Pussycat Dolls",
    "Venom by Slayyyter",
    "Shut Up And Drive by Rihanna",
    "Dollhouse by Melanie Martinez",
    "Brick By Boring Brick by Paramore",
    "How I Feel About You by Miranda Cosgrove",
    "Real Love by Clean Bandit & Jess Glyne",
    "Queen Of The Night by Whitney Houston",
    "Lucky Star by Madonna",
    "Good Girl by Carrie Underwood",
    "WTF Do I Know by Miley Cyrus",
    "Say So by Doja Cat",
    "Soulmate by Lizzo",
    "Bitch I'm Madonna by Madonna",
    "Hold My Hand by Jess Glyne",
    "Not Myself Tonight by Christina Aguillera",
    "Boys by Lizzo",
    "Same Old Fool by Dolly Parton",
    "Fantasy by Mariah Carey",
    "What You Get Is What You See by Tina Turner",
    "All About That Bass by Meghan Trainor",
    "Edge Of Seventeen by Stevie Nicks",
    "new by Yves",
    "Love Cherry Motion by Choerry",
    "Why Not? by LOONA",
    "So What by LOONA",
    "Comme Des Garçon by Rina Sawayama",
    "See You Again by Miley Cyrus",
    "Spice Up Your Life by Spice Girls",
    "Tears Dry On Their Own by Amy Winehouse",
    "Power by Little Mix",
    "Miss You Much by Janet Jackson",
    "Rain On Me By Lady Gaga ft. Ariana Grande",
    "Stupid Love by Lady Gaga",
    "Levitating by Dua Lipa",
    "Vagina by CupcakKe",
    "Eclipse by Kim Lip",
    "Wildest Dreams by Taylor Swift",
    "good 4 u by Olivia Rodrigo",
    "Telephone by Lady Gaga ft. Beyoncé",
    "Physical by Dua Lipa",
    "Conqueror by Estelle",
    "Triste com T by Pabllo Vittar",
    "Dance Again by Jenifer Lopez",
    "Brutal by Olivia Rodrigo",
    "Oh No! by MARINA",
    "How You Like That by BLACKPINK",
    "Focus by Ariana Grande",
    "Stronger by Christina Aguillera",
    "Domino by Jessie J",
    "Salute by Little Mix",
    "Scandalous by Mis-Teeq",
    "Friday by Rebecca Black",
    "Fantasy by Mariah Carey",
    "All I Want For Christmas Is You by Mariah Carey",
    "Raspberry Beret by Prince",
    "Why Worry by Set It Off",
    "Sweet Melody by Little Mix",
    "Bittersweet by Fantasia",
    "She Wolf by Shakira",
    "Blame It On The Edit by RuPaul",
    "Big Spender by Shirley Bassey",
    "Turning Tables by Adele",
    "How I Feel About You by Miranda Cosgrove"
];
let lsSongs = [...allLsSongs];
class Team extends Queen {
    constructor(QueenA, QueenB, QueenC) {
        let Name;
        if (QueenA == kasha)
            Name = "Team Mrs. " + QueenB._name.split(" ")[0] + " Davis";
        else if (QueenB == kasha)
            Name = "Team Mrs. " + QueenA._name.split(" ")[0] + " Davis";
        else if ((QueenA || QueenB) == latrice && ((QueenA && QueenB) == manila))
            Name = "Team Latrila";
        else if ((QueenA || QueenB) == yara && ((QueenA && QueenB) == alexis))
            Name = "Team Yarlexis";
        else if ((QueenA || QueenB) == chad && ((QueenA && QueenB) == shannel))
            Name = "Team Shad";
        else if ((QueenA || QueenB) == ninaf && ((QueenA && QueenB) == tammie))
            Name = "Team Brown Flowers";
        else if ((QueenA || QueenB) == raven && ((QueenA && QueenB) == jujubee))
            Name = "Team Rujubee";
        else if ((QueenA || QueenB) == mimi && ((QueenA && QueenB) == pandora))
            Name = "Team Mandora";
        else if (QueenA._name.split(' ')[0].length == 3 && QueenB._name.split(' ')[0].length > 3)
            Name = "Team " + QueenA._name.split(' ')[0] + QueenB._name.split(' ')[0].slice(QueenB._name.split(' ')[0].length - 4, QueenB._name.split(' ')[0].length);
        else if (QueenA._name.split(' ')[0].length > 3 && QueenB._name.split(' ')[0].length == 3)
            Name = "Team " + QueenA._name.split(' ')[0].slice(0, 4) + QueenB._name.split(' ')[0];
        else if (QueenA._name.split(' ')[0].length == 3 && QueenB._name.split(' ')[0].length == 3)
            Name = "Team " + QueenA._name.split(' ')[0] + QueenB._name.split(' ')[0];
        else
            Name = "Team " + QueenA._name.split(' ')[0].slice(0, 4) + QueenB._name.split(' ')[0].slice(QueenB._name.split(' ')[0].length - 4, QueenB._name.split(' ')[0].length);
        super(Name, ((QueenA._actingStat + QueenB._actingStat) / 2), ((QueenA._comedyStat + QueenB._comedyStat) / 2), ((QueenA._vocalStat + QueenB._vocalStat) / 2), ((QueenA._danceStat + QueenB._danceStat) / 2), ((QueenA._lyricalStat + QueenB._lyricalStat) / 2), ((QueenA._designStat + QueenB._designStat) / 2), ((QueenA._improvStat + QueenB._improvStat) / 2), ((QueenA._runwayStat + QueenB._runwayStat) / 2), 0);
        this.QueenA = QueenA;
        this.QueenB = QueenB;
        this.QueenC = QueenC;
    }
}
class Pair extends Queen {
    constructor(QueenA, QueenB) {
        let Name;
            Name = QueenA._name + " & " + QueenB._name;
        super(Name, ((QueenA._actingStat + QueenB._actingStat) / 2), ((QueenA._comedyStat + QueenB._comedyStat) / 2), ((QueenA._vocalStat + QueenB._vocalStat) / 2), ((QueenA._danceStat + QueenB._danceStat) / 2), ((QueenA._lyricalStat + QueenB._lyricalStat) / 2), ((QueenA._designStat + QueenB._designStat) / 2), ((QueenA._improvStat + QueenB._improvStat) / 2), ((QueenA._runwayStat + QueenB._runwayStat) / 2), 0);
        this.QueenA = QueenA;
        this.QueenB = QueenB;
    }
}
class Threesome extends Queen {
    constructor(QueenA, QueenB, QueenC) {
        let Name;
            Name = QueenA._name + ", " + QueenB._name + ", & " + QueenC._name;
        super(Name, ((QueenA._actingStat + QueenB._actingStat + QueenC._actingStat) / 3), ((QueenA._comedyStat + QueenB._comedyStat + QueenC._comedyStat) / 3), ((QueenA._vocalStat + QueenB._vocalStat + QueenC._vocalStat) / 3), ((QueenA._danceStat + QueenB._danceStat + QueenC._danceStat) / 3), ((QueenA._lyricalStat + QueenB._lyricalStat + QueenC._lyricalStat) / 3), ((QueenA._designStat + QueenB._designStat + QueenC._designStat) / 3), ((QueenA._improvStat + QueenB._improvStat + QueenC._improvStat) / 3), ((QueenA._runwayStat + QueenB._runwayStat + QueenC._runwayStat) / 3), 0);
        this.QueenA = QueenA;
        this.QueenB = QueenB;
        this.QueenC = QueenC;
    }
}
function teamsScreen() {
        let screen = new Scene();
    screen.clean();
    screen.createHeader("Pair time!");
    screen.createParagraph("After all the queens enter the werkroom, they now have to choose their pairs!");
    screen.createHorizontalLine();
    let teamList = [];
    for (let i = 0; i < totalCastSize / 2; i++) {
        let indexA = randomNumber(0, currentCast.length - 1);
        let indexB = randomNumber(0, currentCast.length - 1);
        while (indexB == indexA)
            indexB = randomNumber(0, currentCast.length - 1);
        let QueenA = currentCast[indexA];
        let QueenB = currentCast[indexB];
        let team = new Team(QueenA, QueenB);
        screen.createImage(QueenA.image);
        screen.createImage(QueenB.image);
        screen.createBold(`${QueenA.getName()} and ${QueenB.getName()} formed ${team.getName()}!`);
        teamList.push(team);
        currentCast.splice(currentCast.indexOf(QueenA), 1);
        currentCast.splice(currentCast.indexOf(QueenB), 1);
    }
    currentCast = [...teamList];
    totalCastSize = currentCast.length;
    screen.createButton("Proceed", "miniChallenge()");
}
class TeamsForChallenges extends Queen {
    constructor (Queens){
        super(Queens[0].getName(), Queens[0]._actingStat, Queens[0]._comedyStat, Queens[0]._danceStat, Queens[0]._designStat, Queens[0]._improvStat, Queens[0]._runwayStat, 0);
        this.queens = Queens;
    }
}
